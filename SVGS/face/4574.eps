%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1312.i013.011.P.m001.c20.facial expressions.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Алексей Егоров
%%CreationDate: 12/27/2013
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.1 x260 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">work</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2013-12-27T13:33:53+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-27T13:33:53+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-12-27T13:33:51+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9IZrnYOxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRu7&#xA;u1s7WW6u5kt7WBGknnlYIiIoqzMzUAAHUnFDBND/ADq8ta55vtPLmmWd7Mt6Jfq2qGNEt29CNpGP&#xA;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&#xA;VdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:B7244945046EE311BDF684572BF37E3E</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:B7244945046EE311BDF684572BF37E3E</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:B5244945046EE311BDF684572BF37E3E</stRef:instanceID>
            <stRef:documentID>xmp.did:B5244945046EE311BDF684572BF37E3E</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:902B2D82353BE311B3A3D04370F57B38</stEvt:instanceID>
                  <stEvt:when>2013-10-22T20:17:55+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B7244945046EE311BDF684572BF37E3E</stEvt:instanceID>
                  <stEvt:when>2013-12-27T13:33:53+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .905882 .819608 rgb
f
373.041 294.399 mo
373.041 296.94 370.221 299 366.741 299 cv
363.262 299 360.441 296.94 360.441 294.399 cv
360.441 291.859 363.262 289.8 366.741 289.8 cv
370.221 289.8 373.041 291.859 373.041 294.399 cv
cp
1 .764706 .74902 rgb
f
376.78 270.296 mo
375.98 270.432 375.108 270.359 374.309 270.32 cv
373.044 270.264 371.788 270.064 370.54 269.888 cv
367.204 269.415 363.732 269.928 360.34 270.184 cv
365.813 267.6 371.78 265.328 377.66 268.336 cv
378.852 269.256 377.748 270.304 376.78 270.296 cv
cp
380.18 268.512 mo
379.469 265.768 374.452 265.407 372.236 265.136 cv
367.452 264.543 361.244 266.703 357.844 270.031 cv
356.452 271.399 357.5 272.128 358.293 272.111 cv
361.725 272.016 365.133 271.6 368.556 271.584 cv
370.452 271.575 372.34 272.008 374.22 272.144 cv
376.572 272.32 381.076 271.992 380.18 268.512 cv
cp
0 0 0 rgb
f
376.78 270.296 mo
375.98 270.432 375.108 270.359 374.309 270.32 cv
373.044 270.264 371.788 270.064 370.54 269.888 cv
367.204 269.415 363.732 269.928 360.34 270.184 cv
365.813 267.6 371.78 265.328 377.66 268.336 cv
378.852 269.256 377.748 270.304 376.78 270.296 cv
cp
.517647 .317647 .137255 rgb
f
409.676 269.399 mo
408.556 269.607 407.436 269.84 406.284 269.943 cv
405.548 270.008 404.756 270.111 403.996 270.008 cv
403.101 270.056 401.916 269.12 402.86 268.215 cv
407.765 265.184 413.645 267.088 419.125 269.296 cv
415.956 269.191 412.668 268.832 409.676 269.399 cv
cp
421.396 269.064 mo
417.708 266.079 411.612 264.288 407.309 265.016 cv
405.316 265.352 400.756 265.879 400.564 268.464 cv
400.316 271.752 404.532 271.896 406.668 271.64 cv
408.38 271.44 410.044 270.976 411.788 270.911 cv
414.948 270.8 418.156 271.064 421.332 271.023 cv
422.068 271.016 422.908 270.296 421.396 269.064 cv
cp
0 0 0 rgb
f
419.125 269.296 mo
415.956 269.191 412.668 268.832 409.676 269.399 cv
408.556 269.607 407.436 269.84 406.284 269.943 cv
405.548 270.008 404.756 270.111 403.996 270.008 cv
403.101 270.056 401.916 269.12 402.86 268.215 cv
407.765 265.184 413.645 267.088 419.125 269.296 cv
cp
.517647 .317647 .137255 rgb
f
393.535 295.367 mo
392.64 295.672 389.853 296.695 389.564 294.742 cv
389.371 293.43 389.587 292.046 389.527 290.723 cv
389.367 287.101 389.946 283.484 389.813 279.86 cv
389.785 279.05 388.477 278.95 388.382 279.772 cv
387.804 284.825 387.034 290.555 387.788 295.618 cv
388.209 298.447 392.58 298.263 394.266 296.801 cv
394.929 296.225 394.457 295.055 393.535 295.367 cv
cp
0 0 0 rgb
f
368.352 277.871 mo
367.627 277.851 367.236 278.737 367.848 279.202 cv
369.744 280.645 372.336 281.422 373.567 283.484 cv
368.83 282.208 365.699 283.138 361.857 286.92 cv
361.358 287.412 362.107 288.082 362.643 287.891 cv
364.542 287.213 366.133 286.007 368.137 285.444 cv
370.423 284.799 372.563 285.157 374.785 285.762 cv
375.462 285.945 376.29 285.473 376.129 284.673 cv
375.474 281.449 371.734 277.972 368.352 277.871 cv
cp
f
411.989 277.723 mo
412.728 277.711 413.125 278.603 412.504 279.063 cv
410.572 280.485 407.935 281.233 406.682 283.285 cv
411.501 282.063 414.684 283.032 418.59 286.867 cv
419.099 287.366 418.335 288.028 417.79 287.831 cv
415.86 287.129 414.241 285.901 412.205 285.313 cv
409.879 284.64 407.702 284.973 405.439 285.551 cv
404.753 285.727 403.909 285.242 404.075 284.444 cv
404.743 281.222 408.551 277.783 411.989 277.723 cv
cp
f
409.813 306.191 mo
408.62 307.535 407.141 308.64 405.484 309.535 cv
405.396 309.367 404.524 308.584 402.805 308.176 cv
401.956 307.968 400.893 308.384 400.06 308.567 cv
396.7 309.311 393.652 310.12 390.18 310.16 cv
385.484 310.215 379.965 307.792 375.452 309.752 cv
375.244 309.632 375.028 309.52 374.82 309.392 cv
372.765 308.12 371.068 306.336 369.965 304.191 cv
368.293 300.952 370.868 299.888 373.372 299.384 cv
373.765 299.415 374.156 299.456 374.54 299.52 cv
374.548 299.552 374.548 299.592 374.556 299.632 cv
374.956 300.72 374.116 301.72 374.772 302.903 cv
375.461 304.168 376.429 304.879 377.7 305.52 cv
379.093 306.231 380.772 306.472 382.301 306.695 cv
385.101 307.103 387.868 307.68 390.7 307.903 cv
394.74 308.231 399.452 307.056 403.093 305.328 cv
405.452 304.199 406.06 302.039 405.748 299.68 cv
406.86 299.424 407.988 299.296 409.164 299.367 cv
413.172 299.6 411.516 304.272 409.813 306.191 cv
cp
386.532 312.952 mo
383.276 312.76 380.084 312.008 377.148 310.64 cv
379.236 310.288 381.332 310.64 383.477 311.016 cv
386.148 311.479 388.805 311.672 391.508 311.64 cv
393.98 311.615 396.396 311.128 398.765 310.464 cv
399.948 310.136 401.732 309.344 402.973 309.863 cv
403.301 310 403.588 310.176 403.876 310.336 cv
398.54 312.703 391.836 313.264 386.532 312.952 cv
cp
376.125 300.488 mo
376.164 300.239 376.172 300.039 376.164 299.863 cv
381.484 301.239 386.484 305.023 392.204 304.863 cv
395.948 304.76 399.188 302.472 402.436 300.896 cv
402.988 300.624 403.548 300.392 404.116 300.184 cv
404.18 306.735 391.5 306.384 387.108 305.711 cv
384.477 305.304 381.668 305 379.116 304.224 cv
377.364 303.688 375.805 302.615 376.125 300.488 cv
cp
413.66 301.215 mo
412.492 296.711 407.301 297.272 403.805 298.399 cv
401.052 299.288 398.652 301.016 396.004 302.136 cv
391.933 303.863 388.093 302.888 384.228 301.215 cv
381.34 299.968 378.396 298.567 375.388 298.039 cv
372.204 296.863 369.42 298.399 368.516 299.711 cv
367.916 300.504 367.54 301.664 367.668 302.992 cv
368.084 307.336 372.908 310.607 376.404 312.344 cv
385.484 316.855 399.301 315.656 407.9 310.592 cv
410.852 308.848 414.66 305.056 413.66 301.215 cv
cp
f
403.876 310.336 mo
398.54 312.703 391.836 313.264 386.532 312.952 cv
383.276 312.76 380.084 312.008 377.148 310.64 cv
379.236 310.288 381.332 310.64 383.477 311.016 cv
386.148 311.479 388.805 311.672 391.508 311.64 cv
393.98 311.615 396.396 311.128 398.765 310.464 cv
399.948 310.136 401.732 309.344 402.973 309.863 cv
403.301 310 403.588 310.176 403.876 310.336 cv
cp
1 1 1 rgb
f
409.813 306.191 mo
408.62 307.535 407.141 308.64 405.484 309.535 cv
405.396 309.367 404.524 308.584 402.805 308.176 cv
401.956 307.968 400.893 308.384 400.06 308.567 cv
396.7 309.311 393.652 310.12 390.18 310.16 cv
385.484 310.215 379.965 307.792 375.452 309.752 cv
375.244 309.632 375.028 309.52 374.82 309.392 cv
372.765 308.12 371.068 306.336 369.965 304.191 cv
368.293 300.952 370.868 299.888 373.372 299.384 cv
373.765 299.415 374.156 299.456 374.54 299.52 cv
374.548 299.552 374.548 299.592 374.556 299.632 cv
374.956 300.72 374.116 301.72 374.772 302.903 cv
375.461 304.168 376.429 304.879 377.7 305.52 cv
379.093 306.231 380.772 306.472 382.301 306.695 cv
385.101 307.103 387.868 307.68 390.7 307.903 cv
394.74 308.231 399.452 307.056 403.093 305.328 cv
405.452 304.199 406.06 302.039 405.748 299.68 cv
406.86 299.424 407.988 299.296 409.164 299.367 cv
413.172 299.6 411.516 304.272 409.813 306.191 cv
cp
.788235 .152941 .152941 rgb
f
404.116 300.184 mo
404.18 306.735 391.5 306.384 387.108 305.711 cv
384.477 305.304 381.668 305 379.116 304.224 cv
377.364 303.688 375.805 302.615 376.125 300.488 cv
376.164 300.239 376.172 300.039 376.164 299.863 cv
381.484 301.239 386.484 305.023 392.204 304.863 cv
395.948 304.76 399.188 302.472 402.436 300.896 cv
402.988 300.624 403.548 300.392 404.116 300.184 cv
cp
1 1 1 rgb
f
421.176 294.25 mo
421.176 296.791 418.355 298.85 414.876 298.85 cv
411.396 298.85 408.576 296.791 408.576 294.25 cv
408.576 291.709 411.396 289.65 414.876 289.65 cv
418.355 289.65 421.176 291.709 421.176 294.25 cv
cp
1 .764706 .74902 rgb
f
47.3184 84.9199 mo
47.3184 87.4609 44.4976 89.52 41.0186 89.52 cv
37.5391 89.52 34.7183 87.4609 34.7183 84.9199 cv
34.7183 82.3794 37.5391 80.3203 41.0186 80.3203 cv
44.4976 80.3203 47.3184 82.3794 47.3184 84.9199 cv
cp
f
95.8184 83.9199 mo
95.8184 86.4609 92.9976 88.52 89.5186 88.52 cv
86.0391 88.52 83.2183 86.4609 83.2183 83.9199 cv
83.2183 81.3794 86.0391 79.3203 89.5186 79.3203 cv
92.9976 79.3203 95.8184 81.3794 95.8184 83.9199 cv
cp
f
50.2822 74.1602 mo
46.8662 76.5601 42.0664 76.8481 38.7705 74.1602 cv
36.1465 72.0161 35.5146 68.3125 36.6343 65.248 cv
38.042 61.376 42.8823 59.5278 46.6743 59.6641 cv
46.7861 59.6641 46.8823 59.6323 46.9702 59.584 cv
49.3545 59.6484 51.5464 60.4644 53.3306 63.0562 cv
56.0903 67.0723 53.8262 71.6719 50.2822 74.1602 cv
cp
56.1943 64.6963 mo
53.7705 56.8481 44.4185 56.104 38.1143 60.5762 cv
35.1787 63.0801 33.3623 67.0645 34.4502 70.6401 cv
36.3701 76.9277 42.4263 79.3042 48.4346 77.3125 cv
53.4663 75.6484 57.8984 70.1841 56.1943 64.6963 cv
cp
0 0 0 rgb
f
50.2822 74.1602 mo
46.8662 76.5601 42.0664 76.8481 38.7705 74.1602 cv
36.1465 72.0161 35.5146 68.3125 36.6343 65.248 cv
38.042 61.376 42.8823 59.5278 46.6743 59.6641 cv
46.7861 59.6641 46.8823 59.6323 46.9702 59.584 cv
49.3545 59.6484 51.5464 60.4644 53.3306 63.0562 cv
56.0903 67.0723 53.8262 71.6719 50.2822 74.1602 cv
cp
1 1 1 rgb
f
87.9224 75.4561 mo
84.1143 76.9922 79.3945 76.4482 76.874 72.9844 cv
74.8901 70.248 75.0342 66.2402 76.7627 63.4644 cv
77.8901 61.6484 79.6182 60.6563 81.5146 59.9922 cv
85.9541 58.9521 91.0664 59.6963 93.5225 65.3042 cv
95.5303 69.8882 91.9541 73.832 87.9224 75.4561 cv
cp
95.7544 65.856 mo
93.4902 57.7441 83.9385 56.272 77.6582 60.0801 cv
74.5225 62.5439 73.0186 66.936 74.042 71.2559 cv
75.4985 77.3843 82.0903 79.0322 87.4824 77.6563 cv
92.5625 76.3521 97.2983 71.4082 95.7544 65.856 cv
cp
0 0 0 rgb
f
87.9224 75.4561 mo
84.1143 76.9922 79.3945 76.4482 76.874 72.9844 cv
74.8901 70.248 75.0342 66.2402 76.7627 63.4644 cv
77.8901 61.6484 79.6182 60.6563 81.5146 59.9922 cv
85.9541 58.9521 91.0664 59.6963 93.5225 65.3042 cv
95.5303 69.8882 91.9541 73.832 87.9224 75.4561 cv
cp
1 1 1 rgb
f
49.9863 40.624 mo
49.458 41.2402 48.7305 41.728 48.0825 42.2002 cv
47.0664 42.9521 45.9624 43.584 44.8823 44.2324 cv
41.9863 45.96 39.6104 48.5439 37.1382 50.8721 cv
39.7627 45.4238 42.9785 39.9043 49.4424 38.5522 cv
50.9541 38.52 50.7544 40.0239 49.9863 40.624 cv
cp
51.5146 37.104 mo
49.2344 35.416 45.1064 38.2881 43.2104 39.4644 cv
39.1221 42.0161 35.6504 47.6001 35.0986 52.3203 cv
34.874 54.2642 36.1465 54.168 36.7544 53.6563 cv
39.3623 51.4238 41.7466 48.96 44.4106 46.792 cv
45.874 45.6001 47.6104 44.7441 49.1626 43.6719 cv
51.0986 42.3281 54.4023 39.2402 51.5146 37.104 cv
cp
0 0 0 rgb
f
49.9863 40.624 mo
49.458 41.2402 48.7305 41.728 48.0825 42.2002 cv
47.0664 42.9521 45.9624 43.584 44.8823 44.2324 cv
41.9863 45.96 39.6104 48.5439 37.1382 50.8721 cv
39.7627 45.4238 42.9785 39.9043 49.4424 38.5522 cv
50.9541 38.52 50.7544 40.0239 49.9863 40.624 cv
cp
.517647 .317647 .137255 rgb
f
85.1787 44.9043 mo
84.2422 44.2559 83.2822 43.6162 82.4023 42.8721 cv
81.8423 42.3921 81.2104 41.9043 80.7466 41.2964 cv
80.0825 40.6963 79.9146 39.1919 81.2183 39.2241 cv
86.8262 40.5762 89.6182 46.0879 91.8984 51.5361 cv
89.7466 49.2163 87.6826 46.6323 85.1787 44.9043 cv
cp
93.6582 52.9922 mo
93.1865 48.2642 90.1704 42.6802 86.626 40.1362 cv
84.9863 38.96 81.4023 36.0879 79.4263 37.7681 cv
76.9224 39.9121 79.7861 43 81.4663 44.3359 cv
82.8105 45.416 84.3145 46.272 85.5864 47.4644 cv
87.8984 49.6323 89.9702 52.0962 92.2261 54.3203 cv
92.7544 54.8398 93.8584 54.9277 93.6582 52.9922 cv
cp
0 0 0 rgb
f
91.8984 51.5361 mo
89.7466 49.2163 87.6826 46.6323 85.1787 44.9043 cv
84.2422 44.2559 83.2822 43.6162 82.4023 42.8721 cv
81.8423 42.3921 81.2104 41.9043 80.7466 41.2964 cv
80.0825 40.6963 79.9146 39.1919 81.2183 39.2241 cv
86.8262 40.5762 89.6182 46.0879 91.8984 51.5361 cv
cp
.517647 .317647 .137255 rgb
f
73.4795 101 mo
71.1118 101.352 68.5996 99.8081 66.2554 99.4399 cv
64.3193 99.1362 62.4639 99.8721 60.7593 100.704 cv
59.8394 101.16 58.9438 101.648 58.0073 102.072 cv
54.8477 103.52 51.8877 101.56 52.7515 98.4399 cv
53.1118 97.144 53.6636 95.8398 54.5518 94.6719 cv
55.9756 96.6641 59.8799 95.7202 61.9995 95.5122 cv
65.2959 95.1841 71.2637 95.5361 73.2715 92.3125 cv
76.8477 94.9199 78.6074 100.232 73.4795 101 cv
cp
58.6875 91.584 mo
60.2236 90.9043 62.3838 90.4561 63.9277 90.2241 cv
66.5913 89.832 69.3193 90.3359 71.7515 91.416 cv
70.4717 93.4722 65.2393 93.2881 63.0796 93.584 cv
61.4233 93.8081 57.0874 94.9438 55.4717 93.6401 cv
56.3037 92.8398 57.3438 92.1362 58.6875 91.584 cv
cp
77.2554 93.3521 mo
75.2798 90.3359 71.1357 88.9199 67.7676 88.4238 cv
61.9834 87.5762 52.4873 89.5762 50.8799 98.4082 cv
50.4956 100.968 51.4717 103.288 54.1035 104.368 cv
55.5596 104.968 57.3193 104.352 58.6958 103.856 cv
61.6797 102.768 63.5278 100.936 66.9756 101.472 cv
70.5752 102.032 73.8232 104.216 77.1118 101.456 cv
79.6636 99.3125 78.8076 95.7363 77.2554 93.3521 cv
cp
0 0 0 rgb
f
73.4795 101 mo
71.1118 101.352 68.5996 99.8081 66.2554 99.4399 cv
64.3193 99.1362 62.4639 99.8721 60.7593 100.704 cv
59.8394 101.16 58.9438 101.648 58.0073 102.072 cv
54.8477 103.52 51.8877 101.56 52.7515 98.4399 cv
53.1118 97.144 53.6636 95.8398 54.5518 94.6719 cv
55.9756 96.6641 59.8799 95.7202 61.9995 95.5122 cv
65.2959 95.1841 71.2637 95.5361 73.2715 92.3125 cv
76.8477 94.9199 78.6074 100.232 73.4795 101 cv
cp
.788235 .152941 .152941 rgb
f
71.7515 91.416 mo
70.4717 93.4722 65.2393 93.2881 63.0796 93.584 cv
61.4233 93.8081 57.0874 94.9438 55.4717 93.6401 cv
56.3037 92.8398 57.3438 92.1362 58.6875 91.584 cv
60.2236 90.9043 62.3838 90.4561 63.9277 90.2241 cv
66.5913 89.832 69.3193 90.3359 71.7515 91.416 cv
cp
1 1 1 rgb
f
51.3955 66.7607 mo
50.8994 65.2476 50.1128 63.9741 47.7817 63.6802 cv
47.0986 63.4717 43.2471 63.8066 42.9653 68.1968 cv
42.7939 70.8691 45.3467 73.2305 48.02 72.6729 cv
50.582 72.1377 52.1963 69.2046 51.3955 66.7607 cv
cp
0 0 0 rgb
f
85.8931 66.7607 mo
85.397 65.2476 84.6104 63.9741 82.2793 63.6802 cv
81.5967 63.4717 77.7446 63.8066 77.4624 68.1968 cv
77.2915 70.8691 79.8447 73.2305 82.5171 72.6729 cv
85.0796 72.1377 86.6943 69.2046 85.8931 66.7607 cv
cp
f
66.5693 80.2979 mo
65.6826 80.6289 62.9282 81.7329 62.5811 79.79 cv
62.3486 78.4844 62.5225 77.0942 62.4248 75.7734 cv
62.1582 72.1577 62.6279 68.5264 62.3882 64.9082 cv
62.335 64.0981 61.0239 64.0381 60.9541 64.8613 cv
60.5259 69.9307 59.9272 75.6797 60.8311 80.7188 cv
61.3369 83.5337 65.7002 83.2202 67.3408 81.708 cv
67.9868 81.1133 67.479 79.9585 66.5693 80.2979 cv
cp
f
160.393 83.9927 mo
160.393 86.5332 157.572 88.5928 154.093 88.5928 cv
150.613 88.5928 147.793 86.5332 147.793 83.9927 cv
147.793 81.4521 150.613 79.3926 154.093 79.3926 cv
157.572 79.3926 160.393 81.4521 160.393 83.9927 cv
cp
1 .764706 .74902 rgb
f
208.893 82.9927 mo
208.893 85.5332 206.072 87.5928 202.593 87.5928 cv
199.113 87.5928 196.293 85.5332 196.293 82.9927 cv
196.293 80.4521 199.113 78.3926 202.593 78.3926 cv
206.072 78.3926 208.893 80.4521 208.893 82.9927 cv
cp
f
164.957 74.4985 mo
161.549 76.8984 156.742 77.187 153.445 74.4985 cv
150.822 72.355 150.189 68.6509 151.31 65.5869 cv
152.718 61.7148 157.558 59.8667 161.35 60.0029 cv
161.461 60.0029 161.558 59.9707 161.654 59.9229 cv
164.029 59.9868 166.229 60.8027 168.006 63.3945 cv
170.766 67.4106 168.502 72.0107 164.957 74.4985 cv
cp
170.877 65.0352 mo
168.445 57.187 159.094 56.4429 152.79 60.9146 cv
149.854 63.4189 148.038 67.4028 149.126 70.9785 cv
151.045 77.2666 157.109 79.6426 163.109 77.6509 cv
168.142 75.9868 172.574 70.5229 170.877 65.0352 cv
cp
0 0 0 rgb
f
164.957 74.4985 mo
161.549 76.8984 156.742 77.187 153.445 74.4985 cv
150.822 72.355 150.189 68.6509 151.31 65.5869 cv
152.718 61.7148 157.558 59.8667 161.35 60.0029 cv
161.461 60.0029 161.558 59.9707 161.654 59.9229 cv
164.029 59.9868 166.229 60.8027 168.006 63.3945 cv
170.766 67.4106 168.502 72.0107 164.957 74.4985 cv
cp
1 1 1 rgb
f
202.598 75.7949 mo
198.79 77.3306 194.07 76.7871 191.558 73.3228 cv
189.574 70.5869 189.709 66.5786 191.438 63.8027 cv
192.565 61.9868 194.302 60.9946 196.189 60.3306 cv
200.629 59.291 205.749 60.0352 208.197 65.6426 cv
210.206 70.2266 206.629 74.1709 202.598 75.7949 cv
cp
210.43 66.1948 mo
208.174 58.0825 198.622 56.6108 192.342 60.4189 cv
189.206 62.8828 187.693 67.2749 188.718 71.5947 cv
190.174 77.7227 196.766 79.3711 202.158 77.9946 cv
207.238 76.6909 211.974 71.7466 210.43 66.1948 cv
cp
0 0 0 rgb
f
202.598 75.7949 mo
198.79 77.3306 194.07 76.7871 191.558 73.3228 cv
189.574 70.5869 189.709 66.5786 191.438 63.8027 cv
192.565 61.9868 194.302 60.9946 196.189 60.3306 cv
200.629 59.291 205.749 60.0352 208.197 65.6426 cv
210.206 70.2266 206.629 74.1709 202.598 75.7949 cv
cp
1 1 1 rgb
f
168.07 50.1709 mo
167.277 50.3145 166.406 50.2427 165.598 50.2109 cv
164.333 50.1548 163.078 49.9629 161.83 49.7871 cv
158.494 49.3306 155.021 49.8667 151.638 50.1309 cv
157.094 47.5229 163.054 45.2266 168.941 48.2109 cv
170.142 49.1309 169.045 50.1787 168.07 50.1709 cv
cp
171.461 48.3711 mo
170.742 45.6348 165.726 45.291 163.51 45.0269 cv
158.726 44.459 152.518 46.6426 149.142 49.9868 cv
147.749 51.3628 148.797 52.0908 149.598 52.0664 cv
153.021 51.9551 156.43 51.5229 159.861 51.4985 cv
161.749 51.4824 163.638 51.8984 165.525 52.0269 cv
167.877 52.1948 172.381 51.8511 171.461 48.3711 cv
cp
0 0 0 rgb
f
168.07 50.1709 mo
167.277 50.3145 166.406 50.2427 165.598 50.2109 cv
164.333 50.1548 163.078 49.9629 161.83 49.7871 cv
158.494 49.3306 155.021 49.8667 151.638 50.1309 cv
157.094 47.5229 163.054 45.2266 168.941 48.2109 cv
170.142 49.1309 169.045 50.1787 168.07 50.1709 cv
cp
.517647 .317647 .137255 rgb
f
198.87 48.3306 mo
197.773 48.6587 196.686 49.0029 195.549 49.2266 cv
194.822 49.3628 194.045 49.5469 193.286 49.5229 cv
192.397 49.6665 191.118 48.8589 191.957 47.8589 cv
196.525 44.3306 202.574 45.6191 208.254 47.251 cv
205.094 47.4668 201.79 47.459 198.87 48.3306 cv
cp
210.486 46.7788 mo
206.51 44.1948 200.27 43.0508 196.061 44.2188 cv
194.109 44.7627 189.629 45.7549 189.709 48.3467 cv
189.806 51.6426 194.006 51.3389 196.102 50.875 cv
197.79 50.4985 199.397 49.8589 201.125 49.6191 cv
204.262 49.1787 207.477 49.0986 210.629 48.7305 cv
211.365 48.6509 212.125 47.8428 210.486 46.7788 cv
cp
0 0 0 rgb
f
208.254 47.251 mo
205.094 47.4668 201.79 47.459 198.87 48.3306 cv
197.773 48.6587 196.686 49.0029 195.549 49.2266 cv
194.822 49.3628 194.045 49.5469 193.286 49.5229 cv
192.397 49.6665 191.118 48.8589 191.957 47.8589 cv
196.525 44.3306 202.574 45.6191 208.254 47.251 cv
cp
.517647 .317647 .137255 rgb
f
166.073 67.0996 mo
165.577 65.5859 164.79 64.3125 162.459 64.019 cv
161.776 63.8105 157.924 64.145 157.643 68.5352 cv
157.471 71.2075 160.024 73.5688 162.697 73.0117 cv
165.26 72.4766 166.874 69.543 166.073 67.0996 cv
cp
0 0 0 rgb
f
200.57 67.0996 mo
200.074 65.5859 199.288 64.3125 196.957 64.019 cv
196.273 63.8105 192.422 64.145 192.14 68.5352 cv
191.969 71.2075 194.522 73.5688 197.195 73.0117 cv
199.757 72.4766 201.372 69.543 200.57 67.0996 cv
cp
f
181.247 80.6367 mo
180.36 80.9673 177.605 82.0718 177.259 80.1289 cv
177.026 78.8232 177.2 77.4331 177.102 76.1123 cv
176.835 72.4961 177.305 68.8652 177.066 65.2466 cv
177.012 64.437 175.701 64.377 175.632 65.2002 cv
175.203 70.2695 174.605 76.0181 175.509 81.0576 cv
176.015 83.8726 180.378 83.5586 182.019 82.0469 cv
182.664 81.4521 182.156 80.2969 181.247 80.6367 cv
cp
f
210.074 85.3296 mo
208.826 83.9922 206.523 82.5176 204.631 83.1772 cv
203.952 83.4141 204.072 84.458 204.772 84.5601 cv
205.191 84.6216 205.582 84.7197 205.955 84.8438 cv
202.045 89.1431 200.006 92.147 195.604 94.791 cv
190.705 97.7324 185.145 98.7632 179.494 98.8164 cv
174.04 98.8706 168.171 97.8081 163.152 95.686 cv
160.662 94.6343 158.458 93.043 156.423 91.2891 cv
154.453 89.5894 153.227 87.4277 151.775 85.3501 cv
152.119 85.1289 152.451 84.9019 152.769 84.6963 cv
153.756 84.0591 152.676 82.6157 151.689 83.2334 cv
150.592 83.9219 149.622 84.5996 148.353 84.937 cv
147.601 85.1387 147.816 86.2559 148.5 86.375 cv
149.211 86.498 149.896 86.3237 150.55 86.0278 cv
153.033 90.5732 155.829 93.8125 160.501 96.5522 cv
165.721 99.6133 172.394 100.535 178.333 100.791 cv
184.332 101.05 190.291 99.8887 195.59 97.0361 cv
200.183 94.5664 205.181 90.4346 207.437 85.5625 cv
207.901 85.8486 208.354 86.1704 208.797 86.5566 cv
209.549 87.2109 210.77 86.0752 210.074 85.3296 cv
cp
f
268.11 84.6162 mo
268.11 87.1567 265.29 89.2163 261.81 89.2163 cv
258.33 89.2163 255.51 87.1567 255.51 84.6162 cv
255.51 82.0757 258.33 80.0161 261.81 80.0161 cv
265.29 80.0161 268.11 82.0757 268.11 84.6162 cv
cp
1 .764706 .74902 rgb
f
316.61 83.6162 mo
316.61 86.1567 313.79 88.2163 310.31 88.2163 cv
306.83 88.2163 304.01 86.1567 304.01 83.6162 cv
304.01 81.0757 306.83 79.0161 310.31 79.0161 cv
313.79 79.0161 316.61 81.0757 316.61 83.6162 cv
cp
f
271.403 74.0552 mo
267.995 76.4551 263.186 76.7437 259.899 74.0552 cv
257.268 71.9116 256.635 68.2075 257.755 65.1436 cv
259.163 61.2715 264.003 59.4233 267.795 59.5596 cv
267.907 59.5596 268.011 59.5273 268.1 59.4795 cv
270.475 59.5435 272.675 60.3594 274.451 62.9512 cv
277.211 66.9673 274.947 71.5674 271.403 74.0552 cv
cp
277.322 64.5918 mo
276.978 63.4873 276.499 62.5195 275.907 61.6953 cv
273.755 58.6553 270.123 57.4395 266.387 57.7915 cv
263.907 58.0234 261.396 58.9434 259.235 60.4712 cv
256.307 62.9756 254.482 66.9595 255.579 70.5352 cv
257.49 76.8232 263.555 79.1992 269.555 77.2075 cv
274.587 75.5435 279.019 70.0796 277.322 64.5918 cv
cp
0 0 0 rgb
f
269.146 72.5674 mo
266.475 73.1274 263.915 70.7676 264.091 68.0957 cv
264.371 63.7031 268.219 63.3672 268.907 63.5757 cv
271.235 63.8711 272.027 65.1436 272.522 66.6553 cv
273.322 69.1035 271.707 72.0313 269.146 72.5674 cv
cp
274.451 62.9512 mo
272.675 60.3594 270.475 59.5435 268.1 59.4795 cv
268.011 59.5273 267.907 59.5596 267.795 59.5596 cv
264.003 59.4233 259.163 61.2715 257.755 65.1436 cv
256.635 68.2075 257.268 71.9116 259.899 74.0552 cv
263.186 76.7437 267.995 76.4551 271.403 74.0552 cv
274.947 71.5674 277.211 66.9673 274.451 62.9512 cv
cp
1 1 1 rgb
f
309.051 75.3516 mo
305.243 76.8872 300.515 76.3438 298.003 72.8794 cv
296.019 70.1436 296.163 66.1353 297.883 63.3594 cv
299.011 61.5435 300.747 60.5513 302.635 59.8872 cv
307.075 58.8477 312.195 59.5918 314.643 65.1992 cv
316.658 69.7832 313.075 73.7275 309.051 75.3516 cv
cp
316.875 65.7515 mo
314.619 57.6392 305.067 56.1675 298.787 59.9756 cv
295.65 62.4395 294.139 66.8315 295.163 71.1514 cv
296.619 77.2793 303.211 78.9277 308.603 77.5513 cv
313.69 76.2476 318.419 71.3032 316.875 65.7515 cv
cp
0 0 0 rgb
f
303.643 72.5674 mo
300.971 73.1274 298.419 70.7676 298.587 68.0957 cv
298.867 63.7031 302.723 63.3672 303.403 63.5757 cv
305.731 63.8711 306.522 65.1436 307.019 66.6553 cv
307.818 69.1035 306.203 72.0313 303.643 72.5674 cv
cp
314.643 65.1992 mo
312.195 59.5918 307.075 58.8477 302.635 59.8872 cv
300.747 60.5513 299.011 61.5435 297.883 63.3594 cv
296.163 66.1353 296.019 70.1436 298.003 72.8794 cv
300.515 76.3438 305.243 76.8872 309.051 75.3516 cv
313.075 73.7275 316.658 69.7832 314.643 65.1992 cv
cp
1 1 1 rgb
f
277.067 60.1353 mo
276.268 60.0078 275.467 59.6392 274.723 59.3354 cv
273.555 58.8555 272.443 58.2476 271.322 57.6636 cv
268.339 56.1035 264.899 55.4233 261.619 54.5273 cv
267.635 53.9194 274.019 53.7832 278.547 58.5918 cv
279.363 59.8555 277.978 60.4795 277.067 60.1353 cv
cp
274.515 53.7515 mo
270.211 51.5996 263.627 51.5513 259.314 53.5435 cv
257.547 54.3672 258.283 55.4077 259.043 55.6553 cv
261.475 56.4395 263.947 57.0552 266.387 57.7915 cv
267.227 58.0474 268.059 58.3115 268.891 58.5996 cv
270.675 59.2314 272.307 60.2637 274.035 61.0234 cv
274.564 61.2554 275.219 61.5034 275.907 61.6953 cv
278.075 62.2793 280.627 62.3115 280.867 59.5996 cv
281.115 56.7754 276.507 54.7515 274.515 53.7515 cv
cp
0 0 0 rgb
f
277.067 60.1353 mo
276.268 60.0078 275.467 59.6392 274.723 59.3354 cv
273.555 58.8555 272.443 58.2476 271.322 57.6636 cv
268.339 56.1035 264.899 55.4233 261.619 54.5273 cv
267.635 53.9194 274.019 53.7832 278.547 58.5918 cv
279.363 59.8555 277.978 60.4795 277.067 60.1353 cv
cp
.517647 .317647 .137255 rgb
f
299.932 51.7031 mo
299.083 52.4634 298.243 53.2476 297.314 53.9355 cv
296.715 54.3672 296.1 54.8633 295.395 55.1675 cv
294.65 55.6714 293.154 55.4873 293.49 54.2231 cv
296.115 49.0874 302.131 47.6714 307.955 46.7192 cv
305.195 48.2715 302.203 49.6714 299.932 51.7031 cv
cp
309.779 45.3438 mo
305.075 44.7031 298.947 46.3354 295.643 49.1836 cv
294.107 50.5034 290.482 53.3193 291.658 55.6313 cv
293.154 58.5674 296.827 56.5034 298.522 55.1836 cv
299.883 54.1274 301.067 52.8633 302.522 51.9033 cv
305.171 50.1675 308.051 48.7275 310.739 47.0474 cv
311.371 46.6636 311.715 45.6074 309.779 45.3438 cv
cp
0 0 0 rgb
f
307.955 46.7192 mo
305.195 48.2715 302.203 49.6714 299.932 51.7031 cv
299.083 52.4634 298.243 53.2476 297.314 53.9355 cv
296.715 54.3672 296.1 54.8633 295.395 55.1675 cv
294.65 55.6714 293.154 55.4873 293.49 54.2231 cv
296.115 49.0874 302.131 47.6714 307.955 46.7192 cv
cp
.517647 .317647 .137255 rgb
f
269.146 72.5674 mo
266.475 73.1274 263.915 70.7676 264.091 68.0957 cv
264.371 63.7031 268.219 63.3672 268.907 63.5757 cv
271.235 63.8711 272.027 65.1436 272.522 66.6553 cv
273.322 69.1035 271.707 72.0313 269.146 72.5674 cv
cp
0 0 0 rgb
f
303.643 72.5674 mo
300.971 73.1274 298.419 70.7676 298.587 68.0957 cv
298.867 63.7031 302.723 63.3672 303.403 63.5757 cv
305.731 63.8711 306.522 65.1436 307.019 66.6553 cv
307.818 69.1035 306.203 72.0313 303.643 72.5674 cv
cp
f
287.693 80.1934 mo
286.807 80.5239 284.053 81.6284 283.705 79.6855 cv
283.473 78.3799 283.646 76.9897 283.549 75.6689 cv
283.282 72.0527 283.752 68.4219 283.513 64.8032 cv
283.459 63.9937 282.147 63.9336 282.078 64.7568 cv
281.65 69.8262 281.052 75.5747 281.955 80.6143 cv
282.461 83.4292 286.824 83.1152 288.465 81.6035 cv
289.111 81.0088 288.603 79.8535 287.693 80.1934 cv
cp
f
308.731 88.8242 mo
307.749 88.0396 306.228 89.5547 305.594 90.1689 cv
305.462 90.2959 305.32 90.4385 305.178 90.5869 cv
304.887 90.4014 304.619 90.207 304.31 90.0264 cv
299.092 86.9653 292.418 86.0449 286.478 85.7891 cv
280.479 85.5298 274.521 86.6909 269.222 89.5425 cv
268.262 90.0586 267.291 90.6772 266.328 91.3374 cv
266.318 91.3286 266.308 91.3179 266.299 91.3091 cv
265.628 90.6714 264.525 89.9453 263.576 90.3848 cv
263.084 90.6128 262.978 91.3701 263.544 91.5991 cv
264.248 91.8833 264.787 92.2871 265.325 92.8242 cv
265.876 93.373 266.225 94.0815 266.751 94.6406 cv
267.393 95.3232 268.555 94.793 268.233 93.8291 cv
268.115 93.4746 267.904 93.1362 267.666 92.8086 cv
268.149 92.4619 268.654 92.1211 269.208 91.7891 cv
274.107 88.8477 279.667 87.8164 285.318 87.7622 cv
290.771 87.7095 296.641 88.7705 301.66 90.8926 cv
302.475 91.2373 303.247 91.6602 304.002 92.1108 cv
303.779 92.5146 303.623 92.9355 303.607 93.3535 cv
303.585 93.9604 304.271 94.355 304.714 93.8457 cv
305.51 92.9331 306.129 91.9092 307.04 91.0918 cv
307.452 90.7217 307.887 90.4268 308.408 90.2397 cv
309.01 90.0234 309.279 89.2632 308.731 88.8242 cv
cp
f
371.225 91.1543 mo
371.225 93.6948 368.404 95.7539 364.925 95.7539 cv
361.445 95.7539 358.625 93.6948 358.625 91.1543 cv
358.625 88.6133 361.445 86.5542 364.925 86.5542 cv
368.404 86.5542 371.225 88.6133 371.225 91.1543 cv
cp
1 .764706 .74902 rgb
f
419.725 90.1543 mo
419.725 92.6948 416.904 94.7539 413.425 94.7539 cv
409.945 94.7539 407.125 92.6948 407.125 90.1543 cv
407.125 87.6133 409.945 85.5542 413.425 85.5542 cv
416.904 85.5542 419.725 87.6133 419.725 90.1543 cv
cp
f
400.78 98.2178 mo
400.349 99.498 399.732 100.762 398.78 101.882 cv
397.468 99.8179 393.517 100.546 391.389 100.634 cv
388.076 100.786 382.14 100.105 379.956 103.218 cv
376.596 100.466 375.14 95.2339 379.956 94.5776 cv
380.932 101.146 396.292 100.73 397.228 93.9858 cv
397.228 93.9697 397.221 93.9614 397.221 93.9536 cv
399.764 93.73 401.652 95.6338 400.78 98.2178 cv
cp
394.484 104.738 mo
392.916 105.338 390.725 105.666 389.172 105.81 cv
386.492 106.058 383.796 105.402 381.428 104.193 cv
382.82 102.21 388.028 102.674 390.204 102.498 cv
391.868 102.37 396.26 101.474 397.804 102.866 cv
396.932 103.618 395.852 104.266 394.484 104.738 cv
cp
387.349 96.4819 mo
389.268 96.8979 391.164 96.2578 392.908 95.5137 cv
393.756 95.1538 394.596 94.7695 395.452 94.418 cv
393.46 98.9614 383.845 98.4497 381.309 94.5615 cv
383.34 94.8018 385.381 96.0659 387.349 96.4819 cv
cp
399.756 92.2256 mo
398.34 91.5459 396.549 92.0659 395.148 92.4897 cv
392.108 93.4097 390.156 95.1377 386.748 94.4097 cv
383.188 93.6577 380.053 91.2979 376.62 93.8735 cv
373.964 95.8735 374.62 99.498 376.045 101.961 cv
377.845 105.082 381.9 106.722 385.236 107.394 cv
390.972 108.562 400.564 107.082 402.652 98.3457 cv
403.172 95.8179 402.324 93.4497 399.756 92.2256 cv
cp
0 0 0 rgb
f
397.804 102.866 mo
396.932 103.618 395.852 104.266 394.484 104.738 cv
392.916 105.338 390.725 105.666 389.172 105.81 cv
386.492 106.058 383.796 105.402 381.428 104.193 cv
382.82 102.21 388.028 102.674 390.204 102.498 cv
391.868 102.37 396.26 101.474 397.804 102.866 cv
cp
1 1 1 rgb
f
395.452 94.418 mo
393.46 98.9614 383.845 98.4497 381.309 94.5615 cv
383.34 94.8018 385.381 96.0659 387.349 96.4819 cv
389.268 96.8979 391.164 96.2578 392.908 95.5137 cv
393.756 95.1538 394.596 94.7695 395.452 94.418 cv
cp
f
400.78 98.2178 mo
400.349 99.498 399.732 100.762 398.78 101.882 cv
397.468 99.8179 393.517 100.546 391.389 100.634 cv
388.076 100.786 382.14 100.105 379.956 103.218 cv
376.596 100.466 375.14 95.2339 379.956 94.5776 cv
380.932 101.146 396.292 100.73 397.228 93.9858 cv
397.228 93.9697 397.221 93.9614 397.221 93.9536 cv
399.764 93.73 401.652 95.6338 400.78 98.2178 cv
cp
.788235 .152941 .152941 rgb
f
373.668 81.3535 mo
370.252 83.7539 365.452 84.0415 362.156 81.3535 cv
359.524 79.2095 358.9 75.5059 360.02 72.4414 cv
361.428 68.5698 366.268 66.7217 370.06 66.8574 cv
370.172 66.8574 370.268 66.8257 370.356 66.7773 cv
372.74 66.8418 374.932 67.6577 376.717 70.25 cv
379.477 74.2656 377.213 78.8735 373.668 81.3535 cv
cp
379.58 71.8896 mo
377.148 64.0415 367.804 63.2979 361.5 67.7695 cv
358.564 70.2734 356.748 74.2578 357.836 77.834 cv
359.748 84.1216 365.813 86.498 371.82 84.5059 cv
376.845 82.8418 381.284 77.3774 379.58 71.8896 cv
cp
0 0 0 rgb
f
371.404 79.8657 mo
368.732 80.4258 366.181 78.0659 366.349 75.3936 cv
366.628 71.002 370.484 70.666 371.164 70.8735 cv
373.5 71.1699 374.284 72.4414 374.78 73.9536 cv
375.58 76.4019 373.964 79.3301 371.404 79.8657 cv
cp
376.717 70.25 mo
374.932 67.6577 372.74 66.8418 370.356 66.7773 cv
370.268 66.8257 370.172 66.8574 370.06 66.8574 cv
366.268 66.7217 361.428 68.5698 360.02 72.4414 cv
358.9 75.5059 359.524 79.2095 362.156 81.3535 cv
365.452 84.0415 370.252 83.7539 373.668 81.3535 cv
377.213 78.8735 379.477 74.2656 376.717 70.25 cv
cp
1 1 1 rgb
f
411.309 82.6499 mo
407.5 84.1855 402.78 83.6416 400.26 80.1777 cv
398.276 77.4414 398.42 73.4336 400.148 70.6577 cv
401.276 68.8418 403.004 67.8496 404.9 67.1855 cv
409.332 66.146 414.452 66.8896 416.908 72.498 cv
418.916 77.0898 415.332 81.0254 411.309 82.6499 cv
cp
419.14 73.0498 mo
416.877 64.9375 407.324 63.4658 401.045 67.2734 cv
397.908 69.7378 396.396 74.1299 397.428 78.4497 cv
398.885 84.5776 405.477 86.2256 410.868 84.8496 cv
415.948 83.5459 420.685 78.6016 419.14 73.0498 cv
cp
0 0 0 rgb
f
405.9 79.8657 mo
403.228 80.4258 400.677 78.0659 400.845 75.3936 cv
401.132 71.002 404.98 70.666 405.668 70.8735 cv
407.996 71.1699 408.78 72.4414 409.276 73.9536 cv
410.076 76.4019 408.46 79.3301 405.9 79.8657 cv
cp
416.908 72.498 mo
414.452 66.8896 409.332 66.146 404.9 67.1855 cv
403.004 67.8496 401.276 68.8418 400.148 70.6577 cv
398.42 73.4336 398.276 77.4414 400.26 80.1777 cv
402.78 83.6416 407.5 84.1855 411.309 82.6499 cv
415.332 81.0254 418.916 77.0898 416.908 72.498 cv
cp
1 1 1 rgb
f
378.771 47.9375 mo
378.084 48.3535 377.236 48.6016 376.477 48.8574 cv
375.276 49.2578 374.036 49.5215 372.804 49.8096 cv
369.524 50.5698 366.477 52.2979 363.404 53.7539 cv
367.572 49.3774 372.316 45.1055 378.893 45.7935 cv
380.332 46.2256 379.685 47.6016 378.771 47.9375 cv
cp
381.3 45.0498 mo
379.652 42.7461 374.836 44.2178 372.677 44.7617 cv
368.004 45.9375 362.988 50.1855 361.02 54.5137 cv
360.213 56.2979 361.452 56.6016 362.188 56.2896 cv
365.349 54.9697 368.381 53.3535 371.572 52.1055 cv
373.332 51.418 375.244 51.1377 377.053 50.5859 cv
379.309 49.8979 383.396 47.9697 381.3 45.0498 cv
cp
0 0 0 rgb
f
378.771 47.9375 mo
378.084 48.3535 377.236 48.6016 376.477 48.8574 cv
375.276 49.2578 374.036 49.5215 372.804 49.8096 cv
369.524 50.5698 366.477 52.2979 363.404 53.7539 cv
367.572 49.3774 372.316 45.1055 378.893 45.7935 cv
380.332 46.2256 379.685 47.6016 378.771 47.9375 cv
cp
.517647 .317647 .137255 rgb
f
406.132 54.6255 mo
404.996 54.5776 403.845 54.5537 402.7 54.3936 cv
401.972 54.2896 401.181 54.2095 400.46 53.9375 cv
399.58 53.7856 398.628 52.6016 399.756 51.9297 cv
405.221 50.0898 410.524 53.2656 415.356 56.6577 cv
412.292 55.834 409.181 54.7539 406.132 54.6255 cv
cp
417.62 56.9375 mo
414.7 53.2017 409.172 50.0898 404.813 49.8257 cv
402.796 49.7056 398.236 49.1855 397.468 51.666 cv
396.484 54.8096 400.557 55.8979 402.692 56.1299 cv
404.404 56.3218 406.132 56.2417 407.852 56.5776 cv
410.956 57.1777 414.02 58.1538 417.124 58.834 cv
417.845 58.9937 418.828 58.4819 417.62 56.9375 cv
cp
0 0 0 rgb
f
415.356 56.6577 mo
412.292 55.834 409.181 54.7539 406.132 54.6255 cv
404.996 54.5776 403.845 54.5537 402.7 54.3936 cv
401.972 54.2896 401.181 54.2095 400.46 53.9375 cv
399.58 53.7856 398.628 52.6016 399.756 51.9297 cv
405.221 50.0898 410.524 53.2656 415.356 56.6577 cv
cp
.517647 .317647 .137255 rgb
f
371.404 79.8657 mo
368.732 80.4258 366.181 78.0659 366.349 75.3936 cv
366.628 71.002 370.484 70.666 371.164 70.8735 cv
373.5 71.1699 374.284 72.4414 374.78 73.9536 cv
375.58 76.4019 373.964 79.3301 371.404 79.8657 cv
cp
0 0 0 rgb
f
405.9 79.8657 mo
403.228 80.4258 400.677 78.0659 400.845 75.3936 cv
401.132 71.002 404.98 70.666 405.668 70.8735 cv
407.996 71.1699 408.78 72.4414 409.276 73.9536 cv
410.076 76.4019 408.46 79.3301 405.9 79.8657 cv
cp
f
389.955 87.4917 mo
389.067 87.8223 386.313 88.9268 385.967 86.9839 cv
385.733 85.6782 385.908 84.2881 385.81 82.9673 cv
385.543 79.3516 386.014 75.7202 385.772 72.1016 cv
385.721 71.292 384.409 71.2319 384.339 72.0557 cv
383.911 77.1245 383.313 82.873 384.217 87.9126 cv
384.723 90.7275 389.086 90.4141 390.727 88.9023 cv
391.373 88.3071 390.865 87.1523 389.955 87.4917 cv
cp
f
43.9409 201.219 mo
43.9409 203.759 41.1206 205.819 37.6411 205.819 cv
34.1611 205.819 31.3408 203.759 31.3408 201.219 cv
31.3408 198.678 34.1611 196.619 37.6411 196.619 cv
41.1206 196.619 43.9409 198.678 43.9409 201.219 cv
cp
1 .764706 .74902 rgb
f
92.4409 200.219 mo
92.4409 202.759 89.6206 204.819 86.1411 204.819 cv
82.6611 204.819 79.8408 202.759 79.8408 200.219 cv
79.8408 197.678 82.6611 195.619 86.1411 195.619 cv
89.6206 195.619 92.4409 197.678 92.4409 200.219 cv
cp
f
47.0801 191.042 mo
43.6724 193.442 38.8643 193.73 35.5684 191.042 cv
33.5762 189.411 32.7363 186.874 32.9365 184.411 cv
34.9521 184.962 37.0884 185.17 39.2241 185.234 cv
41.2163 185.282 43.2241 185.21 45.1523 185.163 cv
45.3604 185.154 45.6479 185.163 45.9922 185.163 cv
47.3843 185.17 49.6724 185.186 51.2725 184.786 cv
50.896 187.251 49.2241 189.53 47.0801 191.042 cv
cp
33.4326 182.122 mo
34.8403 178.258 39.6802 176.411 43.4722 176.538 cv
43.5845 176.546 43.6802 176.515 43.7764 176.466 cv
46.1523 176.523 48.3525 177.347 50.1279 179.939 cv
50.6963 180.754 51.04 181.602 51.2163 182.45 cv
49.5439 182.482 47.6006 183.002 46.0562 183.114 cv
43.8799 183.282 41.6724 183.21 39.4961 183.202 cv
38.6641 183.202 34.5283 183.419 33.1924 182.946 cv
33.2642 182.674 33.3364 182.395 33.4326 182.122 cv
cp
53.0005 181.57 mo
50.5684 173.73 41.2163 172.979 34.9121 177.458 cv
31.9761 179.962 30.1602 183.939 31.248 187.515 cv
33.1685 193.802 39.2241 196.179 45.2324 194.194 cv
50.2642 192.523 54.6963 187.058 53.0005 181.57 cv
cp
0 0 0 rgb
f
51.2163 182.45 mo
49.5439 182.482 47.6006 183.002 46.0562 183.114 cv
43.8799 183.282 41.6724 183.21 39.4961 183.202 cv
38.6641 183.202 34.5283 183.419 33.1924 182.946 cv
33.2642 182.674 33.3364 182.395 33.4326 182.122 cv
34.8403 178.258 39.6802 176.411 43.4722 176.538 cv
43.5845 176.546 43.6802 176.515 43.7764 176.466 cv
46.1523 176.523 48.3525 177.347 50.1279 179.939 cv
50.6963 180.754 51.04 181.602 51.2163 182.45 cv
cp
1 .752941 .643137 rgb
f
51.2725 184.786 mo
50.896 187.251 49.2241 189.53 47.0801 191.042 cv
43.6724 193.442 38.8643 193.73 35.5684 191.042 cv
33.5762 189.411 32.7363 186.874 32.9365 184.411 cv
34.9521 184.962 37.0884 185.17 39.2241 185.234 cv
38.7041 185.906 38.3364 186.835 38.2563 188.09 cv
38.0884 190.763 40.6401 193.122 43.312 192.563 cv
45.8721 192.026 47.4883 189.099 46.6885 186.65 cv
46.5122 186.106 46.2959 185.602 45.9922 185.163 cv
47.3843 185.17 49.6724 185.186 51.2725 184.786 cv
cp
1 1 1 rgb
f
84.7202 192.331 mo
80.9121 193.866 76.1924 193.331 73.6802 189.858 cv
72.48 188.21 72.0723 186.106 72.3042 184.09 cv
74.0005 184.595 75.8481 184.811 77.6641 184.915 cv
78.7202 184.97 79.7764 185.002 80.7764 185.019 cv
81.7441 185.034 82.8643 185.034 84.0322 184.97 cv
86.376 184.858 88.9043 184.53 90.792 183.722 cv
91.4961 187.634 88.2881 190.89 84.7202 192.331 cv
cp
73.5601 180.338 mo
74.6885 178.523 76.4243 177.538 78.312 176.866 cv
82.6641 175.851 87.6641 176.563 90.1685 181.874 cv
87.7441 182.642 85.3442 182.89 83.2241 182.915 cv
79.376 182.962 76.4561 182.826 72.6401 182.419 cv
72.8643 181.683 73.1685 180.979 73.5601 180.338 cv
cp
92.5522 182.738 mo
90.2959 174.626 80.7441 173.146 74.4639 176.954 cv
72.6885 178.347 71.4639 180.362 70.896 182.626 cv
70.7764 182.786 70.728 182.986 70.7524 183.179 cv
70.4404 184.763 70.4404 186.45 70.8403 188.13 cv
72.2959 194.258 78.8882 195.915 84.2803 194.53 cv
89.3604 193.234 94.0962 188.282 92.5522 182.738 cv
cp
0 0 0 rgb
f
90.1685 181.874 mo
87.7441 182.642 85.3442 182.89 83.2241 182.915 cv
79.376 182.962 76.4561 182.826 72.6401 182.419 cv
72.8643 181.683 73.1685 180.979 73.5601 180.338 cv
74.6885 178.523 76.4243 177.538 78.312 176.866 cv
82.6641 175.851 87.6641 176.563 90.1685 181.874 cv
cp
1 .752941 .643137 rgb
f
84.7202 192.331 mo
80.9121 193.866 76.1924 193.331 73.6802 189.858 cv
72.48 188.21 72.0723 186.106 72.3042 184.09 cv
74.0005 184.595 75.8481 184.811 77.6641 184.915 cv
77.0244 185.61 76.5361 186.626 76.4404 188.09 cv
76.2725 190.763 78.8242 193.122 81.4961 192.563 cv
84.0562 192.026 85.6724 189.099 84.8721 186.65 cv
84.6724 186.026 84.4165 185.458 84.0322 184.97 cv
86.376 184.858 88.9043 184.53 90.792 183.722 cv
91.4961 187.634 88.2881 190.89 84.7202 192.331 cv
cp
1 1 1 rgb
f
48.5044 165.154 mo
47.8081 165.579 46.9683 165.818 46.208 166.074 cv
45.0083 166.474 43.7686 166.738 42.5361 167.026 cv
39.2563 167.794 36.2002 169.523 33.1279 170.979 cv
37.3042 166.595 42.0479 162.331 48.6162 163.019 cv
50.064 163.442 49.4165 164.818 48.5044 165.154 cv
cp
51.0322 162.267 mo
49.3843 159.97 44.5684 161.442 42.4082 161.986 cv
37.7363 163.154 32.7202 167.411 30.7524 171.738 cv
29.9443 173.515 31.1763 173.818 31.9204 173.515 cv
35.0801 172.186 38.1045 170.57 41.3042 169.322 cv
43.064 168.634 44.9761 168.355 46.7842 167.802 cv
49.04 167.114 53.1279 165.194 51.0322 162.267 cv
cp
0 0 0 rgb
f
48.5044 165.154 mo
47.8081 165.579 46.9683 165.818 46.208 166.074 cv
45.0083 166.474 43.7686 166.738 42.5361 167.026 cv
39.2563 167.794 36.2002 169.523 33.1279 170.979 cv
37.3042 166.595 42.0479 162.331 48.6162 163.019 cv
50.064 163.442 49.4165 164.818 48.5044 165.154 cv
cp
.517647 .317647 .137255 rgb
f
82.6563 166.763 mo
81.5439 166.515 80.4165 166.29 79.3203 165.931 cv
78.6162 165.698 77.8481 165.49 77.1924 165.09 cv
76.3525 164.786 75.624 163.458 76.8481 162.995 cv
82.5522 162.138 87.2163 166.202 91.376 170.386 cv
88.5122 169.042 85.6323 167.426 82.6563 166.763 cv
cp
93.5601 171.066 mo
91.3442 166.874 86.4482 162.835 82.2002 161.811 cv
80.2402 161.331 75.8325 160.019 74.6401 162.322 cv
73.1279 165.251 76.9443 167.034 79.0005 167.642 cv
80.6563 168.138 82.3682 168.362 84.0005 168.986 cv
86.9521 170.122 89.8003 171.626 92.7363 172.842 cv
93.4165 173.122 94.4722 172.794 93.5601 171.066 cv
cp
0 0 0 rgb
f
91.376 170.386 mo
88.5122 169.042 85.6323 167.426 82.6563 166.763 cv
81.5439 166.515 80.4165 166.29 79.3203 165.931 cv
78.6162 165.698 77.8481 165.49 77.1924 165.09 cv
76.3525 164.786 75.624 163.458 76.8481 162.995 cv
82.5522 162.138 87.2163 166.202 91.376 170.386 cv
cp
.517647 .317647 .137255 rgb
f
43.312 192.563 mo
40.6401 193.122 38.0884 190.763 38.2563 188.09 cv
38.3364 186.835 38.7041 185.906 39.2241 185.234 cv
40.48 183.554 42.5845 183.419 43.0723 183.57 cv
44.5762 183.763 45.4404 184.355 45.9922 185.163 cv
46.2959 185.602 46.5122 186.106 46.6885 186.65 cv
47.4883 189.099 45.8721 192.026 43.312 192.563 cv
cp
0 0 0 rgb
f
81.4961 192.563 mo
78.8242 193.122 76.2725 190.763 76.4404 188.09 cv
76.5361 186.626 77.0244 185.61 77.6641 184.915 cv
78.9443 183.538 80.8003 183.435 81.2563 183.57 cv
82.6323 183.747 83.4722 184.258 84.0322 184.97 cv
84.4165 185.458 84.6724 186.026 84.8721 186.65 cv
85.6724 189.099 84.0562 192.026 81.4961 192.563 cv
cp
f
63.3691 197.176 mo
62.4819 197.507 59.728 198.611 59.3813 196.669 cv
59.1484 195.362 59.3223 193.972 59.2241 192.651 cv
58.9575 189.036 59.4287 185.404 59.1875 181.786 cv
59.1357 180.976 57.8247 180.916 57.7539 181.74 cv
57.3257 186.809 56.728 192.558 57.6309 197.597 cv
58.1372 200.412 62.5005 200.098 64.1411 198.586 cv
64.7871 197.992 64.2798 196.836 63.3691 197.176 cv
cp
f
73.7607 206.269 mo
73.6855 206.132 73.4902 206.106 73.3584 206.151 cv
72.9287 206.297 72.6646 206.733 72.4575 207.199 cv
68.7256 206.015 66.6245 204.126 62.6069 206.128 cv
59.8486 207.503 58.3052 206.442 55.5527 205.993 cv
53.751 205.698 51.9053 206.471 50.3271 207.26 cv
50.1074 206.873 49.8623 206.501 49.5977 206.181 cv
49.3057 205.827 48.6289 206.01 48.708 206.523 cv
48.8159 207.217 49.1836 207.827 49.4814 208.455 cv
49.7979 209.123 49.8887 210.023 50.3394 210.597 cv
50.5078 210.81 50.896 210.867 51.0635 210.611 cv
51.5 209.942 51.2275 209.209 50.9404 208.523 cv
53.5146 207.862 55.3125 207.523 57.9829 208.44 cv
59.1021 208.825 60.5469 209.099 61.6919 208.62 cv
64.1548 207.591 65.8823 206.263 68.6372 207.453 cv
69.8579 207.98 70.626 208.679 71.7686 208.747 cv
71.4492 209.374 71.1299 210.015 71.1167 210.712 cv
71.1099 211.118 71.6616 211.311 71.9521 211.084 cv
72.6719 210.518 72.9639 209.521 73.3081 208.702 cv
73.6079 207.988 74.1699 207.005 73.7607 206.269 cv
cp
f
157.473 197.53 mo
157.473 200.071 154.652 202.13 151.172 202.13 cv
147.693 202.13 144.873 200.071 144.873 197.53 cv
144.873 194.99 147.693 192.93 151.172 192.93 cv
154.652 192.93 157.473 194.99 157.473 197.53 cv
cp
1 .6 .592157 rgb
f
205.973 196.53 mo
205.973 199.071 203.152 201.13 199.672 201.13 cv
196.193 201.13 193.373 199.071 193.373 196.53 cv
193.373 193.99 196.193 191.93 199.672 191.93 cv
203.152 191.93 205.973 193.99 205.973 196.53 cv
cp
f
161.084 186.93 mo
157.668 189.33 152.86 189.626 149.572 186.93 cv
146.94 184.786 146.308 181.082 147.428 178.018 cv
148.836 174.154 153.676 172.298 157.476 172.434 cv
157.58 172.442 157.684 172.402 157.772 172.354 cv
160.156 172.418 162.348 173.234 164.132 175.826 cv
166.884 179.842 164.62 184.45 161.084 186.93 cv
cp
166.996 177.466 mo
164.564 169.618 155.22 168.874 148.916 173.346 cv
145.979 175.85 144.164 179.834 145.252 183.41 cv
147.164 189.698 153.227 192.074 159.227 190.082 cv
164.26 188.418 168.7 182.954 166.996 177.466 cv
cp
0 0 0 rgb
f
158.82 185.442 mo
156.148 186.002 153.588 183.642 153.764 180.97 cv
154.044 176.578 157.9 176.242 158.58 176.45 cv
160.908 176.746 161.7 178.018 162.196 179.53 cv
162.996 181.978 161.379 184.906 158.82 185.442 cv
cp
164.132 175.826 mo
162.348 173.234 160.156 172.418 157.772 172.354 cv
157.684 172.402 157.58 172.442 157.476 172.434 cv
153.676 172.298 148.836 174.154 147.428 178.018 cv
146.308 181.082 146.94 184.786 149.572 186.93 cv
152.86 189.626 157.668 189.33 161.084 186.93 cv
164.62 184.45 166.884 179.842 164.132 175.826 cv
cp
1 1 1 rgb
f
198.724 188.226 mo
194.916 189.762 190.188 189.218 187.676 185.754 cv
185.692 183.018 185.836 179.01 187.556 176.234 cv
188.684 174.418 190.42 173.426 192.308 172.762 cv
196.748 171.722 201.868 172.466 204.324 178.074 cv
206.332 182.666 202.748 186.602 198.724 188.226 cv
cp
206.548 178.626 mo
204.291 170.522 194.74 169.042 188.459 172.85 cv
185.324 175.314 183.811 179.706 184.836 184.026 cv
186.291 190.154 192.884 191.802 198.276 190.426 cv
203.364 189.122 208.092 184.178 206.548 178.626 cv
cp
0 0 0 rgb
f
193.316 185.442 mo
190.644 186.002 188.092 183.642 188.26 180.97 cv
188.54 176.578 192.395 176.242 193.076 176.45 cv
195.412 176.746 196.196 178.018 196.692 179.53 cv
197.492 181.978 195.875 184.906 193.316 185.442 cv
cp
204.324 178.074 mo
201.868 172.466 196.748 171.722 192.308 172.762 cv
190.42 173.426 188.684 174.418 187.556 176.234 cv
185.836 179.01 185.692 183.018 187.676 185.754 cv
190.188 189.218 194.916 189.762 198.724 188.226 cv
202.748 186.602 206.332 182.666 204.324 178.074 cv
cp
1 1 1 rgb
f
163.748 167.426 mo
162.979 167.178 162.244 166.706 161.548 166.298 cv
160.46 165.658 159.444 164.89 158.42 164.154 cv
155.692 162.178 152.388 161.01 149.268 159.65 cv
155.308 159.922 161.652 160.698 165.444 166.106 cv
166.068 167.482 164.604 167.89 163.748 167.426 cv
cp
162.14 160.746 mo
158.188 157.986 151.692 156.994 147.132 158.354 cv
145.26 158.914 145.844 160.042 146.556 160.402 cv
149.636 161.914 152.844 163.138 155.876 164.73 cv
157.556 165.61 159.028 166.866 160.627 167.866 cv
162.62 169.122 166.764 170.938 167.588 167.434 cv
168.244 164.682 163.972 162.018 162.14 160.746 cv
cp
0 0 0 rgb
f
163.748 167.426 mo
162.979 167.178 162.244 166.706 161.548 166.298 cv
160.46 165.658 159.444 164.89 158.42 164.154 cv
155.692 162.178 152.388 161.01 149.268 159.65 cv
155.308 159.922 161.652 160.698 165.444 166.106 cv
166.068 167.482 164.604 167.89 163.748 167.426 cv
cp
.517647 .317647 .137255 rgb
f
189.641 167.615 mo
188.665 168.207 187.698 168.823 186.657 169.327 cv
185.993 169.647 185.29 170.023 184.545 170.191 cv
183.721 170.551 182.282 170.095 182.841 168.919 cv
186.361 164.343 192.538 164.047 198.441 164.183 cv
195.441 165.199 192.241 166.031 189.641 167.615 cv
cp
200.481 163.159 mo
195.977 161.671 189.649 162.151 185.881 164.351 cv
184.129 165.375 180.049 167.479 180.786 169.967 cv
181.721 173.127 185.706 171.767 187.618 170.775 cv
189.145 169.983 190.538 168.959 192.145 168.287 cv
195.065 167.063 198.161 166.167 201.113 165.015 cv
201.801 164.743 202.337 163.767 200.481 163.159 cv
cp
0 0 0 rgb
f
198.441 164.183 mo
195.441 165.199 192.241 166.031 189.641 167.615 cv
188.665 168.207 187.698 168.823 186.657 169.327 cv
185.993 169.647 185.29 170.023 184.545 170.191 cv
183.721 170.551 182.282 170.095 182.841 168.919 cv
186.361 164.343 192.538 164.047 198.441 164.183 cv
cp
.517647 .317647 .137255 rgb
f
158.82 185.442 mo
156.148 186.002 153.588 183.642 153.764 180.97 cv
154.044 176.578 157.9 176.242 158.58 176.45 cv
160.908 176.746 161.7 178.018 162.196 179.53 cv
162.996 181.978 161.379 184.906 158.82 185.442 cv
cp
0 0 0 rgb
f
193.316 185.442 mo
190.644 186.002 188.092 183.642 188.26 180.97 cv
188.54 176.578 192.395 176.242 193.076 176.45 cv
195.412 176.746 196.196 178.018 196.692 179.53 cv
197.492 181.978 195.875 184.906 193.316 185.442 cv
cp
f
177.366 193.068 mo
176.48 193.399 173.725 194.503 173.379 192.561 cv
173.146 191.255 173.32 189.865 173.223 188.544 cv
172.956 184.928 173.425 181.297 173.186 177.679 cv
173.132 176.869 171.821 176.809 171.752 177.632 cv
171.323 182.701 170.725 188.45 171.629 193.49 cv
172.135 196.305 176.498 195.99 178.138 194.479 cv
178.784 193.884 178.276 192.729 177.366 193.068 cv
cp
f
190.572 212.41 mo
186.924 214.218 182.66 213.466 178.788 212.914 cv
175.364 212.418 172.22 212.402 168.78 212.722 cv
166.412 212.946 163.844 213.162 161.524 212.45 cv
157.972 211.354 155.844 208.682 156.94 204.922 cv
158.076 201.026 162.188 198.698 166.844 197.514 cv
174.492 195.418 187.508 195.882 192.652 203.946 cv
194.492 206.834 193.772 210.826 190.572 212.41 cv
cp
f
189.16 210.917 mo
188.119 211.434 186.919 211.633 185.67 211.667 cv
185.78 209.577 186.064 207.322 186.174 205.09 cv
187.79 205.184 189.404 205.246 191.02 205.193 cv
192.141 207.262 192.083 209.467 189.16 210.917 cv
cp
178.301 210.861 mo
178.381 208.749 178.374 206.627 178.313 204.51 cv
180.35 204.643 182.385 204.836 184.42 204.987 cv
184.412 205.252 184.41 205.518 184.395 205.781 cv
184.289 207.734 184.17 209.685 184.145 211.64 cv
182.384 211.524 180.61 211.181 179.106 210.964 cv
178.834 210.925 178.569 210.896 178.301 210.861 cv
cp
178.268 202.615 mo
178.224 201.627 178.354 199.813 178.059 198.451 cv
180.268 198.59 182.46 198.968 184.648 199.834 cv
184.51 200.96 184.472 202.102 184.458 203.246 cv
182.393 203.12 180.332 203.013 178.275 202.941 cv
178.27 202.832 178.272 202.723 178.268 202.615 cv
cp
171.553 210.509 mo
171.713 208.51 171.632 206.471 171.414 204.436 cv
172.363 204.39 173.311 204.356 174.256 204.358 cv
175.128 204.359 176.001 204.39 176.873 204.432 cv
176.907 206.52 176.864 208.609 176.923 210.696 cv
175.125 210.509 173.36 210.424 171.553 210.509 cv
cp
170.527 198.732 mo
171.743 198.564 172.974 198.446 174.183 198.356 cv
174.976 198.355 175.767 198.363 176.554 198.383 cv
176.581 199.839 176.764 201.314 176.831 202.755 cv
176.833 202.801 176.832 202.846 176.834 202.892 cv
174.961 202.844 173.089 202.818 171.217 202.85 cv
171.024 201.463 170.785 200.086 170.527 198.732 cv
cp
169.713 210.639 mo
168.638 210.761 167.022 210.838 165.345 210.744 cv
165.342 210.734 165.344 210.727 165.341 210.717 cv
164.779 209.069 164.807 207.326 164.753 205.607 cv
164.746 205.367 164.726 205.126 164.713 204.886 cv
166.461 204.775 168.213 204.63 169.96 204.518 cv
170.079 206.545 170.087 208.583 170.286 210.598 cv
170.094 210.615 169.907 210.616 169.713 210.639 cv
cp
164.273 200.357 mo
165.85 199.664 167.601 199.217 169.405 198.909 cv
169.394 200.233 169.667 201.564 169.83 202.889 cv
168.082 202.941 166.334 203.026 164.581 203.174 cv
164.491 202.233 164.383 201.294 164.273 200.357 cv
cp
158.976 205.005 mo
160.466 205.064 161.966 205.026 163.47 204.951 cv
163.489 205.21 163.516 205.467 163.528 205.727 cv
163.606 207.393 163.606 209.041 164.079 210.639 cv
160.372 210.221 156.951 208.807 158.976 205.005 cv
cp
163.146 200.943 mo
163.174 201.724 163.246 202.502 163.323 203.281 cv
162.161 203.397 160.997 203.532 159.83 203.701 cv
160.729 202.532 161.871 201.65 163.146 200.943 cv
cp
189.935 203.621 mo
188.688 203.527 187.45 203.449 186.208 203.366 cv
186.2 202.354 186.128 201.361 185.958 200.406 cv
187.264 201.085 188.782 202.248 189.935 203.621 cv
cp
1 1 1 rgb
f
271.855 196.495 mo
271.855 199.036 269.035 201.095 265.555 201.095 cv
262.075 201.095 259.255 199.036 259.255 196.495 cv
259.255 193.955 262.075 191.895 265.555 191.895 cv
269.035 191.895 271.855 193.955 271.855 196.495 cv
cp
1 .764706 .74902 rgb
f
320.355 195.495 mo
320.355 198.036 317.535 200.095 314.055 200.095 cv
310.575 200.095 307.755 198.036 307.755 195.495 cv
307.755 192.955 310.575 190.895 314.055 190.895 cv
317.535 190.895 320.355 192.955 320.355 195.495 cv
cp
f
274.962 185.895 mo
271.547 188.295 266.746 188.591 263.45 185.895 cv
260.826 183.751 260.194 180.047 261.314 176.983 cv
262.723 173.119 267.563 171.263 271.354 171.399 cv
271.466 171.407 271.563 171.367 271.65 171.319 cv
274.034 171.383 276.227 172.199 278.011 174.791 cv
280.77 178.807 278.507 183.415 274.962 185.895 cv
cp
280.883 176.431 mo
278.45 168.583 269.098 167.839 262.794 172.311 cv
259.858 174.815 258.043 178.799 259.13 182.375 cv
261.051 188.663 267.106 191.039 273.114 189.047 cv
278.146 187.383 282.578 181.919 280.883 176.431 cv
cp
0 0 0 rgb
f
272.698 184.407 mo
270.026 184.967 267.475 182.607 267.643 179.935 cv
267.93 175.543 271.778 175.207 272.458 175.415 cv
274.794 175.711 275.578 176.983 276.074 178.495 cv
276.875 180.943 275.258 183.871 272.698 184.407 cv
cp
278.011 174.791 mo
276.227 172.199 274.034 171.383 271.65 171.319 cv
271.563 171.367 271.466 171.407 271.354 171.399 cv
267.563 171.263 262.723 173.119 261.314 176.983 cv
260.194 180.047 260.826 183.751 263.45 185.895 cv
266.746 188.591 271.547 188.295 274.962 185.895 cv
278.507 183.415 280.77 178.807 278.011 174.791 cv
cp
1 1 1 rgb
f
312.602 187.191 mo
308.794 188.727 304.074 188.183 301.555 184.719 cv
299.57 181.983 299.715 177.975 301.442 175.199 cv
302.57 173.383 304.298 172.391 306.194 171.727 cv
310.634 170.687 315.754 171.431 318.202 177.039 cv
320.211 181.631 316.634 185.567 312.602 187.191 cv
cp
320.434 177.591 mo
318.179 169.487 308.618 168.007 302.339 171.815 cv
299.211 174.279 297.698 178.671 298.723 182.991 cv
300.179 189.119 306.77 190.767 312.162 189.391 cv
317.242 188.087 321.978 183.143 320.434 177.591 cv
cp
0 0 0 rgb
f
312.602 187.191 mo
308.794 188.727 304.074 188.183 301.555 184.719 cv
299.57 181.983 299.715 177.975 301.442 175.199 cv
302.57 173.383 304.298 172.391 306.194 171.727 cv
310.634 170.687 315.754 171.431 318.202 177.039 cv
320.211 181.631 316.634 185.567 312.602 187.191 cv
cp
f
307.194 184.407 mo
304.522 184.967 301.97 182.607 302.146 179.935 cv
302.426 175.543 306.274 175.207 306.962 175.415 cv
309.29 175.711 310.074 176.983 310.57 178.495 cv
311.379 180.943 309.762 183.871 307.194 184.407 cv
cp
318.202 177.039 mo
315.754 171.431 310.634 170.687 306.194 171.727 cv
304.298 172.391 302.57 173.383 301.442 175.199 cv
299.715 177.975 299.57 181.983 301.555 184.719 cv
304.074 188.183 308.794 188.727 312.602 187.191 cv
316.634 185.567 320.211 181.631 318.202 177.039 cv
cp
1 1 1 rgb
f
279.179 152.127 mo
278.466 152.503 277.61 152.695 276.834 152.895 cv
275.61 153.223 274.354 153.407 273.114 153.623 cv
269.786 154.175 266.634 155.711 263.475 156.975 cv
267.914 152.863 272.914 148.895 279.434 149.999 cv
280.843 150.519 280.114 151.847 279.179 152.127 cv
cp
281.883 149.399 mo
280.379 146.999 275.49 148.167 273.29 148.575 cv
268.555 149.455 263.282 153.391 261.051 157.583 cv
260.139 159.311 261.354 159.687 262.106 159.431 cv
265.347 158.303 268.466 156.879 271.738 155.839 cv
273.539 155.255 275.466 155.095 277.307 154.655 cv
279.594 154.119 283.794 152.447 281.883 149.399 cv
cp
0 0 0 rgb
f
279.179 152.127 mo
278.466 152.503 277.61 152.695 276.834 152.895 cv
275.61 153.223 274.354 153.407 273.114 153.623 cv
269.786 154.175 266.634 155.711 263.475 156.975 cv
267.914 152.863 272.914 148.895 279.434 149.999 cv
280.843 150.519 280.114 151.847 279.179 152.127 cv
cp
.517647 .317647 .137255 rgb
f
307.698 153.967 mo
306.586 153.751 305.45 153.551 304.347 153.223 cv
303.643 153.007 302.866 152.815 302.202 152.431 cv
301.354 152.143 300.594 150.839 301.802 150.343 cv
307.49 149.343 312.25 153.287 316.515 157.367 cv
313.61 156.095 310.69 154.551 307.698 153.967 cv
cp
318.715 157.999 mo
316.387 153.855 311.395 149.943 307.122 149.023 cv
305.146 148.599 300.715 147.399 299.578 149.727 cv
298.139 152.695 301.994 154.383 304.074 154.935 cv
305.738 155.391 307.458 155.567 309.106 156.159 cv
312.082 157.223 314.97 158.655 317.93 159.791 cv
318.618 160.055 319.666 159.695 318.715 157.999 cv
cp
0 0 0 rgb
f
316.515 157.367 mo
313.61 156.095 310.69 154.551 307.698 153.967 cv
306.586 153.751 305.45 153.551 304.347 153.223 cv
303.643 153.007 302.866 152.815 302.202 152.431 cv
301.354 152.143 300.594 150.839 301.802 150.343 cv
307.49 149.343 312.25 153.287 316.515 157.367 cv
cp
.517647 .317647 .137255 rgb
f
272.698 184.407 mo
270.026 184.967 267.475 182.607 267.643 179.935 cv
267.93 175.543 271.778 175.207 272.458 175.415 cv
274.794 175.711 275.578 176.983 276.074 178.495 cv
276.875 180.943 275.258 183.871 272.698 184.407 cv
cp
0 0 0 rgb
f
307.194 184.407 mo
304.522 184.967 301.97 182.607 302.146 179.935 cv
302.426 175.543 306.274 175.207 306.962 175.415 cv
309.29 175.711 310.074 176.983 310.57 178.495 cv
311.379 180.943 309.762 183.871 307.194 184.407 cv
cp
f
291.25 192.033 mo
290.363 192.364 287.608 193.468 287.262 191.526 cv
287.028 190.22 287.203 188.83 287.105 187.509 cv
286.839 183.893 287.309 180.262 287.068 176.644 cv
287.016 175.833 285.704 175.773 285.635 176.597 cv
285.207 181.667 284.607 187.415 285.512 192.455 cv
286.018 195.27 290.381 194.956 292.021 193.444 cv
292.667 192.849 292.159 191.694 291.25 192.033 cv
cp
f
275.509 197.061 mo
279.156 195.254 283.42 196.006 287.292 196.558 cv
290.716 197.054 293.861 197.07 297.301 196.749 cv
299.668 196.526 302.237 196.31 304.557 197.022 cv
308.109 198.118 310.237 200.79 309.141 204.55 cv
308.005 208.446 303.893 210.774 299.237 211.958 cv
291.59 214.054 278.572 213.59 273.429 205.526 cv
271.59 202.638 272.309 198.645 275.509 197.061 cv
cp
f
276.921 198.555 mo
277.961 198.039 279.161 197.838 280.411 197.804 cv
280.301 199.895 280.016 202.149 279.906 204.381 cv
278.291 204.288 276.676 204.226 275.061 204.278 cv
273.939 202.21 273.996 200.004 276.921 198.555 cv
cp
287.78 198.61 mo
287.7 200.724 287.707 202.845 287.768 204.961 cv
285.731 204.828 283.695 204.636 281.661 204.484 cv
281.669 204.22 281.671 203.954 281.685 203.69 cv
281.792 201.737 281.911 199.787 281.935 197.831 cv
283.697 197.948 285.47 198.292 286.975 198.507 cv
287.245 198.547 287.511 198.575 287.78 198.61 cv
cp
287.813 206.857 mo
287.855 207.845 287.727 209.659 288.022 211.02 cv
285.813 210.882 283.621 210.503 281.434 209.638 cv
281.57 208.512 281.608 207.37 281.622 206.226 cv
283.688 206.352 285.749 206.458 287.805 206.531 cv
287.809 206.64 287.809 206.749 287.813 206.857 cv
cp
294.528 198.963 mo
294.367 200.961 294.449 203.001 294.667 205.036 cv
293.717 205.082 292.77 205.115 291.825 205.114 cv
290.951 205.112 290.079 205.081 289.207 205.04 cv
289.174 202.952 289.217 200.862 289.158 198.776 cv
290.955 198.963 292.721 199.048 294.528 198.963 cv
cp
295.554 210.739 mo
294.338 210.909 293.106 211.025 291.897 211.115 cv
291.105 211.116 290.314 211.109 289.527 211.088 cv
289.499 209.633 289.317 208.158 289.25 206.716 cv
289.247 206.671 289.249 206.626 289.247 206.579 cv
291.119 206.628 292.991 206.653 294.864 206.622 cv
295.057 208.009 295.296 209.386 295.554 210.739 cv
cp
296.367 198.833 mo
297.442 198.711 299.058 198.634 300.736 198.727 cv
300.738 198.737 300.735 198.745 300.738 198.755 cv
301.302 200.403 301.273 202.145 301.327 203.865 cv
301.335 204.105 301.355 204.346 301.367 204.586 cv
299.619 204.696 297.867 204.842 296.121 204.953 cv
296.002 202.927 295.994 200.889 295.794 198.874 cv
295.986 198.856 296.174 198.855 296.367 198.833 cv
cp
301.809 209.114 mo
300.23 209.808 298.48 210.255 296.676 210.563 cv
296.685 209.239 296.413 207.907 296.25 206.582 cv
297.999 206.53 299.747 206.446 301.499 206.297 cv
301.59 207.239 301.697 208.178 301.809 209.114 cv
cp
307.105 204.467 mo
305.614 204.407 304.114 204.445 302.611 204.52 cv
302.591 204.262 302.564 204.004 302.552 203.745 cv
302.476 202.079 302.473 200.431 302.002 198.833 cv
305.71 199.251 309.13 200.665 307.105 204.467 cv
cp
302.935 208.528 mo
302.906 207.748 302.835 206.97 302.758 206.191 cv
303.921 206.075 305.084 205.94 306.25 205.77 cv
305.352 206.939 304.21 207.821 302.935 208.528 cv
cp
276.146 205.851 mo
277.393 205.944 278.631 206.023 279.871 206.106 cv
279.882 207.118 279.952 208.11 280.122 209.066 cv
278.816 208.388 277.299 207.224 276.146 205.851 cv
cp
1 1 1 rgb
f
367.262 403.19 mo
367.262 405.73 364.441 407.789 360.962 407.789 cv
357.482 407.789 354.662 405.73 354.662 403.19 cv
354.662 400.648 357.482 398.59 360.962 398.59 cv
364.441 398.59 367.262 400.648 367.262 403.19 cv
cp
1 .764706 .74902 rgb
f
415.762 402.19 mo
415.762 404.73 412.941 406.789 409.462 406.789 cv
405.982 406.789 403.162 404.73 403.162 402.19 cv
403.162 399.648 405.982 397.59 409.462 397.59 cv
412.941 397.59 415.762 399.648 415.762 402.19 cv
cp
f
397.498 406.567 mo
397.423 406.432 397.227 406.404 397.095 406.449 cv
396.666 406.595 396.401 407.031 396.193 407.498 cv
392.462 406.314 390.361 404.425 386.345 406.428 cv
383.586 407.803 382.043 406.742 379.29 406.291 cv
377.487 405.996 375.643 406.77 374.064 407.559 cv
373.845 407.172 373.599 406.801 373.335 406.48 cv
373.043 406.126 372.367 406.309 372.445 406.821 cv
372.553 407.516 372.922 408.125 373.219 408.754 cv
373.535 409.421 373.625 410.322 374.076 410.896 cv
374.245 411.109 374.633 411.166 374.801 410.91 cv
375.237 410.24 374.965 409.508 374.677 408.821 cv
377.252 408.161 379.05 407.822 381.72 408.738 cv
382.839 409.122 384.284 409.397 385.429 408.918 cv
387.891 407.891 389.619 406.56 392.373 407.751 cv
393.595 408.278 394.362 408.978 395.505 409.046 cv
395.186 409.672 394.867 410.313 394.853 411.011 cv
394.846 411.418 395.398 411.611 395.688 411.383 cv
396.408 410.816 396.701 409.82 397.045 409 cv
397.345 408.286 397.907 407.305 397.498 406.567 cv
cp
0 0 0 rgb
f
371.033 391.422 mo
370.705 391.718 370.361 391.989 370.001 392.246 cv
368.554 393.262 366.865 393.894 365.137 394.078 cv
362.793 394.35 360.394 393.797 358.489 392.246 cv
355.857 390.094 355.226 386.39 356.346 383.325 cv
357.762 379.461 362.594 377.605 366.394 377.742 cv
366.497 377.75 366.602 377.718 366.689 377.669 cv
369.073 377.726 371.266 378.55 373.05 381.142 cv
375.521 384.742 373.945 388.829 371.033 391.422 cv
cp
375.914 382.773 mo
373.481 374.926 364.137 374.182 357.833 378.661 cv
354.897 381.157 353.082 385.142 354.169 388.718 cv
356.082 395.005 362.145 397.382 368.153 395.39 cv
373.177 393.726 377.617 388.262 375.914 382.773 cv
cp
f
371.033 391.422 mo
371.369 390.493 371.426 389.469 371.113 388.525 cv
370.617 387.014 369.825 385.742 367.497 385.445 cv
366.817 385.237 362.961 385.574 362.682 389.957 cv
362.569 391.718 363.633 393.342 365.137 394.078 cv
362.793 394.35 360.394 393.797 358.489 392.246 cv
355.857 390.094 355.226 386.39 356.346 383.325 cv
357.762 379.461 362.594 377.605 366.394 377.742 cv
366.497 377.75 366.602 377.718 366.689 377.669 cv
369.073 377.726 371.266 378.55 373.05 381.142 cv
375.521 384.742 373.945 388.829 371.033 391.422 cv
cp
1 1 1 rgb
f
407.641 393.533 mo
405.561 394.374 403.201 394.59 401.082 394.054 cv
399.321 393.605 397.729 392.629 396.594 391.061 cv
396.289 390.646 396.041 390.197 395.841 389.726 cv
394.689 387.133 395.018 383.901 396.481 381.542 cv
397.602 379.726 399.337 378.733 401.226 378.069 cv
405.665 377.029 410.785 377.781 413.241 383.382 cv
415.25 387.974 411.665 391.91 407.641 393.533 cv
cp
415.465 383.934 mo
413.209 375.829 403.657 374.35 397.377 378.157 cv
394.241 380.621 392.729 385.014 393.762 389.333 cv
395.218 395.461 401.801 397.117 407.193 395.733 cv
412.281 394.438 417.009 389.485 415.465 383.934 cv
cp
0 0 0 rgb
f
407.641 393.533 mo
405.561 394.374 403.201 394.59 401.082 394.054 cv
403.537 393.422 405.058 390.574 404.266 388.19 cv
403.777 386.678 402.985 385.405 400.657 385.109 cv
399.969 384.901 396.121 385.237 395.841 389.629 cv
395.841 389.661 395.833 389.693 395.841 389.726 cv
394.689 387.133 395.018 383.901 396.481 381.542 cv
397.602 379.726 399.337 378.733 401.226 378.069 cv
405.665 377.029 410.785 377.781 413.241 383.382 cv
415.25 387.974 411.665 391.91 407.641 393.533 cv
cp
1 1 1 rgb
f
401.602 373.149 mo
400.546 373.582 399.497 374.037 398.386 374.374 cv
397.682 374.582 396.93 374.846 396.169 374.894 cv
395.297 375.125 393.945 374.453 394.682 373.374 cv
398.873 369.405 405.018 370.078 410.825 371.133 cv
407.705 371.669 404.418 371.989 401.602 373.149 cv
cp
413.009 370.438 mo
408.785 368.27 402.465 367.75 398.394 369.342 cv
396.514 370.078 392.153 371.518 392.489 374.086 cv
392.922 377.357 397.065 376.637 399.105 375.957 cv
400.746 375.414 402.281 374.621 403.977 374.205 cv
407.05 373.445 410.241 373.054 413.346 372.374 cv
414.065 372.214 414.746 371.333 413.009 370.438 cv
cp
0 0 0 rgb
f
410.825 371.133 mo
407.705 371.669 404.418 371.989 401.602 373.149 cv
400.546 373.582 399.497 374.037 398.386 374.374 cv
397.682 374.582 396.93 374.846 396.169 374.894 cv
395.297 375.125 393.945 374.453 394.682 373.374 cv
398.873 369.405 405.018 370.078 410.825 371.133 cv
cp
.517647 .317647 .137255 rgb
f
371.033 391.422 mo
370.521 392.886 369.305 394.109 367.737 394.438 cv
366.825 394.629 365.922 394.478 365.137 394.078 cv
363.633 393.342 362.569 391.718 362.682 389.957 cv
362.961 385.574 366.817 385.237 367.497 385.445 cv
369.825 385.742 370.617 387.014 371.113 388.525 cv
371.426 389.469 371.369 390.493 371.033 391.422 cv
cp
0 0 0 rgb
f
401.082 394.054 mo
401.018 394.078 400.961 394.086 400.897 394.102 cv
398.258 394.653 395.729 392.357 395.841 389.726 cv
395.833 389.693 395.841 389.661 395.841 389.629 cv
396.121 385.237 399.969 384.901 400.657 385.109 cv
402.985 385.405 403.777 386.678 404.266 388.19 cv
405.058 390.574 403.537 393.422 401.082 394.054 cv
cp
f
386.284 398.378 mo
385.398 398.708 382.645 399.813 382.297 397.87 cv
382.063 396.565 382.239 395.173 382.141 393.853 cv
381.874 390.237 382.344 386.606 382.104 382.988 cv
382.051 382.178 380.739 382.117 380.671 382.941 cv
380.242 388.011 379.644 393.759 380.547 398.799 cv
381.054 401.613 385.416 401.299 387.057 399.788 cv
387.703 399.192 387.195 398.039 386.284 398.378 cv
cp
f
370.458 367.334 mo
369.649 367.277 368.826 366.99 368.05 366.758 cv
366.85 366.391 365.674 365.887 364.514 365.414 cv
361.395 364.134 357.906 363.781 354.554 363.198 cv
360.49 362.03 366.834 361.294 371.794 365.654 cv
372.723 366.846 371.402 367.59 370.458 367.334 cv
cp
367.322 361.223 mo
362.834 359.47 356.281 360.046 352.17 362.438 cv
350.481 363.422 351.313 364.382 352.098 364.559 cv
355.441 365.31 358.85 365.742 362.178 366.574 cv
364.01 367.03 365.738 367.902 367.53 368.502 cv
369.762 369.246 374.21 370.038 374.194 366.438 cv
374.178 363.613 369.402 362.03 367.322 361.223 cv
cp
f
370.619 367.377 mo
369.81 367.321 368.986 367.033 368.21 366.802 cv
367.01 366.434 365.834 365.93 364.674 365.457 cv
361.555 364.177 358.066 363.825 354.714 363.241 cv
360.65 362.073 366.994 361.337 371.955 365.697 cv
372.883 366.889 371.563 367.634 370.619 367.377 cv
cp
.517647 .317647 .137255 rgb
f
374.316 204.175 mo
374.316 206.716 371.496 208.775 368.017 208.775 cv
364.537 208.775 361.717 206.716 361.717 204.175 cv
361.717 201.635 364.537 199.575 368.017 199.575 cv
371.496 199.575 374.316 201.635 374.316 204.175 cv
cp
1 .764706 .74902 rgb
f
422.816 203.175 mo
422.816 205.716 419.996 207.775 416.517 207.775 cv
413.037 207.775 410.217 205.716 410.217 203.175 cv
410.217 200.635 413.037 198.575 416.517 198.575 cv
419.996 198.575 422.816 200.635 422.816 203.175 cv
cp
f
420.736 187.183 mo
416.84 186.111 412.527 186.343 408.536 186.431 cv
407.472 186.463 404.392 186.311 402.408 186.807 cv
402.783 184.343 404.447 182.063 406.6 180.551 cv
410.008 178.151 414.815 177.871 418.111 180.551 cv
420.111 182.183 420.935 184.719 420.736 187.183 cv
cp
420.256 189.471 mo
418.831 193.343 414 195.191 410.208 195.063 cv
410.096 195.047 409.991 195.087 409.912 195.127 cv
407.527 195.071 405.327 194.255 403.552 191.655 cv
402.983 190.839 402.64 189.999 402.463 189.151 cv
404.136 189.111 406.08 188.607 407.623 188.479 cv
409.808 188.311 412 188.391 414.184 188.391 cv
415.016 188.399 419.144 188.175 420.479 188.639 cv
420.416 188.927 420.352 189.207 420.256 189.471 cv
cp
422.424 184.087 mo
420.512 177.791 414.455 175.423 408.447 177.399 cv
403.416 179.079 398.983 184.527 400.68 190.023 cv
403.119 197.871 412.455 198.607 418.768 194.135 cv
421.704 191.631 423.52 187.655 422.424 184.087 cv
cp
0 0 0 rgb
f
420.736 187.183 mo
416.84 186.111 412.527 186.343 408.536 186.431 cv
407.472 186.463 404.392 186.311 402.408 186.807 cv
402.783 184.343 404.447 182.063 406.6 180.551 cv
410.008 178.151 414.815 177.871 418.111 180.551 cv
420.111 182.183 420.935 184.719 420.736 187.183 cv
cp
1 1 1 rgb
f
381.376 187.503 mo
378.695 186.711 375.631 186.631 372.895 186.583 cv
369.991 186.527 365.712 186.671 362.888 187.863 cv
362.176 183.951 365.392 180.695 368.959 179.263 cv
372.76 177.727 377.487 178.271 380 181.727 cv
381.2 183.375 381.607 185.479 381.376 187.503 cv
cp
380.119 191.255 mo
378.991 193.079 377.264 194.055 375.359 194.727 cv
371.023 195.743 366.008 195.031 363.504 189.727 cv
365.928 188.967 368.344 188.711 370.455 188.687 cv
374.304 188.631 377.224 188.775 381.04 189.175 cv
380.815 189.919 380.52 190.623 380.119 191.255 cv
cp
382.84 183.471 mo
381.376 177.335 374.8 175.687 369.4 177.071 cv
364.319 178.367 359.576 183.311 361.136 188.855 cv
363.384 196.975 372.935 198.447 379.216 194.647 cv
380.983 193.255 382.224 191.231 382.783 188.967 cv
382.904 188.807 382.943 188.607 382.928 188.415 cv
383.24 186.831 383.24 185.143 382.84 183.471 cv
cp
0 0 0 rgb
f
381.376 187.503 mo
378.695 186.711 375.631 186.631 372.895 186.583 cv
369.991 186.527 365.712 186.671 362.888 187.863 cv
362.176 183.951 365.392 180.695 368.959 179.263 cv
372.76 177.727 377.487 178.271 380 181.727 cv
381.2 183.375 381.607 185.479 381.376 187.503 cv
cp
1 1 1 rgb
f
378.783 170.487 mo
377.983 170.559 377.119 170.407 376.319 170.303 cv
375.072 170.143 373.831 169.839 372.607 169.559 cv
369.319 168.807 365.815 169.031 362.416 168.999 cv
368.088 166.879 374.224 165.119 379.831 168.607 cv
380.935 169.631 379.76 170.575 378.783 170.487 cv
cp
382.327 168.991 mo
381.848 166.199 376.88 165.423 374.695 164.959 cv
369.983 163.975 363.607 165.607 359.943 168.639 cv
358.439 169.879 359.424 170.695 360.216 170.743 cv
363.64 170.935 367.072 170.807 370.487 171.087 cv
372.376 171.239 374.216 171.815 376.088 172.111 cv
378.416 172.479 382.935 172.543 382.327 168.991 cv
cp
0 0 0 rgb
f
378.783 170.487 mo
377.983 170.559 377.119 170.407 376.319 170.303 cv
375.072 170.143 373.831 169.839 372.607 169.559 cv
369.319 168.807 365.815 169.031 362.416 168.999 cv
368.088 166.879 374.224 165.119 379.831 168.607 cv
380.935 169.631 379.76 170.575 378.783 170.487 cv
cp
.517647 .317647 .137255 rgb
f
412.392 169.295 mo
411.295 169.591 410.191 169.911 409.056 170.103 cv
408.327 170.223 407.544 170.383 406.783 170.343 cv
405.895 170.455 404.631 169.615 405.504 168.639 cv
410.168 165.239 416.176 166.687 421.808 168.471 cv
418.64 168.599 415.336 168.503 412.392 169.295 cv
cp
424.056 168.063 mo
420.144 165.367 413.935 164.055 409.704 165.111 cv
407.736 165.599 403.231 166.471 403.24 169.071 cv
403.248 172.367 407.455 172.175 409.568 171.767 cv
411.256 171.431 412.88 170.839 414.615 170.639 cv
417.76 170.287 420.983 170.303 424.144 170.015 cv
424.88 169.951 425.663 169.167 424.056 168.063 cv
cp
0 0 0 rgb
f
421.808 168.471 mo
418.64 168.599 415.336 168.503 412.392 169.295 cv
411.295 169.591 410.191 169.911 409.056 170.103 cv
408.327 170.223 407.544 170.383 406.783 170.343 cv
405.895 170.455 404.631 169.615 405.504 168.639 cv
410.168 165.239 416.176 166.687 421.808 168.471 cv
cp
.517647 .317647 .137255 rgb
f
411.011 187.121 mo
411.507 188.634 412.293 189.907 414.624 190.201 cv
415.307 190.41 419.159 190.075 419.441 185.685 cv
419.611 183.013 417.06 180.651 414.387 181.208 cv
411.825 181.744 410.21 184.677 411.011 187.121 cv
cp
0 0 0 rgb
f
371.657 187.456 mo
372.153 188.969 372.939 190.243 375.27 190.536 cv
375.953 190.745 379.806 190.41 380.088 186.02 cv
380.258 183.348 377.705 180.986 375.032 181.544 cv
372.471 182.079 370.856 185.012 371.657 187.456 cv
cp
f
393.268 199.072 mo
392.381 199.403 389.627 200.507 389.279 198.564 cv
389.047 197.259 389.221 195.869 389.123 194.548 cv
388.856 190.932 389.327 187.301 389.086 183.683 cv
389.033 182.873 387.723 182.813 387.652 183.636 cv
387.225 188.705 386.627 194.454 387.529 199.493 cv
388.036 202.308 392.399 201.995 394.04 200.482 cv
394.685 199.888 394.178 198.733 393.268 199.072 cv
cp
f
378.744 212.06 mo
378.818 212.195 379.015 212.222 379.146 212.177 cv
379.576 212.031 379.841 211.595 380.049 211.129 cv
383.779 212.313 385.881 214.202 389.897 212.199 cv
392.656 210.824 394.199 211.885 396.951 212.335 cv
398.755 212.63 400.6 211.857 402.178 211.068 cv
402.396 211.455 402.643 211.826 402.907 212.147 cv
403.199 212.501 403.876 212.318 403.797 211.806 cv
403.689 211.11 403.32 210.501 403.023 209.873 cv
402.707 209.205 402.616 208.304 402.166 207.731 cv
401.997 207.518 401.609 207.46 401.442 207.717 cv
401.005 208.386 401.277 209.119 401.564 209.804 cv
398.99 210.466 397.192 210.805 394.522 209.888 cv
393.404 209.503 391.958 209.23 390.813 209.708 cv
388.351 210.737 386.623 212.065 383.869 210.875 cv
382.646 210.348 381.88 209.649 380.736 209.581 cv
381.056 208.955 381.375 208.314 381.389 207.616 cv
381.396 207.21 380.844 207.017 380.553 207.244 cv
379.834 207.81 379.541 208.807 379.197 209.626 cv
378.896 210.34 378.334 211.323 378.744 212.06 cv
cp
f
420.482 188.643 mo
420.415 188.924 420.349 189.206 420.254 189.474 cv
418.834 193.346 413.998 195.194 410.206 195.06 cv
410.1 195.047 409.991 195.087 409.912 195.128 cv
407.526 195.074 405.33 194.256 403.549 191.657 cv
402.986 190.84 402.638 189.997 402.464 189.152 cv
404.139 189.112 406.08 188.603 407.621 188.482 cv
409.805 188.308 412.002 188.389 414.185 188.389 cv
415.016 188.402 419.143 188.174 420.482 188.643 cv
cp
1 .752941 .643137 rgb
f
381.041 189.179 mo
380.814 189.916 380.518 190.626 380.116 191.256 cv
378.991 193.077 377.264 194.056 375.361 194.726 cv
371.02 195.744 366.01 195.034 363.504 189.728 cv
365.929 188.965 368.341 188.71 370.457 188.684 cv
374.303 188.63 377.223 188.777 381.041 189.179 cv
cp
f
43.0957 298.108 mo
43.0957 300.648 40.2754 302.708 36.7959 302.708 cv
33.3159 302.708 30.4956 300.648 30.4956 298.108 cv
30.4956 295.567 33.3159 293.508 36.7959 293.508 cv
40.2754 293.508 43.0957 295.567 43.0957 298.108 cv
cp
1 .764706 .74902 rgb
f
91.5957 297.108 mo
91.5957 299.648 88.7754 301.708 85.2959 301.708 cv
81.8159 301.708 78.9956 299.648 78.9956 297.108 cv
78.9956 294.567 81.8159 292.508 85.2959 292.508 cv
88.7754 292.508 91.5957 294.567 91.5957 297.108 cv
cp
f
45.187 291.093 mo
39.187 293.084 33.1147 290.7 31.2026 284.42 cv
30.1147 280.844 31.939 276.86 34.875 274.355 cv
41.1709 269.884 50.5229 270.637 52.9468 278.469 cv
54.6509 283.965 50.2109 289.429 45.187 291.093 cv
cp
0 0 0 rgb
f
84.2271 291.429 mo
78.8428 292.805 72.251 291.156 70.7949 285.036 cv
70.4028 283.348 70.3872 281.66 70.707 280.076 cv
70.6826 279.893 70.7393 279.692 70.8428 279.532 cv
71.4189 277.269 72.6431 275.244 74.4189 273.86 cv
80.6909 270.044 90.2432 271.532 92.5068 279.637 cv
94.0508 285.18 89.3232 290.124 84.2271 291.429 cv
cp
f
92.8564 298.546 mo
91.6089 297.21 89.3057 295.734 87.4136 296.394 cv
86.7339 296.631 86.855 297.674 87.5552 297.777 cv
87.9736 297.838 88.3643 297.936 88.7373 298.06 cv
84.8271 302.359 82.7886 305.363 78.3862 308.007 cv
73.4873 310.948 67.9268 311.979 62.2764 312.033 cv
56.8228 312.086 50.9536 311.025 45.9346 308.903 cv
43.4438 307.85 41.2407 306.261 39.2056 304.505 cv
37.2354 302.806 36.0088 300.645 34.5576 298.566 cv
34.9014 298.346 35.2329 298.118 35.5508 297.914 cv
36.5381 297.275 35.458 295.832 34.4722 296.45 cv
33.3745 297.138 32.4043 297.816 31.1353 298.154 cv
30.3833 298.354 30.5986 299.473 31.2822 299.591 cv
31.9937 299.715 32.6792 299.539 33.333 299.245 cv
35.8154 303.789 38.6118 307.029 43.2837 309.77 cv
48.5029 312.83 55.1763 313.751 61.1162 314.007 cv
67.1143 314.266 73.0732 313.105 78.3726 310.254 cv
82.9653 307.782 87.9634 303.651 90.2197 298.777 cv
90.6841 299.065 91.1357 299.387 91.5791 299.772 cv
92.3315 300.427 93.5532 299.293 92.8564 298.546 cv
cp
f
47.0381 287.942 mo
43.6221 290.341 38.8257 290.636 35.5303 287.942 cv
33.5205 286.309 32.6895 283.776 32.8906 281.311 cv
36.8022 282.383 41.1035 282.155 45.1084 282.061 cv
46.167 282.034 49.2354 282.183 51.231 281.686 cv
50.8564 284.151 49.1816 286.43 47.0381 287.942 cv
cp
33.3862 279.02 mo
34.7925 275.162 39.6299 273.313 43.4341 273.447 cv
43.5415 273.447 43.6348 273.406 43.7295 273.367 cv
46.1138 273.421 48.311 274.251 50.0791 276.836 cv
50.6553 277.653 50.9902 278.498 51.1646 279.355 cv
49.5029 279.382 47.5605 279.904 46.0063 280.012 cv
43.8359 280.185 41.6255 280.119 39.4551 280.105 cv
38.6245 280.105 34.4849 280.32 33.145 279.852 cv
33.2256 279.569 33.2925 279.288 33.3862 279.02 cv
cp
1 1 1 rgb
f
84.6841 289.228 mo
80.8657 290.77 76.1494 290.233 73.6313 286.764 cv
72.4385 285.116 72.0234 283.012 72.2515 280.989 cv
74.9443 281.78 78.0122 281.86 80.7314 281.914 cv
83.6523 281.981 87.9131 281.833 90.7524 280.628 cv
91.4492 284.539 88.2476 287.796 84.6841 289.228 cv
cp
73.5107 277.238 mo
74.6494 275.43 76.3774 274.439 78.2666 273.769 cv
82.6206 272.75 87.6182 273.461 90.123 278.779 cv
87.6982 279.543 85.2998 279.797 83.1831 279.81 cv
79.3252 279.864 76.4043 279.73 72.5996 279.315 cv
72.8271 278.578 73.1221 277.882 73.5107 277.238 cv
cp
f
48.8911 264.556 mo
48.1069 264.724 47.2271 264.684 46.4268 264.676 cv
45.1631 264.668 43.8989 264.516 42.6431 264.38 cv
39.291 264.036 35.8428 264.684 32.4668 265.06 cv
37.835 262.276 43.7148 259.78 49.6987 262.572 cv
50.9229 263.444 49.8667 264.532 48.8911 264.556 cv
cp
52.2271 262.645 mo
51.4111 259.933 46.3872 259.765 44.1631 259.572 cv
39.3628 259.156 33.2349 261.548 29.9712 265.004 cv
28.627 266.429 29.6987 267.116 30.4912 267.06 cv
33.915 266.836 37.2988 266.301 40.731 266.156 cv
42.6187 266.076 44.5229 266.436 46.4111 266.5 cv
48.7627 266.588 53.2588 266.093 52.2271 262.645 cv
cp
0 0 0 rgb
f
48.8911 264.556 mo
48.1069 264.724 47.2271 264.684 46.4268 264.676 cv
45.1631 264.668 43.8989 264.516 42.6431 264.38 cv
39.291 264.036 35.8428 264.684 32.4668 265.06 cv
37.835 262.276 43.7148 259.78 49.6987 262.572 cv
50.9229 263.444 49.8667 264.532 48.8911 264.556 cv
cp
.517647 .317647 .137255 rgb
f
82.5068 263.908 mo
81.3711 263.876 80.2271 263.868 79.0752 263.732 cv
78.3467 263.637 77.5469 263.572 76.835 263.309 cv
75.9468 263.172 74.979 262.004 76.0908 261.316 cv
81.5308 259.388 86.875 262.484 91.7627 265.797 cv
88.6909 265.028 85.5552 263.988 82.5068 263.908 cv
cp
94.0347 266.044 mo
91.0591 262.355 85.4829 259.324 81.123 259.133 cv
79.0986 259.036 74.5308 258.588 73.7949 261.076 cv
72.8667 264.244 76.9551 265.261 79.0908 265.469 cv
80.811 265.637 82.5391 265.532 84.2588 265.836 cv
87.3711 266.388 90.4507 267.316 93.563 267.948 cv
94.2827 268.101 95.2588 267.565 94.0347 266.044 cv
cp
0 0 0 rgb
f
91.7627 265.797 mo
88.6909 265.028 85.5552 263.988 82.5068 263.908 cv
81.3711 263.876 80.2271 263.868 79.0752 263.732 cv
78.3467 263.637 77.5469 263.572 76.835 263.309 cv
75.9468 263.172 74.979 262.004 76.0908 261.316 cv
81.5308 259.388 86.875 262.484 91.7627 265.797 cv
cp
.517647 .317647 .137255 rgb
f
46.6426 280.651 mo
46.147 279.138 45.3604 277.864 43.0293 277.57 cv
42.3462 277.362 38.4946 277.696 38.2124 282.086 cv
38.0415 284.759 40.5947 287.121 43.2671 286.563 cv
45.8296 286.027 47.4443 283.095 46.6426 280.651 cv
cp
0 0 0 rgb
f
84.8247 280.204 mo
84.3286 278.691 83.5425 277.418 81.2109 277.124 cv
80.5283 276.915 76.6763 277.25 76.3936 281.641 cv
76.2236 284.313 78.7764 286.674 81.4492 286.116 cv
84.0107 285.581 85.6255 282.648 84.8247 280.204 cv
cp
f
63.3237 294.076 mo
62.4365 294.407 59.6826 295.512 59.3359 293.568 cv
59.103 292.263 59.2769 290.873 59.1787 289.552 cv
58.9121 285.935 59.3833 282.305 59.1421 278.686 cv
59.0903 277.876 57.7793 277.816 57.7085 278.641 cv
57.2803 283.709 56.6826 289.457 57.5854 294.497 cv
58.0918 297.313 62.4551 296.998 64.0957 295.486 cv
64.7417 294.892 64.2344 293.736 63.3237 294.076 cv
cp
f
51.1646 279.355 mo
49.5029 279.382 47.5605 279.904 46.0063 280.012 cv
43.8359 280.185 41.6255 280.119 39.4551 280.105 cv
38.6245 280.105 34.4849 280.32 33.145 279.852 cv
33.2256 279.569 33.2925 279.288 33.3862 279.02 cv
34.7925 275.162 39.6299 273.313 43.4341 273.447 cv
43.5415 273.447 43.6348 273.406 43.7295 273.367 cv
46.1138 273.421 48.311 274.251 50.0791 276.836 cv
50.6553 277.653 50.9902 278.498 51.1646 279.355 cv
cp
1 .752941 .643137 rgb
f
90.123 278.779 mo
87.6982 279.543 85.2998 279.797 83.1831 279.81 cv
79.3252 279.864 76.4043 279.73 72.5996 279.315 cv
72.8271 278.578 73.1221 277.882 73.5107 277.238 cv
74.6494 275.43 76.3774 274.439 78.2666 273.769 cv
82.6206 272.75 87.6182 273.461 90.123 278.779 cv
cp
f
153.374 297.271 mo
153.374 299.811 150.554 301.871 147.074 301.871 cv
143.594 301.871 140.774 299.811 140.774 297.271 cv
140.774 294.73 143.594 292.671 147.074 292.671 cv
150.554 292.671 153.374 294.73 153.374 297.271 cv
cp
1 .764706 .74902 rgb
f
201.874 296.271 mo
201.874 298.811 199.054 300.871 195.574 300.871 cv
192.094 300.871 189.274 298.811 189.274 296.271 cv
189.274 293.73 192.094 291.671 195.574 291.671 cv
199.054 291.671 201.874 293.73 201.874 296.271 cv
cp
f
154.481 290.255 mo
148.481 292.246 142.409 289.863 140.497 283.582 cv
139.409 280.007 141.233 276.023 144.169 273.519 cv
150.465 269.047 159.817 269.799 162.241 277.631 cv
163.945 283.127 159.505 288.591 154.481 290.255 cv
cp
0 0 0 rgb
f
193.521 290.591 mo
188.137 291.967 181.545 290.318 180.089 284.199 cv
179.697 282.511 179.681 280.823 180.001 279.238 cv
179.977 279.055 180.033 278.855 180.137 278.695 cv
180.713 276.431 181.937 274.406 183.713 273.023 cv
189.985 269.207 199.537 270.695 201.801 278.799 cv
203.345 284.343 198.617 289.286 193.521 290.591 cv
cp
f
159.417 304.875 mo
159.492 305.012 159.688 305.038 159.82 304.993 cv
160.249 304.848 160.514 304.41 160.722 303.945 cv
164.453 305.129 166.554 307.019 170.571 305.016 cv
173.33 303.641 174.872 304.701 177.625 305.151 cv
179.428 305.446 181.272 304.673 182.851 303.884 cv
183.07 304.271 183.316 304.643 183.581 304.963 cv
183.872 305.316 184.548 305.134 184.47 304.621 cv
184.363 303.927 183.994 303.316 183.697 302.69 cv
183.38 302.022 183.29 301.121 182.839 300.547 cv
182.67 300.334 182.282 300.277 182.115 300.533 cv
181.678 301.202 181.95 301.935 182.238 302.621 cv
179.663 303.281 177.866 303.621 175.195 302.704 cv
174.077 302.32 172.631 302.046 171.486 302.524 cv
169.024 303.554 167.296 304.881 164.542 303.691 cv
163.32 303.164 162.553 302.465 161.41 302.397 cv
161.729 301.771 162.048 301.129 162.061 300.433 cv
162.069 300.026 161.517 299.832 161.227 300.06 cv
160.507 300.626 160.214 301.623 159.87 302.442 cv
159.57 303.156 159.008 304.14 159.417 304.875 cv
cp
f
156.332 287.105 mo
152.916 289.504 148.12 289.798 144.824 287.105 cv
142.815 285.472 141.984 282.939 142.185 280.474 cv
146.097 281.546 150.397 281.317 154.403 281.224 cv
155.461 281.196 158.529 281.345 160.525 280.849 cv
160.15 283.314 158.476 285.592 156.332 287.105 cv
cp
142.681 278.183 mo
144.087 274.324 148.924 272.476 152.729 272.609 cv
152.835 272.609 152.929 272.569 153.023 272.529 cv
155.408 272.583 157.605 273.414 159.373 275.999 cv
159.95 276.816 160.285 277.66 160.458 278.518 cv
158.797 278.544 156.854 279.066 155.3 279.174 cv
153.13 279.348 150.919 279.281 148.749 279.268 cv
147.919 279.268 143.779 279.482 142.439 279.014 cv
142.52 278.731 142.587 278.45 142.681 278.183 cv
cp
1 1 1 rgb
f
193.978 288.391 mo
190.16 289.932 185.444 289.396 182.925 285.926 cv
181.733 284.278 181.317 282.175 181.546 280.152 cv
184.238 280.942 187.307 281.023 190.026 281.076 cv
192.946 281.145 197.207 280.996 200.047 279.79 cv
200.743 283.702 197.542 286.958 193.978 288.391 cv
cp
182.805 276.401 mo
183.943 274.593 185.672 273.602 187.561 272.931 cv
191.915 271.913 196.912 272.623 199.417 277.941 cv
196.993 278.705 194.595 278.96 192.477 278.973 cv
188.62 279.027 185.698 278.893 181.894 278.478 cv
182.122 277.741 182.417 277.044 182.805 276.401 cv
cp
f
157.969 265.582 mo
157.161 265.559 156.321 265.303 155.545 265.103 cv
154.321 264.782 153.137 264.335 151.953 263.902 cv
148.785 262.759 145.281 262.543 141.913 262.095 cv
147.793 260.695 154.097 259.695 159.233 263.847 cv
160.209 264.999 158.921 265.791 157.969 265.582 cv
cp
154.585 259.599 mo
150.033 258.039 143.505 258.879 139.497 261.439 cv
137.849 262.486 138.729 263.414 139.513 263.559 cv
142.889 264.175 146.305 264.471 149.665 265.159 cv
151.521 265.543 153.273 266.343 155.089 266.871 cv
157.353 267.519 161.833 268.127 161.665 264.535 cv
161.537 261.703 156.697 260.318 154.585 259.599 cv
cp
0 0 0 rgb
f
157.969 265.582 mo
157.161 265.559 156.321 265.303 155.545 265.103 cv
154.321 264.782 153.137 264.335 151.953 263.902 cv
148.785 262.759 145.281 262.543 141.913 262.095 cv
147.793 260.695 154.097 259.695 159.233 263.847 cv
160.209 264.999 158.921 265.791 157.969 265.582 cv
cp
.517647 .317647 .137255 rgb
f
191.769 263.711 mo
190.737 264.199 189.713 264.711 188.625 265.103 cv
187.929 265.351 187.193 265.655 186.433 265.75 cv
185.577 266.023 184.193 265.423 184.873 264.303 cv
188.841 260.118 195.017 260.463 200.873 261.199 cv
197.785 261.902 194.521 262.398 191.769 263.711 cv
cp
203.009 260.391 mo
198.681 258.446 192.337 258.278 188.361 260.078 cv
186.521 260.91 182.241 262.582 182.721 265.135 cv
183.321 268.375 187.425 267.439 189.433 266.647 cv
191.033 266.015 192.529 265.143 194.193 264.631 cv
197.225 263.719 200.393 263.15 203.449 262.303 cv
204.161 262.103 204.793 261.191 203.009 260.391 cv
cp
0 0 0 rgb
f
200.873 261.199 mo
197.785 261.902 194.521 262.398 191.769 263.711 cv
190.737 264.199 189.713 264.711 188.625 265.103 cv
187.929 265.351 187.193 265.655 186.433 265.75 cv
185.577 266.023 184.193 265.423 184.873 264.303 cv
188.841 260.118 195.017 260.463 200.873 261.199 cv
cp
.517647 .317647 .137255 rgb
f
155.937 279.814 mo
155.441 278.301 154.655 277.027 152.323 276.733 cv
151.641 276.524 147.789 276.859 147.507 281.249 cv
147.335 283.922 149.889 286.283 152.561 285.726 cv
155.124 285.19 156.738 282.258 155.937 279.814 cv
cp
0 0 0 rgb
f
194.119 279.367 mo
193.623 277.853 192.837 276.58 190.505 276.286 cv
189.822 276.078 185.971 276.412 185.688 280.803 cv
185.518 283.475 188.071 285.836 190.743 285.278 cv
193.305 284.743 194.919 281.81 194.119 279.367 cv
cp
f
172.618 293.238 mo
171.731 293.57 168.977 294.674 168.63 292.73 cv
168.397 291.426 168.571 290.035 168.474 288.715 cv
168.206 285.098 168.677 281.467 168.436 277.849 cv
168.384 277.039 167.073 276.978 167.003 277.803 cv
166.575 282.871 165.977 288.62 166.88 293.66 cv
167.386 296.475 171.749 296.16 173.39 294.648 cv
174.036 294.055 173.528 292.898 172.618 293.238 cv
cp
f
160.458 278.518 mo
158.797 278.544 156.854 279.066 155.3 279.174 cv
153.13 279.348 150.919 279.281 148.749 279.268 cv
147.919 279.268 143.779 279.482 142.439 279.014 cv
142.52 278.731 142.587 278.45 142.681 278.183 cv
144.087 274.324 148.924 272.476 152.729 272.609 cv
152.835 272.609 152.929 272.569 153.023 272.529 cv
155.408 272.583 157.605 273.414 159.373 275.999 cv
159.95 276.816 160.285 277.66 160.458 278.518 cv
cp
1 .752941 .643137 rgb
f
199.417 277.941 mo
196.993 278.705 194.595 278.96 192.477 278.973 cv
188.62 279.027 185.698 278.893 181.894 278.478 cv
182.122 277.741 182.417 277.044 182.805 276.401 cv
183.943 274.593 185.672 273.602 187.561 272.931 cv
191.915 271.913 196.912 272.623 199.417 277.941 cv
cp
f
262.028 297.166 mo
262.028 299.706 259.208 301.766 255.729 301.766 cv
252.249 301.766 249.429 299.706 249.429 297.166 cv
249.429 294.625 252.249 292.565 255.729 292.565 cv
259.208 292.565 262.028 294.625 262.028 297.166 cv
cp
1 .764706 .74902 rgb
f
310.528 296.166 mo
310.528 298.706 307.708 300.766 304.228 300.766 cv
300.749 300.766 297.929 298.706 297.929 296.166 cv
297.929 293.625 300.749 291.565 304.228 291.565 cv
307.708 291.565 310.528 293.625 310.528 296.166 cv
cp
f
305.096 286.886 mo
301.632 289.102 296.895 289.43 293.784 286.486 cv
291.336 284.158 290.735 280.198 291.928 277.15 cv
292.703 275.158 294.224 273.87 295.96 272.862 cv
300.128 271.03 305.304 270.822 308.743 275.886 cv
311.56 280.03 308.76 284.558 305.096 286.886 cv
cp
311.031 276.022 mo
307.328 268.462 297.664 268.766 292.191 273.662 cv
289.56 276.654 288.88 281.254 290.68 285.31 cv
293.231 291.061 300.016 291.478 305.064 289.134 cv
309.824 286.926 313.567 281.19 311.031 276.022 cv
cp
0 0 0 rgb
f
299.271 285.15 mo
296.743 286.182 293.808 284.334 293.48 281.67 cv
292.952 277.31 296.68 276.27 297.392 276.351 cv
299.735 276.214 300.743 277.318 301.504 278.718 cv
302.743 280.974 301.695 284.15 299.271 285.15 cv
cp
308.743 275.886 mo
305.304 270.822 300.128 271.03 295.96 272.862 cv
294.224 273.87 292.703 275.158 291.928 277.15 cv
290.735 280.198 291.336 284.158 293.784 286.486 cv
296.895 289.43 301.632 289.102 305.096 286.886 cv
308.76 284.558 311.56 280.03 308.743 275.886 cv
cp
1 1 1 rgb
f
266.743 258.733 mo
266.144 259.27 265.359 259.67 264.656 260.054 cv
263.552 260.67 262.384 261.158 261.224 261.662 cv
258.136 263.014 255.456 265.277 252.703 267.27 cv
256 262.198 259.888 257.134 266.472 256.605 cv
267.968 256.766 267.584 258.229 266.743 258.733 cv
cp
268.703 255.43 mo
266.664 253.47 262.199 255.798 260.168 256.733 cv
255.792 258.741 251.64 263.838 250.504 268.454 cv
250.031 270.351 251.304 270.422 251.976 269.99 cv
254.84 268.102 257.52 265.966 260.432 264.15 cv
262.039 263.15 263.871 262.526 265.543 261.646 cv
267.632 260.565 271.304 257.918 268.703 255.43 cv
cp
0 0 0 rgb
f
266.743 258.733 mo
266.144 259.27 265.359 259.67 264.656 260.054 cv
263.552 260.67 262.384 261.158 261.224 261.662 cv
258.136 263.014 255.456 265.277 252.703 267.27 cv
256 262.198 259.888 257.134 266.472 256.605 cv
267.968 256.766 267.584 258.229 266.743 258.733 cv
cp
.517647 .317647 .137255 rgb
f
294.871 260.294 mo
293.743 260.454 292.607 260.638 291.456 260.694 cv
290.72 260.726 289.92 260.79 289.176 260.654 cv
288.271 260.67 287.128 259.678 288.112 258.814 cv
293.144 255.998 298.935 258.15 304.313 260.598 cv
301.152 260.351 297.888 259.854 294.871 260.294 cv
cp
306.592 260.462 mo
303.031 257.318 297.031 255.27 292.695 255.814 cv
290.688 256.061 286.112 256.39 285.808 258.966 cv
285.424 262.245 289.624 262.558 291.768 262.405 cv
293.488 262.277 295.168 261.886 296.912 261.894 cv
300.08 261.918 303.271 262.318 306.448 262.413 cv
307.184 262.438 308.056 261.758 306.592 260.462 cv
cp
0 0 0 rgb
f
304.313 260.598 mo
301.152 260.351 297.888 259.854 294.871 260.294 cv
293.743 260.454 292.607 260.638 291.456 260.694 cv
290.72 260.726 289.92 260.79 289.176 260.654 cv
288.271 260.67 287.128 259.678 288.112 258.814 cv
293.144 255.998 298.935 258.15 304.313 260.598 cv
cp
.517647 .317647 .137255 rgb
f
299.271 285.15 mo
296.743 286.182 293.808 284.334 293.48 281.67 cv
292.952 277.31 296.68 276.27 297.392 276.351 cv
299.735 276.214 300.743 277.318 301.504 278.718 cv
302.743 280.974 301.695 284.15 299.271 285.15 cv
cp
0 0 0 rgb
f
284.992 295.567 mo
284.181 296.056 281.676 297.646 280.979 295.8 cv
280.512 294.559 280.428 293.16 280.089 291.88 cv
279.163 288.374 278.961 284.718 278.06 281.205 cv
277.86 280.418 276.56 280.6 276.643 281.423 cv
277.151 286.483 277.617 292.245 279.429 297.034 cv
280.442 299.707 284.675 298.6 286.01 296.811 cv
286.536 296.108 285.825 295.066 284.992 295.567 cv
cp
f
285.07 308.083 mo
284.848 307.8 284.489 307.804 284.285 308.106 cv
283.995 308.534 284.205 309.036 284.352 309.499 cv
281.433 309.293 278.828 309.591 275.924 308.413 cv
273.189 307.304 270.449 305.075 269.105 302.39 cv
269.211 302.28 269.31 302.165 269.422 302.058 cv
270.371 301.132 271.744 300.479 272.433 299.334 cv
272.66 298.956 272.33 298.355 271.867 298.413 cv
270.514 298.581 269.44 299.675 268.464 300.56 cv
267.271 301.644 266.028 303.031 265.426 304.546 cv
265.144 305.26 266.04 306.087 266.608 305.393 cv
267.033 304.872 267.436 304.349 267.848 303.833 cv
269.752 309.387 279.467 313.515 284.602 311.026 cv
284.606 311.078 284.615 311.128 284.617 311.179 cv
284.635 311.658 284.523 312.093 284.609 312.567 cv
284.695 313.05 285.334 313.104 285.631 312.811 cv
286.758 311.7 285.911 309.151 285.07 308.083 cv
cp
f
264.593 279.186 mo
263.875 279.072 263.374 279.901 263.919 280.44 cv
265.613 282.116 268.083 283.224 269.037 285.429 cv
264.505 283.55 261.28 284.065 256.98 287.318 cv
256.422 287.741 257.078 288.503 257.634 288.383 cv
259.604 287.957 261.34 286.967 263.398 286.667 cv
265.75 286.324 267.825 286.956 269.95 287.843 cv
270.597 288.112 271.48 287.752 271.422 286.938 cv
271.191 283.655 267.932 279.724 264.593 279.186 cv
cp
f
260.863 399.023 mo
260.863 401.565 258.043 403.624 254.563 403.624 cv
251.084 403.624 248.264 401.565 248.264 399.023 cv
248.264 396.483 251.084 394.424 254.563 394.424 cv
258.043 394.424 260.863 396.483 260.863 399.023 cv
cp
1 .764706 .74902 rgb
f
309.363 398.023 mo
309.363 400.565 306.543 402.624 303.064 402.624 cv
299.584 402.624 296.764 400.565 296.764 398.023 cv
296.764 395.483 299.584 393.424 303.064 393.424 cv
306.543 393.424 309.363 395.483 309.363 398.023 cv
cp
f
263.451 401.19 mo
267.099 399.383 271.362 400.135 275.233 400.686 cv
278.658 401.184 281.804 401.199 285.242 400.879 cv
287.61 400.654 290.179 400.438 292.499 401.15 cv
296.051 402.246 298.179 404.918 297.083 408.679 cv
295.947 412.574 291.835 414.902 287.179 416.086 cv
279.531 418.183 266.515 417.719 261.37 409.654 cv
259.531 406.766 260.251 402.773 263.451 401.19 cv
cp
0 0 0 rgb
f
264.862 402.684 mo
265.902 402.168 267.103 401.966 268.353 401.933 cv
268.242 404.023 267.957 406.278 267.848 408.51 cv
266.233 408.416 264.618 408.355 263.003 408.406 cv
261.882 406.34 261.939 404.133 264.862 402.684 cv
cp
275.722 402.738 mo
275.643 404.852 275.648 406.973 275.71 409.09 cv
273.674 408.957 271.638 408.765 269.603 408.613 cv
269.611 408.348 269.612 408.082 269.628 407.819 cv
269.733 405.866 269.853 403.916 269.878 401.96 cv
271.64 402.076 273.412 402.42 274.917 402.637 cv
275.186 402.676 275.452 402.703 275.722 402.738 cv
cp
275.755 410.986 mo
275.798 411.973 275.669 413.788 275.964 415.148 cv
273.754 415.011 271.563 414.632 269.375 413.766 cv
269.513 412.641 269.55 411.499 269.564 410.353 cv
271.63 410.48 273.69 410.586 275.746 410.66 cv
275.751 410.768 275.75 410.877 275.755 410.986 cv
cp
282.471 403.091 mo
282.31 405.09 282.391 407.129 282.608 409.164 cv
281.659 409.211 280.711 409.244 279.768 409.242 cv
278.894 409.241 278.021 409.21 277.148 409.168 cv
277.116 407.08 277.159 404.991 277.101 402.905 cv
278.897 403.091 280.663 403.176 282.471 403.091 cv
cp
283.495 414.867 mo
282.28 415.037 281.049 415.153 279.839 415.244 cv
279.047 415.245 278.257 415.238 277.469 415.217 cv
277.44 413.762 277.26 412.286 277.192 410.845 cv
277.189 410.799 277.19 410.754 277.189 410.708 cv
279.061 410.757 280.933 410.781 282.807 410.75 cv
282.999 412.138 283.237 413.515 283.495 414.867 cv
cp
284.309 402.962 mo
285.385 402.84 286.999 402.763 288.679 402.856 cv
288.681 402.866 288.678 402.874 288.681 402.883 cv
289.244 404.531 289.216 406.273 289.269 407.993 cv
289.276 408.233 289.297 408.475 289.309 408.715 cv
287.561 408.824 285.81 408.971 284.063 409.082 cv
283.944 407.056 283.936 405.018 283.736 403.002 cv
283.929 402.984 284.116 402.984 284.309 402.962 cv
cp
289.75 413.242 mo
288.173 413.936 286.422 414.383 284.617 414.691 cv
284.628 413.367 284.354 412.035 284.192 410.711 cv
285.94 410.659 287.689 410.574 289.44 410.426 cv
289.531 411.367 289.64 412.307 289.75 413.242 cv
cp
295.047 408.596 mo
293.557 408.536 292.057 408.574 290.554 408.648 cv
290.533 408.391 290.507 408.133 290.494 407.874 cv
290.417 406.207 290.415 404.56 289.944 402.961 cv
293.651 403.379 297.072 404.793 295.047 408.596 cv
cp
290.877 412.656 mo
290.848 411.877 290.776 411.098 290.7 410.319 cv
291.862 410.203 293.026 410.068 294.192 409.898 cv
293.293 411.067 292.151 411.95 290.877 412.656 cv
cp
264.088 409.98 mo
265.335 410.073 266.573 410.152 267.814 410.234 cv
267.823 411.246 267.894 412.239 268.064 413.194 cv
266.758 412.516 265.241 411.352 264.088 409.98 cv
cp
1 1 1 rgb
f
305.194 384.424 mo
303.555 383.977 301.835 383.752 300.099 383.656 cv
297.715 383.52 295.299 383.624 292.995 383.672 cv
292.659 383.68 292.115 383.672 291.467 383.672 cv
290.083 383.672 288.219 383.712 286.874 384.048 cv
287.242 381.584 288.906 379.304 291.066 377.792 cv
294.467 375.392 299.274 375.112 302.57 377.792 cv
304.57 379.424 305.402 381.96 305.194 384.424 cv
cp
304.715 386.72 mo
303.299 390.584 298.459 392.432 294.667 392.304 cv
294.563 392.288 294.451 392.328 294.37 392.367 cv
291.987 392.313 289.795 391.496 288.011 388.896 cv
287.442 388.08 287.099 387.239 286.923 386.392 cv
288.555 386.352 290.427 385.88 291.947 385.744 cv
291.995 385.735 292.042 385.728 292.083 385.728 cv
294.267 385.552 296.459 385.632 298.651 385.632 cv
298.835 385.632 299.186 385.624 299.635 385.616 cv
301.186 385.576 303.898 385.52 304.939 385.88 cv
304.874 386.168 304.81 386.448 304.715 386.72 cv
cp
306.883 381.328 mo
304.971 375.031 298.915 372.664 292.915 374.648 cv
287.874 376.32 283.442 381.768 285.139 387.264 cv
287.578 395.112 296.923 395.855 303.227 391.376 cv
306.163 388.871 307.987 384.896 306.883 381.328 cv
cp
0 0 0 rgb
f
305.194 384.424 mo
303.555 383.977 301.835 383.752 300.099 383.656 cv
300.106 383.632 300.106 383.616 300.106 383.592 cv
300.274 380.928 297.723 378.56 295.051 379.12 cv
292.955 379.56 291.491 381.608 291.467 383.672 cv
290.083 383.672 288.219 383.712 286.874 384.048 cv
287.242 381.584 288.906 379.304 291.066 377.792 cv
294.467 375.392 299.274 375.112 302.57 377.792 cv
304.57 379.424 305.402 381.96 305.194 384.424 cv
cp
1 1 1 rgb
f
300.106 383.592 mo
300.106 383.616 300.106 383.632 300.099 383.656 cv
300.051 384.432 299.883 385.08 299.635 385.616 cv
298.522 388.088 295.843 388.28 295.291 388.112 cv
293.339 387.863 292.467 386.928 291.947 385.744 cv
291.843 385.52 291.755 385.28 291.675 385.031 cv
291.53 384.592 291.467 384.128 291.467 383.672 cv
291.491 381.608 292.955 379.56 295.051 379.12 cv
297.723 378.56 300.274 380.928 300.106 383.592 cv
cp
0 0 0 rgb
f
304.942 385.883 mo
304.876 386.166 304.81 386.446 304.715 386.716 cv
303.296 390.587 298.459 392.435 294.667 392.302 cv
294.56 392.289 294.452 392.328 294.373 392.369 cv
291.987 392.315 289.791 391.497 288.009 388.898 cv
287.446 388.082 287.099 387.238 286.925 386.395 cv
288.6 386.353 290.541 385.844 292.082 385.724 cv
294.266 385.549 296.462 385.63 298.647 385.63 cv
299.477 385.643 303.602 385.415 304.942 385.883 cv
cp
1 .752941 .643137 rgb
f
266.81 372.224 mo
266.042 371.968 265.315 371.472 264.635 371.056 cv
263.555 370.384 262.555 369.6 261.555 368.84 cv
258.866 366.809 255.578 365.576 252.499 364.152 cv
258.53 364.544 264.851 365.464 268.53 370.944 cv
269.123 372.328 267.651 372.712 266.81 372.224 cv
cp
265.339 365.512 mo
261.451 362.672 254.971 361.544 250.387 362.8 cv
248.507 363.32 249.066 364.464 249.77 364.84 cv
252.811 366.416 255.995 367.712 258.995 369.367 cv
260.651 370.28 262.099 371.567 263.675 372.608 cv
265.643 373.896 269.738 375.809 270.643 372.32 cv
271.354 369.584 267.147 366.824 265.339 365.512 cv
cp
0 0 0 rgb
f
266.81 372.224 mo
266.042 371.968 265.315 371.472 264.635 371.056 cv
263.555 370.384 262.555 369.6 261.555 368.84 cv
258.866 366.809 255.578 365.576 252.499 364.152 cv
258.53 364.544 264.851 365.464 268.53 370.944 cv
269.123 372.328 267.651 372.712 266.81 372.224 cv
cp
.517647 .317647 .137255 rgb
f
295.083 367.527 mo
294.227 368.288 293.387 369.056 292.442 369.735 cv
291.843 370.168 291.219 370.664 290.515 370.96 cv
289.771 371.456 288.267 371.264 288.619 370 cv
291.283 364.888 297.307 363.512 303.147 362.608 cv
300.37 364.136 297.362 365.512 295.083 367.527 cv
cp
304.978 361.248 mo
300.283 360.567 294.139 362.152 290.81 364.977 cv
289.267 366.288 285.619 369.071 286.778 371.392 cv
288.251 374.344 291.939 372.304 293.643 371 cv
295.011 369.952 296.202 368.695 297.675 367.752 cv
300.331 366.031 303.219 364.616 305.931 362.96 cv
306.555 362.576 306.915 361.52 304.978 361.248 cv
cp
0 0 0 rgb
f
303.147 362.608 mo
300.37 364.136 297.362 365.512 295.083 367.527 cv
294.227 368.288 293.387 369.056 292.442 369.735 cv
291.843 370.168 291.219 370.664 290.515 370.96 cv
289.771 371.456 288.267 371.264 288.619 370 cv
291.283 364.888 297.307 363.512 303.147 362.608 cv
cp
.517647 .317647 .137255 rgb
f
280.905 396.36 mo
280.004 396.652 277.204 397.635 276.943 395.679 cv
276.769 394.363 277.003 392.982 276.963 391.658 cv
276.854 388.035 277.483 384.428 277.401 380.802 cv
277.385 379.991 276.077 379.874 275.971 380.693 cv
275.322 385.738 274.472 391.457 275.153 396.531 cv
275.536 399.364 279.909 399.242 281.615 397.802 cv
282.286 397.237 281.829 396.06 280.905 396.36 cv
cp
0 0 0 rgb
f
260.151 379.288 mo
259.435 379.173 258.933 380.002 259.479 380.542 cv
261.173 382.218 263.643 383.324 264.597 385.529 cv
260.064 383.65 256.839 384.167 252.54 387.419 cv
251.981 387.844 252.638 388.605 253.194 388.484 cv
255.164 388.059 256.898 387.067 258.957 386.769 cv
261.309 386.426 263.385 387.059 265.511 387.944 cv
266.156 388.214 267.039 387.853 266.982 387.039 cv
266.75 383.757 263.491 379.824 260.151 379.288 cv
cp
f
155.128 384.971 mo
155.128 387.511 152.308 389.57 148.829 389.57 cv
145.349 389.57 142.529 387.511 142.529 384.971 cv
142.529 382.43 145.349 380.37 148.829 380.37 cv
152.308 380.37 155.128 382.43 155.128 384.971 cv
cp
1 .764706 .74902 rgb
f
203.628 383.971 mo
203.628 386.511 200.808 388.57 197.329 388.57 cv
193.849 388.57 191.029 386.511 191.029 383.971 cv
191.029 381.43 193.849 379.37 197.329 379.37 cv
200.808 379.37 203.628 381.43 203.628 383.971 cv
cp
f
204.426 387.566 mo
203.179 386.229 200.875 384.755 198.984 385.414 cv
198.304 385.651 198.425 386.695 199.124 386.798 cv
199.543 386.858 199.934 386.957 200.307 387.081 cv
196.397 391.381 194.359 394.385 189.956 397.028 cv
185.057 399.97 179.497 401 173.846 401.054 cv
168.393 401.107 162.523 400.045 157.504 397.924 cv
155.014 396.871 152.811 395.28 150.775 393.525 cv
148.805 391.826 147.579 389.665 146.128 387.588 cv
146.471 387.366 146.803 387.139 147.121 386.934 cv
148.108 386.296 147.028 384.853 146.042 385.471 cv
144.944 386.158 143.974 386.837 142.705 387.174 cv
141.953 387.376 142.168 388.493 142.852 388.611 cv
143.563 388.735 144.249 388.56 144.902 388.265 cv
147.385 392.81 150.182 396.05 154.854 398.789 cv
160.073 401.851 166.746 402.772 172.686 403.028 cv
178.685 403.287 184.643 402.126 189.942 399.273 cv
194.535 396.803 199.533 392.672 201.789 387.799 cv
202.253 388.086 202.706 388.408 203.149 388.794 cv
203.902 389.447 205.123 388.313 204.426 387.566 cv
cp
0 0 0 rgb
f
159.212 360.074 mo
158.42 360.218 157.548 360.139 156.74 360.099 cv
155.476 360.042 154.228 359.842 152.98 359.666 cv
149.636 359.194 146.172 359.714 142.78 359.963 cv
148.244 357.378 154.212 355.106 160.092 358.123 cv
161.284 359.042 160.188 360.091 159.212 360.074 cv
cp
162.612 358.291 mo
161.908 355.546 156.884 355.185 154.667 354.914 cv
149.892 354.322 143.676 356.482 140.284 359.81 cv
138.892 361.178 139.932 361.914 140.732 361.891 cv
144.156 361.795 147.564 361.378 150.996 361.37 cv
152.892 361.362 154.772 361.786 156.66 361.923 cv
159.012 362.099 163.516 361.771 162.612 358.291 cv
cp
f
159.212 360.074 mo
158.42 360.218 157.548 360.139 156.74 360.099 cv
155.476 360.042 154.228 359.842 152.98 359.666 cv
149.636 359.194 146.172 359.714 142.78 359.963 cv
148.244 357.378 154.212 355.106 160.092 358.123 cv
161.284 359.042 160.188 360.091 159.212 360.074 cv
cp
.517647 .317647 .137255 rgb
f
192.116 359.178 mo
190.996 359.386 189.868 359.627 188.716 359.723 cv
187.98 359.786 187.196 359.891 186.436 359.786 cv
185.54 359.834 184.348 358.898 185.292 357.994 cv
190.204 354.963 196.083 356.866 201.556 359.082 cv
198.388 358.971 195.108 358.618 192.116 359.178 cv
cp
203.828 358.842 mo
200.148 355.858 194.052 354.074 189.748 354.803 cv
187.756 355.139 183.196 355.658 183.004 358.25 cv
182.756 361.538 186.964 361.674 189.1 361.418 cv
190.812 361.227 192.476 360.755 194.228 360.69 cv
197.388 360.578 200.596 360.842 203.772 360.803 cv
204.508 360.795 205.348 360.074 203.828 358.842 cv
cp
0 0 0 rgb
f
201.556 359.082 mo
198.388 358.971 195.108 358.618 192.116 359.178 cv
190.996 359.386 189.868 359.627 188.716 359.723 cv
187.98 359.786 187.196 359.891 186.436 359.786 cv
185.54 359.834 184.348 358.898 185.292 357.994 cv
190.204 354.963 196.083 356.866 201.556 359.082 cv
cp
.517647 .317647 .137255 rgb
f
175.972 385.149 mo
175.076 385.452 172.29 386.476 172.001 384.523 cv
171.807 383.211 172.023 381.826 171.963 380.504 cv
171.803 376.881 172.383 373.266 172.249 369.642 cv
172.222 368.83 170.914 368.731 170.818 369.553 cv
170.24 374.606 169.471 380.335 170.224 385.4 cv
170.645 388.228 175.017 388.044 176.702 386.581 cv
177.365 386.006 176.893 384.836 175.972 385.149 cv
cp
0 0 0 rgb
f
150.789 367.652 mo
150.063 367.631 149.673 368.518 150.284 368.982 cv
152.181 370.426 154.772 371.203 156.004 373.266 cv
151.266 371.989 148.136 372.919 144.294 376.701 cv
143.794 377.193 144.544 377.862 145.079 377.671 cv
146.978 376.994 148.57 375.787 150.573 375.225 cv
152.859 374.58 155 374.939 157.222 375.542 cv
157.898 375.726 158.727 375.253 158.564 374.454 cv
157.91 371.229 154.17 367.752 150.789 367.652 cv
cp
f
194.425 367.504 mo
195.165 367.492 195.561 368.385 194.939 368.843 cv
193.008 370.267 190.371 371.014 189.118 373.065 cv
193.937 371.844 197.121 372.814 201.026 376.648 cv
201.535 377.147 200.771 377.81 200.226 377.611 cv
198.296 376.909 196.677 375.682 194.641 375.093 cv
192.315 374.42 190.138 374.753 187.876 375.331 cv
187.189 375.507 186.345 375.023 186.511 374.225 cv
187.18 371.002 190.987 367.565 194.425 367.504 cv
cp
f
48.8579 401.622 mo
48.8579 404.162 46.0376 406.222 42.5576 406.222 cv
39.0781 406.222 36.2578 404.162 36.2578 401.622 cv
36.2578 399.081 39.0781 397.022 42.5576 397.022 cv
46.0376 397.022 48.8579 399.081 48.8579 401.622 cv
cp
1 .764706 .74902 rgb
f
97.3579 400.622 mo
97.3579 403.162 94.5376 405.222 91.0576 405.222 cv
87.5781 405.222 84.7578 403.162 84.7578 400.622 cv
84.7578 398.081 87.5781 396.022 91.0576 396.022 cv
94.5376 396.022 97.3579 398.081 97.3579 400.622 cv
cp
f
52.1089 390.246 mo
48.6929 392.646 43.8931 392.934 40.5967 390.246 cv
37.9648 388.102 37.333 384.397 38.4531 381.325 cv
39.8691 377.462 44.709 375.614 48.501 375.75 cv
48.605 375.75 48.709 375.718 48.7969 375.669 cv
51.1807 375.726 53.373 376.55 55.1572 379.142 cv
57.9092 383.157 55.645 387.758 52.1089 390.246 cv
cp
58.021 380.782 mo
55.5889 372.934 46.2451 372.19 39.9409 376.661 cv
37.0049 379.165 35.189 383.149 36.2769 386.718 cv
38.189 393.014 44.2529 395.39 50.2607 393.397 cv
55.2852 391.726 59.7251 386.262 58.021 380.782 cv
cp
0 0 0 rgb
f
49.8447 388.758 mo
47.1729 389.317 44.6211 386.95 44.7891 384.278 cv
45.0693 379.894 48.9248 379.558 49.605 379.766 cv
51.9409 380.054 52.7251 381.333 53.2212 382.846 cv
54.021 385.286 52.4053 388.222 49.8447 388.758 cv
cp
55.1572 379.142 mo
53.373 376.55 51.1807 375.726 48.7969 375.669 cv
48.709 375.718 48.605 375.75 48.501 375.75 cv
44.709 375.614 39.8691 377.462 38.4531 381.325 cv
37.333 384.397 37.9648 388.102 40.5967 390.246 cv
43.8931 392.934 48.6929 392.646 52.1089 390.246 cv
55.645 387.758 57.9092 383.157 55.1572 379.142 cv
cp
1 1 1 rgb
f
89.749 391.533 mo
85.9409 393.069 81.2129 392.533 78.7012 389.069 cv
76.7173 386.325 76.8608 382.325 78.5889 379.55 cv
79.709 377.733 81.4448 376.742 83.333 376.069 cv
87.7729 375.029 92.8931 375.782 95.3491 381.39 cv
97.3569 385.974 93.7729 389.91 89.749 391.533 cv
cp
97.5732 381.942 mo
95.3174 373.829 85.7646 372.357 79.4854 376.165 cv
76.3491 378.622 74.8369 383.022 75.8691 387.333 cv
77.3252 393.462 83.9092 395.118 89.3013 393.742 cv
94.3892 392.438 99.125 387.493 97.5732 381.942 cv
cp
0 0 0 rgb
f
84.3408 388.758 mo
81.6689 389.317 79.1172 386.95 79.2852 384.278 cv
79.5649 379.894 83.4209 379.558 84.1011 379.766 cv
86.437 380.054 87.2212 381.333 87.7173 382.846 cv
88.5171 385.286 86.9014 388.222 84.3408 388.758 cv
cp
95.3491 381.39 mo
92.8931 375.782 87.7729 375.029 83.333 376.069 cv
81.4448 376.742 79.709 377.733 78.5889 379.55 cv
76.8608 382.325 76.7173 386.325 78.7012 389.069 cv
81.2129 392.533 85.9409 393.069 89.749 391.533 cv
93.7729 389.91 97.3569 385.974 95.3491 381.39 cv
cp
1 1 1 rgb
f
54.061 360.669 mo
53.3491 361.054 52.501 361.254 51.7251 361.478 cv
50.5088 361.814 49.2529 362.022 48.0127 362.246 cv
44.7012 362.853 41.5649 364.43 38.4287 365.733 cv
42.8052 361.565 47.7568 357.525 54.2852 358.533 cv
55.7012 359.037 54.9893 360.374 54.061 360.669 cv
cp
56.7251 357.91 mo
55.189 355.525 50.3174 356.766 48.125 357.197 cv
43.4053 358.142 38.189 362.149 36.0127 366.374 cv
35.1172 368.118 36.3408 368.478 37.0928 368.206 cv
40.3091 367.037 43.4131 365.574 46.6689 364.485 cv
48.4609 363.878 50.3892 363.693 52.2212 363.229 cv
54.501 362.653 58.6851 360.926 56.7251 357.91 cv
cp
0 0 0 rgb
f
54.061 360.669 mo
53.3491 361.054 52.501 361.254 51.7251 361.478 cv
50.5088 361.814 49.2529 362.022 48.0127 362.246 cv
44.7012 362.853 41.5649 364.43 38.4287 365.733 cv
42.8052 361.565 47.7568 357.525 54.2852 358.533 cv
55.7012 359.037 54.9893 360.374 54.061 360.669 cv
cp
.517647 .317647 .137255 rgb
f
85.3892 357.95 mo
84.3013 357.614 83.1968 357.294 82.1333 356.853 cv
81.4531 356.565 80.7012 356.286 80.085 355.846 cv
79.2607 355.47 78.6533 354.086 79.9092 353.726 cv
85.6611 353.325 89.981 357.75 93.7891 362.262 cv
91.0449 360.685 88.3013 358.846 85.3892 357.95 cv
cp
95.9092 363.11 mo
94.0371 358.75 89.4854 354.333 85.333 352.974 cv
83.4131 352.342 79.1333 350.678 77.7568 352.878 cv
76.0127 355.678 79.6768 357.758 81.6768 358.533 cv
83.2852 359.157 84.981 359.518 86.5493 360.27 cv
89.4053 361.646 92.1172 363.365 94.9492 364.814 cv
95.605 365.149 96.6851 364.901 95.9092 363.11 cv
cp
0 0 0 rgb
f
93.7891 362.262 mo
91.0449 360.685 88.3013 358.846 85.3892 357.95 cv
84.3013 357.614 83.1968 357.294 82.1333 356.853 cv
81.4531 356.565 80.7012 356.286 80.085 355.846 cv
79.2607 355.47 78.6533 354.086 79.9092 353.726 cv
85.6611 353.325 89.981 357.75 93.7891 362.262 cv
cp
.517647 .317647 .137255 rgb
f
49.8447 388.758 mo
47.1729 389.317 44.6211 386.95 44.7891 384.278 cv
45.0693 379.894 48.9248 379.558 49.605 379.766 cv
51.9409 380.054 52.7251 381.333 53.2212 382.846 cv
54.021 385.286 52.4053 388.222 49.8447 388.758 cv
cp
0 0 0 rgb
f
84.3408 388.758 mo
81.6689 389.317 79.1172 386.95 79.2852 384.278 cv
79.5649 379.894 83.4209 379.558 84.1011 379.766 cv
86.437 380.054 87.2212 381.333 87.7173 382.846 cv
88.5171 385.286 86.9014 388.222 84.3408 388.758 cv
cp
f
68.3936 396.382 mo
67.5068 396.712 64.7524 397.817 64.4053 395.874 cv
64.1729 394.567 64.3467 393.179 64.249 391.857 cv
63.9824 388.241 64.4521 384.609 64.2124 380.992 cv
64.1592 380.182 62.8481 380.122 62.7783 380.945 cv
62.3506 386.015 61.7515 391.763 62.6558 396.803 cv
63.1611 399.618 67.5244 399.305 69.165 397.792 cv
69.811 397.197 69.3032 396.041 68.3936 396.382 cv
cp
f
66.7251 414.325 mo
64.2852 415.046 62.061 413.693 61.541 411.237 cv
60.645 406.989 63.5171 405.165 67.085 404.958 cv
69.0693 405.333 70.6611 406.934 70.853 409.565 cv
71.0288 411.997 68.813 413.718 66.7251 414.325 cv
cp
72.7251 408.286 mo
71.7012 403.182 65.3569 401.149 61.3892 405.438 cv
59.957 406.878 59.1807 408.942 59.5571 411.43 cv
60.1572 415.414 63.7969 417.094 67.4531 416.214 cv
70.981 415.357 73.4531 411.878 72.7251 408.286 cv
cp
f
66.7251 414.325 mo
64.2852 415.046 62.061 413.693 61.541 411.237 cv
60.645 406.989 63.5171 405.165 67.085 404.958 cv
69.0693 405.333 70.6611 406.934 70.853 409.565 cv
71.0288 411.997 68.813 413.718 66.7251 414.325 cv
cp
.788235 .152941 .152941 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.1
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (1312.i013.011.P.m001.c20.facial expressions.eps)
%%CreationDate: 12/27/2013 3:30 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!#+;ddR,scSPTR1YG;!VtU?cK!?IBJO"a=m)7Nc3-^@JbiF.rs7T[3.WrA:i?l`m);fMmF,6o`<2EL[.c%hP;/96kV<[kG
%m@TZ.Q<L_5/VX5RrqtgMmAHe5TQt+0>clAU"P)(PUK.Yhc"sLeCG]*jg$e`OC,^W;^Z8=3K6"NrGA<nC03lpaR;Mh3X&KS;C5kj"
%Q#b:k2ju,lnZ+!b70DIdDKemb/(AYXZs'gB)OonQGd7pR&duU,(>^,9kG;dkO`-M"eW9IO27)\kd"anM00dfk.k.%gZTpaPEktnm
%?#IcSWD5,CZZRpT+Vn"'FgO"$.u,J"q*1>EO8MZFU5&/%b<#WPVd'1.ptJ?-.8/gVhp5^@6TR3B2#V6h&+mRBd'CHF"9sp=9"ga5
%"h[ii@AiMBZM[Mr+(8g9"7E\c)JR5`/N]8hp77Fbn3;%;s&+8,gDkSk"b3_OSd,""cqq?BBs\@Cs.`juUnO4fg?#!tW`j-Lg12=5
%2Ia-r%*A]bkOYfrT!pT^-3(I>EKkC3#;)[h>.KW@=@mdAptL^MALIL@!7g=KP.c0<4fZ3XKe?RV6#Z<8R>.$u4?)%DgSI,//%1)h
%Ql#gqLBG0@S:.-K]gh8!<*`Z#BO;cI<s8Aq;(?bQdkt$pr"k!Ip1"'bL]=8Q8oV7C5rDoYDOb6]A!F-mG7QG$B!n#.<NlKur,[L(
%]Lq6lY+;V#49+6rBS^h;_86X/05C,FWJZ9,r8WM/k+1k*g[sNi7]ftRY+F2Cr*pmKXITQpf0Q*1CXA@_;gYELkTBOs$[`:[7u_nI
%`h7fOIF@phrSE>2$-l#%P$dHXr[7[5)?)S:pN/f[>BC(2f$3KhTNnP<#*)mXeRIf'hl%n?I(u2Tjr5cK+W>^*oSn=A'?WA2GM3Z=
%9;GK6,k4C[Ve:l;3lHJ>1f_8462WU=(7W_8o$<oH94O,.&&21@CZSI#&e,[rM>g8[\lR1VmT!hdNHXn;F]>E,4,At.lDMoS2d5ds
%`(Ued*]*or34XZSoAt#W]TKC)PR<&_+7OV6d?&8[;,MnL5%qt(T;'I(^R1gB66b,7QAG>G3S%:*3W(tr.U3O33GmgrV-q5E`:fdf
%W[)=XL[@tikj2BQ;MSSE3kWPcd>XZ$Z(@M+m1U*DE<3;V4An$"Rf%F*q?a-9/P,^CdGLo<qU_4mSJNQkq<qRf!3)K,Hlqn-C22_"
%9"@PY/eaBdV:0T<+HEit*A`[E^:-nsU/Wa'Jh$LK;@g3m)+QpN^KTLq48l[^h7f5%E(E>scb$f:bEpt`cTae.<:^jhJZ33<P7#2$
%"<`(6*sfHD"Gjfc`R[HZ5ZGM?#3I*XSR8`:5SJ;\(H=9QjC6-aB\:W*\?cC3!5Pboj+9%mI?H&20CgLeB^eX5"Akf@;R.$5)Gb1W
%)lI4u<=?WV>f]tkYn7F/*Y+Uhm*VJrk*s1f,P]t>aHQ,:T)RaOc57!n[9_H9[.<++,f_XrH!E%'CPT#)WB6k@CN;YL,a,soeU(Q:
%iHU=dX:[;DjWsC?m$Nmf$sU&eeXB!Lr8;6&dtk.%C<V`M;kVm+!jYi;)L56*'5U:=laWn[Yh!\+JgY#U-'2iYi9uhCeO_t_V<TaX
%fF<Tjp@H.U=HcIc"NTU_Xb&F6d0k2\$dMYNF&Qs#5a\$]P6T7dPab?FcC15CB8o%<o&U[q;KI#?\HF8UPhL-a.!BLOc#(#%/N:0#
%k-j(#QCD/aDV:BXCG$J9PA\]LZXhB.!bQ363O3`bJo<sNn025@rB1Zs,uUD*X^WpX<oQft6u$>Hqfjsu2JZqjrh#M2_^*bHCX#ZG
%m:N\hYAOc(DR/rt"G`nB7-#-(.!(T7f#42B,[6C!E@?iEF/YY#21sHpVdYJ/qB!O4Q)D8'SH[\o"hk!,pVh*`V+YQP0.69!Wda!&
%\HHUfc$&+u?O.,Lq.'JJFe?"JT)o,*l$Mf+kN4/f_0@Mg"9_4[\'+S:[T77Ro$o!^om\_TppB)^DZ3S<<J,&ff_K&M%?>"(dh8<e
%dQJ>VQ3`EUpJia`ah[[Y!\jU4Frb)-<iWTOP.;d&IbumjePY."HG`]34Ymle81[=[?737[CZ@H1J]Zc:BsW)f(Zh#@%ZkUn=r3Hs
%PpCl<<Lb1_]Xo0G:5D8h:?1F:ZP290#'ZY`ITA)/q!.DY)/Vs*bV6r;lcA9'D0TBU8RO5")hoX$j)WjO!.GR8P9sM;j6=5emiLYH
%mKS[B!199KD'q?mT$@6/XfIh%q><#2g$S$JSL$lWR;g37Y0W;ZL-[W`,bP+\V2];n<o.Km_>b.$,A00#8P^_Df%nC`9C3ud*-N=R
%jq^T</iR9hQe>!Q8cZcYR.j2Gitq<Jhkk>C)YFK&kY%R69V<7YB4DV$`b'dIrMD)IP7#L'GtlLX9_uk5SqTS\dfb-ZkrIX2\>A`-
%%ep`N_9V,\p]SajP[9;EOOlR:(ZQ0KJk6b41OZn81l:l\21d1V0[h4jVS#11Ydf)YZm<>V0]m]gZbXHkSW(Zde2^5g<n"sg&cctn
%DD`1P%MD/gZPWFP2(0ONAUYF?8[,PiPB"F*8J([05(*=$N*4lq9$MZB?O6.]b&4pWPp3,hVr88A%]@4mM4QFop&1k6rAbd(r\KC#
%)KqWaN]?R'2M")-H=YMB$4Qnd*[gDl?,\'9S%g8[LH1?J58)Ar`1Ql/m[NH$oa-/:p%4KTKP<J[V/eS!##]_o)k);"S2G&H,]I_3
%EP^$.=A'YD9tj^\iJ"cE&9YRE$`[sDRKTEQTj;A>&YAFm.b8lM?mQ@REU^ie?SE=l+meV]/g(gHb#U*N[8@kb%-:AEa="LL:rnt2
%Gb6en31[3^gR)CR:HU1uUl(H0)Ohb7!0#Cb4HY)gqMblII/37/pB9E9p=%/C''`':F0(Zr^07N^ilXp/CBZLjQu+0*;7mdf6n->X
%-;"nYVT!s<cU=0Ls6M;O\!Nm7f$rfU,iSuk/n/ER(SrfY\L:%"R241+jgccGe?UOF7@=H'QKVjQIP+6$Q?#ic!&MqiRHL=B)q&>i
%M_]"TcIE4LZ^H`7La,[-W1BbiPU+%<MafkU7Hr:&-R'?Q&WKN_WLp"lPU+%<bGkN,;4;4CWCaI`f/R'rgrnq7SsLkCCVCJ2=.E`G
%2WD3K@[ns9WVV=:m?8OAKK8kI*hmA5?V*A/o1D5W03IpPMQDl(Z!OWVbabkBLT`^Z^6Sa&F1sQqCNI3J'msl)5qR/#D77s%!1Q%4
%C3-QOhr\ZpASn</[5h<XF1)$)=,TS%:<!k&ShuZW5f(ddQ)?)33'Tma5=Y)=(aVG`r#!\>;&@LT2]gq_[?R4)9i9JfO=4$^eot@q
%&I[AIr=bFibPCTSA%;+iBscY$.^bth5GkT.91iPK[$5IWIqpM0^K(-"rcaWV8BjuNmC]sP'GYg0`?;(nZ:hNa\gX>iS#WJ:V.q_E
%.oh?hinK_B=qC2+>bW,cZ+a^XP=\BCbU^F*S"RtU^.b,5oIlSd@s#?.b$0RtM&mS-RO%lCi;=D?prB06bZN(8+am)]WP<W?B_!gu
%f.-GsPLRjjp+S]'PPf6eN$''+2jIVjh^Glb.R>QkWD+*d8DrC;*#<4F6\8(^EH%e.ZR+2JVM_S%;Sg!k7qW[O>t7C,UE^l^%)YsF
%]3m<?)hoVnjO0D9+ZYO5LhlR<WC[;_ht3DYJ*6@Z3*_X\ruFJc_+CE`R>V#"aW^e&BWDH]G96@Ha*`A"=L0+@S]R3PjtYb=b]b-"
%S]?-@1#L+HOj7IN^VCJMa*`YF&IE\I]5^<_pgMTSk[!!lSBN>Yn/"`1BC-tJUJ/r.:Z1Y?5\Fk4P47!I5kTO[_9g:.,X"k-]uL<,
%pRkcorB2(+Ep<Lr73.[%W+2:s]&!rErg:qnA<G,$q&V:7gXYmb&6)_&+9\`Uo9R[;X5?OWEmS!,"NAnp,@;H0/XX/qQKG?Vhs4B:
%^bFsNZap,&?e/]KYN4"-B64++aHAUk6>f)WrftiW(@+&jPOBfJ.K@.\V;3'`fO1'D$%%]c9p7*4?+9uV44`2OS/</+9(#J$g$<^O
%d7!kjRe<==H>V]OjjoL7Xr1htc[l6Caj[i[^0\]1f)Nke<6F8%DZ3Q^F7394G!;<U?H2GY;/R.h]I5EAqd8KGQau-fmWb-]?KR97
%\`78hGaUX"k)PdX_=99E!BWAg4qlsA3`H=0<-s^=Y0b+p>V6]Y5ao)bftZ>d2GVOS0/bPI*+9V?:&N!Y$RS!ZC[uaS\^]?ZQ\P?-
%VpWDSUq"7:(R[g7lmKKf6kU@9CIKT4_Jq1JJ!9t0]Ni+HoeJD1EF+31Z@q8N!n1rma(^LA?\:kmX"V_u09(l`ru9LT1>=13(\qP-
%n+e1cIk2kDdknh)5B`UnpYEt6V[/^elg+p!MC]7tTj?=bs%GIf:&G;hZ5!ZeNTEpqJt[@2edP_A%?7$JOEF:PRGVKks,/eNO6l:N
%)?Z231UHp[p=r!(3=B\,[r7>)cm1Zm(fcT,5U;KC@hdM*V'Q-$mntl;#+b$<2IO`S^g%#a'%3M7@oK3&@t'A^Z/l.%m`1[r.rF^p
%Qq.D5S,4oejb+o4MRag=r+CKHa-c`Y->dDXIZ1fZ@nQY9ruDKLPu!WA3U?Cl=X.9eji];lV'IM[o%cia7)P'58M6R,b/e;2)/M0^
%YO.ud8><TdoH+lc8LhYXgQaqUdr1*.A]-Zk$`Loq:;7]GM2]>QWDset<:'1"T\iVGS7mPdHB2ou&pU^Z-AaVe0XK'uB<'<T,)1Tu
%W)]!G_VN38ah2rH'NGZ9U-_P'nK9ESi.7P%/W!M1)]odc&kLJO!bk+R+O/(6rBA9J;7gi%/ed]E:8d$o<Bj'N<_p:ApD]$^N71dR
%]h;[Q7qi%4kk<N(HR/]$dZ_AO=\AB["O'!]/*:r@LepE.&NL_PDtuWY=_`pobGHq_TZq@:+[K;Te:eQJg(TP-21&IfF'EOfCq4(U
%2RhhgF'@_Wgt\?f>B=k$DJm_t?>D0Eg-=oSge=T#-)aBhV<2"aaQDX?gmjk'F)uD?DU-MO\QLfQQLu+Lk`Ps$kpDra9.!pg@-/fl
%UmZ>F[9E+5O\[1PBAK.P?m&-_3JQ44Uu_7bA=-bDVWA]*WNRg,YE([u#CTo#F2D']mAbaN;olV#9nA8n32=ZmaN7ZB/#VKViGpe%
%9so;]:hkDc8`\TB[_A)lGc=]XERA(/-cr:K*$p8N>)puG#]D1gdEHkpP>]u-WrbLd^h;Za@@CotTZMm/Za7X*VYe'>"B#&.]5a,i
%"G_\Y1/4FBqqU-*.52B!^H+57+@5Z5"a%1RjTjk1fQ4`59JCRo!D-'c=7:,pp%LnL>LR/.kc)Jj<B<Sh\D@`Crfk[=_qRaZ0I\F!
%^Cn,i@suC@,0^670)r[aV4B$5(A/X`4FCb\:m:'dWDC&;Zg=5n@DJ_s\I`?S4,PE1[CNh+pWMrrlT?(J2&b;PCBk/f\o;/_TsFBA
%1,en?#lS_MS,^uRe_jU2G!;<E7<><h2_%7;S`lCnjA;E+WE+mgc@pa"2.GR1U>M?94ScTFD0H_lgY&-9PZelg+AjTZWT"0i1mH0l
%_>ZD>kVQU00KVj_adn<QcdU%5epb=i<:-;IX#5H.G<)a#f9+H.qq)E0ZIB&13S?)33?OU:Fu<td*%-QZ-=&SXB>>06(U%Pdb[ogF
%SsW*9NCi4.Us$b'0`9O5j"u(DkDp'IWm^KcjQcC(a)>8&<)UXCf'o*hP,pJ8`7o)kQTikEM+/9LR:9h/PSY[HjCu+,AK%FtL[-B`
%rFaJa;9NWdq9L>,/*o5)-Yq^ei"PsuGt#m3'QXSpcEhlJ=ds4c1##,\AjqROrAW`UH%r317`P!M'Zp,u%[uqS8HPr2ii?YWrCcln
%a*INZ\B)V4jjm^);4De7n0;RY$3G)N,ljm=RB-TTh+7`qP/kP>;OtNCeP//ELkCoL2W;$6U8_4mB1WSaf%uo#NNH)gN;el0gYl34
%1s,/\Km1s9,m_CB^ors5+1li[R@A$#X+c2*A0\EKA8+!!V.Q:BT$5;mggm;.4u:q1CN9]M34KTKeAt^\B1ZE-Qp@+43S2=Ee?k(a
%3j3t(BIXuD!nDNQl+-+id-bkq>GbYs><"i>YO`IOhihOFRoXLQ8!%V$[WUtJZW`;/6fL!C9d_T/eU8?ibIoI-p5S"C</pqKk8uAB
%5Q$Ko^L\=c6^4Tg&tqFkf)DiC^Ha@YR4>fn?dR5TNp)^T$_lN#0RIP9Mk-3)(:"bP;Dfb+[M1oeL\!e(=W74k@4P]p]`)P8B%tBc
%980OJ)R[cHlAlAQ7sV;33\U0q#f908FV#7%NFG`F?_sMa9e6tBc1aI&cr/3RY:nE!G=pIb];bNH[8cZlqXFPMdf1(;5):COA@<$g
%/#!lL*$g_oYb,j@#/[cF%][J[\@<F]*haMU,7+X\V0@Y2^@J>@aO[B1G,[>-K^OnN&P6B6Ig0uDFe_tfV\WSrK?\=#Fg!2.;j`A%
%#i4Os:@!Yr3"GrWD;4O`dqN0q4cds\p2o3>][WE5H=);`oNj;1-D,Q-RN7dZS'?G765tiF+2\?TH<BccC<r(noJ+X`%ni16\\k%,
%MGpL:plA5dkU#U7RV.9D*7qP+d%ftgVX;bQY-5AGrm4BkY\g7?h0+2F_m]KmS'89r;\+_KDjGL]`H$cF=%is\(2*O?EmSP)!o3c(
%T^h8G\JEca\W24e41amK/l%^J3NcQN_YXERT\4(!m-Naq7a.A%!MS=6r;"B^@1_uFNk)TfqYB<9QtPD(_5E%Bhrk%^JTs=$^-a#b
%;+Ej*V99D7%&C)rO,)UCVmS:7qL<KJVPeRh$u42#>+o4.Wi]O?7B!_EnfV`Kn`$0H=ueIY<;$>W%p+:\F//m;>JpB5=b^Xj[nj06
%1iAp:go32-^?$<YeWFGJFiFq:h0.1\Rbe"6H;p#q45(OHIcXbl1)O.KNE6a9?()$!:J4^#d5X0)T)')E*!WM]$r$dgj5#22;>`OS
%Xu,9YT-Qcm$%D/--R6`.O.?ibcP0Eo-"dVL3uJ/33",+cX&bVgp@hc_FJYC\dK^X^k:eomrYt%_E-)TQ^V-5l3m,^R^F+QGVgssi
%bGE)BY]6sS%t]3)WXVb4fb;6*QS!P@80d`sGlceM"Jd:S-$m"if?efQHo`BCp4bR\,5-oipgMW=8)@(`:2;FZ.X$EMem>+n4utmF
%Ms:7T@e9n;N"V<5Qe['.O.6s>nCdg'PHA#`OrmsAKmKAVb/'@V]*T_=I3K/O2W3aN!*f9=H-da($LXGHFtOAor?':Kqr$TPs1]iO
%5s*m0Y'TN>)fbE9P<p?9(hC%_HT`4X5F;^)F`$2"ptF#[9<D_c8^qr>J/c%Q[<elQ.K(onV^p>F,2aEBS`&n*9SK9J1+"%14t.&'
%fYMm/G2<Lnc-j(3:;!b/;Z^H*3=Ul#g$F0_"u2PPcG"3D7LpH;B)K7^PAZ4?&PH#LL?!=g[BSfHh\38T9$k]so;uG&>-G7Ls/-ZS
%Z`%>YM9]\62`KD5%t@K[S`\*#6+pQAL6ioj/:O?6"N:H[OKW/XGQ3%iWt54B2VGlQ1Y[@nYMH4f>H*7&ZP>;2jeWH=B!'j+%9O$&
%faXAdUH[la,dXW=W@6t%7,>#D[`ZsOW^.l;:E2B.V.-,5h,=,*keis=ot6h[%oW;4HFk4Bd]a-5qT)Io)m.Rm^/7So$XtP07;P3B
%ooYdaOcXd'gU)`[ePi@dS;nRIelNsI0BC0eP/rT([:6h6%Xf%kM7sB_1nATXlM4noZZdU).f&4<YC>!&f35ld8<JgU7l/o!9Y4;_
%2S;h1nNMZ6S[toR$C<WEW:NJ1g7][<911W4<^=/$3-<d0gJ?AkFX!#]WR<E^A+X?NE7i$UJpP.^P(YZ/WCYj?AWGQaC[?88Nc`>6
%bc#SRVV-@i>J>C8R9o?6S>j3l/P$lcs0P[n`DS49>)K<(EBH7\ZfmY7X0#9W[O'htF:?KOEH4Ts.-6h2`J>SKkfE/s%2@\h<oXi[
%c3^h?c$rnO:,KU>GXkhB.u#0hN,d'KMY`t!$,-T)O?`#J>"corZ'UmGX`h5p@d>mG#!pjU%"M]C_,']&/ldO'PEQ3?$%',eaTEF?
%#.pnp/@"*hmT,/SKC[K=Mq5R?/*+n3<_`!9=Fl?U';gB$G-7lar:_E=CbYM^C5G;W&*]tb/SNXrB/0f!KlX.fFGm*N5=FMo"PWq1
%M1<q2o=b']2P5er"B(h,Yk?:^\94=YgO>,_lDU#k*Zbg1?uL\c\?9W2SJ-aOSf[:eUc.dt9<a=h0bq0ZHY2BBYF7al])i;#Bu[k+
%+E[mJ/mn&0,<rLuH82D:<k]<eq;J!L*G'(A2?pu1IKQ7G5c!98Bsq(Bh@KEK$)#7[7HlB8+1=tkC?6Z,E_Oi?=sI\8+o*tP9'taK
%r?U+Ol*s\Ef)BQImeEecqPP.'Z/82[4L&Oh%KSs_%47G/C8'E0g[<>SrkQe([HlpP!TIaMX<a3`,IkgE.h.i_]&,B`+a#,2GJ9-@
%\>>3VO\D1:Yd1G)R6>N&UV>/C.<_hsX<1Z@o4+E'iFg0<54a(Wp/,0S;_\T+]r?t[/+$N4l+Q/*`T"$[Idn9fZPYl780\%U55Lpd
%iBh%sC9eA0+ZhmY6ZXqe%f<DUn#ea?rM(H<I2b.fJ\=4WO4s%D0q_mmobE+RJLa$Q5jst/d2.s.g_EJm;Q`-]m>rA*1=^E[rR(Ye
%;=590fVe7iV/\qRB#VCX3qT/6H>[!l76P!#`U@N#N/:`GPqOM84IkQ45DjO$'UtA6l[(N<Q^c*`765.@`'V"YQb,<QrYW+BYLrk+
%PVU[U1<QhWL3X?V`:%+DI@9r&%G;ni/K?8J39bV1=P&NHfl'Y)q-jZRbEJeIepFU6c5($d=$+d&BmBW7%@.T5l)Dr+_^(js02Xo+
%Yf?!U#"BakUnJ#6Qfs&T[F=b^WE%&-koSgfM>+3G="_t"0IpmNB5*3SG?E^`rfqlkZJ!i:+0_:'iS2V-i+=42H,W:u<]OHMm!,rS
%i]:!;M@0$&,Q2g\Pp79rY:Gm3UM]_MY,72(^olm*036/7/]To5!id<5*RE0_^+g2FZrg@d]5]r\)3RVF);=fOZoMUZ7LU/eL^?4U
%gdHe7;dcb_XD8aZdq,o-1>2.u;&FFTGYL)&Wtq;1Kj8Rda1[j$rLV.h8Ck_STtMPg[eC+aN+(WO,4$W,5+oD)4,0p%KVMi^R\fW@
%+P0M0:F>=)Ps9<NR+sLT'J>QED`giP(kLo)NPL")bDgV?irL(L-#t0!nu\F_3u;X3lJ@,Zn1((=NFJ?p3H=),2nL'^o8LWG7BQ*p
%n43uP`^Knt0OL7C4T-j'Vo\)RL3DV2CWSYe)ZaZZ:bNX!?ZGe8;k_pXP*W(GMbN-?K6.B`ZruL<4alu0MKQQ=!1#`5'eZNGW,BlD
%dbc_[k&/$C7hRoX-&QW+>32g+\K`'2:2.Te.W^He_(F<W@0R6GB[j1G\D3uW]Wb?uX+e2?ITpe'</"Md*3_Kpip)0?UGlX@ogZ)"
%I]CkEUNtCuG:O:\R?4(c.uoTdS`;I[JHcfm8V5fiPpGQ5?cetiG?/RWMrbO5;``GJB=315Xg_ZDI2\YeF3ne^$/CPnI%W<6P4f39
%or:`)VQ7OY^=C>9(t&d%?qu!WRYK1OKMXNGboFt%W*f-??ORjh<HnM&H@]qYX*]s/L\J>Olg*J=i2f)tgd)S5T6e*'BAJE4olP!A
%l1JkR%-i.&a93@0;9?p^`*q$LFui5<@mjB2P?6(fYRj<Y\jXH/T!`m<2QB:=.UqBY`HK2cG(X8'?&@6J_mgb93'qOt'H>:<3AZa.
%\6g)VBO4,Zd^*3gIFa$P`kCrnC@,bOL:_Tmn,ii>-*DSH]Lj9C;oc^g.U1**83d*XE-T%)s5@;LRk[St<(Ia_l[a]<;!J1iW`6Zh
%b'51g(DSFWYLN&&4_q0Xa@KQqU6RQ4.MMMO`<'&7%-p4Fl=e3!EYqts?AWuU&b[JMrd;)1%%/+(3GKQZ\hu-6F]+F(=!81S)T:,E
%blA#_N9CU#TI6<FU&%pZFINu%eDQ.UT;pI'!Ph[6b4.Vp3@i4V$lqE2ARBOLTFq&kkW.,:AE%#i*cXtE>S"I+Z[LZ^s-6SMab/HC
%jPV2B3\8hKKFXi>Ua/'I/Kr;s0(uLCo\JhmS;p()32VjK$b]'(9?+UG&cJ7*,?Gi<D[=@Y;aQ_J&[.'MgDpg[Id*Jt]H8uUK#A(,
%iVdr1gh$_Vf'suRo:Rmtc/-c`SK,*/eRHS83p8,L?&op"H9Dm'$V)#?a/OG28.e3_.CVjJ)*3WS^'La<VYL#ZeJ)E$a5;T4J:XWh
%:&LA-ekUi3bn287UcEbSi[L>e?.ZmLC[G)lFsL(gVMI/#$SOjO4\*bh;H:G(`R))YU5>WGWhbBI=u?^f#Z;s\'_t]g0Ah1JC(<PR
%Thf3:2;<fm/9ndq@o#X.0UZ(g8&Dc1X0/"9(0#%Gg=8hqCe5/j[h-S:EhQ@1a#1$94(<2Jjl!dto5o*1-[*8\0u:$Xb-Cl(/fSM<
%?TO=]YT^0TH,@;#KTZH_+#QZUps;Ct^jW!,QZsAQ,OCs20#T<^1m7Ks*5YTY#``$-dFIAgpV:'hkg2b7&`4d\l?+QN42I)t4KI*X
%fp))mc.=9'WYBI$_1k99e8DBl.pOoGPorS]0)*`i+qk&1P&'.1>fFl35nfYSeWrhl"rH'ud1O+8[?N(nlDf^:`+7P-JH=F]iRR+>
%aH@4\WHrW!oS4b^AMs0"DAR$XdTPg,Ke-r,h-_/]#R=,rJ>hNo)O?5?@d/bi8)qtb%bmm,J@<Ne560"NiToc?2955X_'#XDS1>"=
%^)>Z)$#iA6m*S86Ea$_Sb"7s='343@4YKfn8Z$7`^CU7`)=^S4irFpaA_:(4a%OAJ_M;F=Y!ZohA3/2V;;=T%;BQT.asZZ^N_XH(
%eu;2n!$JELri==\%%(fM=&k+Dqe3u'PRYZVoGS3rT$p6FMd@K0a?\?d,aLI_ZpdV2nbIC2EOdeRK\J#B15/3b1uI$/Ih*`GjEa`G
%?0qe9qVAt9fBgj;@q+.aZqZ0KSi+mD(B:tP]q"\V3NY_FcG=D0+e5B)7N9>Y+[,&T^:?`hN5=unnY@MHGVPAJ`o_^&FTqAOCisgK
%X"lMXf:D!ra47]fT"BKAPOnDfLe%'_/(1.n;[YF7n:GIeE;!Js^%q2Rebm`=RugZVDRRuIfYu%\-+$sk9VKU:g`,=ch*-p5[F<VH
%gJqNnF7BVb4_Z\EI'o01hm#u]CrG+D10h$;-pCQlLNoR._OER0DJslFNaOJ[V9[iHj1RPC(Y=ZhhHeC@=aF]:fj!<8D`k"(XIN@1
%4PRHPZu@s.b,:`<S6&KFSXV.qYF[l1[2uO<I(6f#hIm_\X\E<W]<,;g9hfEc^?!S+Zs2jsT@3Jcf9Y^Hp#^>U!DTo7\oXVYp3P<D
%3.LdFB78#3%^W!eNs`F>qX/Xd>W]p61ngDn]"R+;Hd^&bq7'kH>@,HOC-0\ap0m8rnW@n!]p5pA*H-<Sh`[iNEbF+4dt+:MEr@fg
%oum(O1.U$ilf#1iqlP6N?b>+i\A$Bb<u,jM\(b*p:PrdA%HD6i1C<L)fuITHUV'o^ZZ<KodE5e*n+85kI(kdpkW</'f,ig4Q@W_s
%c0VA":Gr"7cI^ipEVmbqZM3H]k&C-.<>P*O?Yn1Jrg/>X_IgW5\WFM/:0,t%\'7!m)_[L@0<SsV^=p^6mJDrN5J)3G=t&GbnQ0FE
%o5*SVVUi-[H+-Y^om*D+kui#$I/EHiji6;8G%Tq,c;t!bDgh<3Kh9`QX04ajB<$ZtQ,SNjWt4".LPI2-IF()41QB8[^3I2_7me&4
%c^M$DF7.l"4Z9_-8h'W[:ReHS5$V2r$9$&pIRRXh]5r<^]=iCZG]V!9;+rjVrSG*\aN`:"/Zuc>^0`TiDgpbe+'!4m8<9;<2mFt'
%SR^ho'rZGcEI#l5<Wr91\>/:1Dsla/jO`g9h,o'V^bcOMpr&qH(RdfTrG10IIk3e;>#TpQ*H+-.rn4-mcSCsZf%;;VI\SJYHF14n
%j;spX<!+.*>[&e/H1?`81KlMm\$oe$dnm6-B@.>UG*\dS4?Pm4^u@9L`^]BLd7l+CA'9/\HmrTdEaKT'B+LS`h9>'NhV)pD?bQ++
%DngR_fun:"kKXQ1?e<&A>WJ]r2QXAX-\B]h:@[0&M8&b2_g7O"gWFq)509,)3"K'9._!a5Z=ioS_Vq99Y'X!HFXH_j^K-q=p3,jg
%hoab*4r<R=\<\?>&nohE0,G_Fc@6Rj*][PUIJ'Q3=6A^LX5+:k%ru0I#WLd<j$l#X+e>:>/5!Tn^+8&(2a4E.c=pK)ekN#o[EiVm
%3MMZ598a`Hs&8B8FX&iZ\`%-+q)lB)[M_kk-B>*=4&7UZcZH%R[Di"-kH0HEkNRr6G4a(iGO*_HXJ?d[:A_g;[MJ;\mq"/BK?MNY
%Sb,s<?KiHBXYI.Bgan%RfBIBWmLX=rmq'fu2Oj,LiRL66I:jPom_f%Qo'<Hps*Cu]]QEELg(s]DGb1aG1.Ssq7:J09r7o<;gWMnK
%jfYk;:YrZqFEf\Qc$3^bp6/9fJ*Ys?H$(WM^G?WI4o(%G\/ip%Y/8lCB$PQYSE7H9b^7e7e(75TC[T%%qYcC,X^Yk:>^]o$**p4f
%7:SGeN!?5!0%F8F>BcChpR-Z?MnAW7a#b6cim*6eSbI/;GFpq'hV*[f`6HnPSq\5UApF=FaP9r`J+s6Grc@MW\iA!J\m8umpUcVL
%3-ns*^6Fu9R(IM%!iG4(W'/V\2D,g2V6.-QqEg.k^H8rtO/%D>98n#Zg1bnTiSiDKNo]I#'a24sEmJHN_-p[Un+5Q(G4U[fGN#F4
%Tsr561P_TpA_!u5k4AH'dqkJaI""ff@->giriU[43G]d?SR8o`GT*thef0=.40iGfKDONng>fk_eNGlR?dMS5]ul^dDVWqKBkR)d
%fq!9`ogjH'7";-=V^mi$V1n9rW9mIF$_!sAQ(.<i%Ih=fJ'%_4%X3kuq":>.*mTj9gP1ZQ=^0a'mH*,SEUp9HM(WT!)?7q.1sl@`
%d-F,5+INEIG)rmL/cS]?`@?)JEqXcQ&\o8j#u/=!$HuV<]Dm!I#]6V)>%\`pUDHS^U3gP7In&H=L=8P_o1,kF^jnQ8@$CKZ!X4_:
%o@90>&e5eUd55W%gBSAThQ6hUqZE>8ZP2:Sne(BA)4U_9<-;^3+iDk+-]]$;rFE\fed"S6B_8aSUA;!+8=?m_T0aJ."N/;j-uGXK
%:'=XR?3]DIIfMe/j6NChb9n^VaMSM;ke&h[Y<>B6_Vmk9ZlVaU/M#Xe4RQNN2O[f?]4Y14gc9d*kg#K:D=+).nT'+%,;\9!X@>k<
%O4]8M.fU'#!?V"3ke<L!)!d,O*]^%'6/7QQMpCPZLf(T,3_P?QngY.i:VXBZJ&rH+&7.R"lWptpGX$9AqK[4!rGHRBG/0LXQQL[R
%9%*<YBC#0WgQel[pX9[h!6km/JE:"2cf?_1O)M`nc^$bcXD\k,^YTRU(=P#)f)BW0-a&@Y*j`BZCTZ@NiMG\^Qg['QST')UhM7-<
%la"R<S*R9H0)4+Xp;+AroB0I>iZN*."IXmWDK#LC;r\S7D0`ghG>GQdVT$[cXaIF_r->?oqs/mLm_'u8olY\hY]TMF_c\a\A#?*:
%EI+2amVb;VW*HDh4_sp8gaMRVK=;Z'mc'Z=frm)[rUO"V9[pMb!T$rNflHJrm_OYe('Xr"FF!c>cPS;A//M?[IaWI4@(CsU?pps:
%!)<sg/dqL(A]KDmb3?oE[1BHY?RiJJc*Il1E'(#`$oN*\#M\",`V&jjmeMTYQY*aO]('h>rV__B[m.<'<<h&o#G<PaW\F*1Eh91M
%gL&``#BMR]J3:4CRHd`FFa<-uZhN`FOZa^`U!_.XL=mPudRT==5<9$F2Tj>@HaXAsRZ;[?^XQXEpZ1mg5j.Lq)VcD<qJ3)'V#JuF
%mk:hI0=o3[).LLbh,V\]8`m7i^.=lgJ(4o3O8"V+=#YM<c5tdP#[`qL#j6a.mdau`ikp`j>4K^+8-0m^"E58a@,l9OOURNR1FkL7
%/$KsVD-RtiDfgGaBO4ml<lu>hl<0H"m;-U@D15#GUUXO#52O&b[97A,GT+'iMC8&(FR-bicRnKGgN^9D:=A0>jb6lQqsEdpb85r;
%@?QC1*.K[XRVR+(pTf4YYO0igjX8<dT[>Q<GW^=bs4(&s1_F;:XZ%.7YH4#Fj2X:"WqL]11CV(#G33GH@tX7#2kFnhm0ucsHI][U
%[1D^jAc1*AbL$hjf%5!m,M(T2dX'rWB2?#)hcmCBFWHYHZrF,i\2r9r3k9Ip!jJ-ZCT!f)lc1Xpn#TbF*gT>8qHoWFA%]D!ea[`A
%pT/B7Z_FgU]",*A8@h8<\SJQ_a4P>dG??,rcXtZu2EQB1X,h7:,rinT/_84QV.RhXpVZS!"7=e(f5/cp$+p;DEF7QF@3-J"PE_O!
%AaZjuHT,=ECu'HMho\'2Wu#>#+$P0ObS;Z-;FlBIIuubk=Nb9JhA"qU>eBMS/IhmQ[N.T>=+\bB!emYPq[YU-kl[I\4fkqA6IX#G
%04&oG2buWnIS\-O^Tmc\j3p=?_Cd%t,9H4,\kU98[ipCL2btO..s5VcbeN&AM6B>Bc8cRepNX/rfIbFGX1Mt]#+M7Y:/=Dj=U"7S
%]=1pFe37EE"ofmR_IHC6"#[i=F+*HGX#mlZ9'Q;/rVB5LoCDn[H04$u&Ve>igJ:#E)jblU&Q`@.^c["+gO?nY*u`3$G9L;+FuX12
%hU.luLKc,bn%?o9&^!#ShQ<X0Z\<`6XR^JC!36q![kERnr4c:YDB3$lR+3CcHI1GP]^MB0jW4&qI^8KXrUm9n/"1d>[e]iUe(WJ9
%!(#@0l/f)*mbZ=!h`k7B@mhN-rOTUJcH]H_G@0d$Y.'YKb.W4LIh6R)rTltAB(][$rJ.G"]tWsL.'2k0FBK&:h7I44gWGHGe^ESX
%m@@!gdag40p=@83Q.GoGkk?B42LVrSZUqH6pHmB!a3L/%fb`>nO*_.#`BG2!hNLS1omh43rG,)D<'tA6_XK:OW8dToJ:0u;6%//\
%&%B8:?-ALWm#H\!2Y,>A)nE;mca@TRY?Np4\$_R%52*.K+sc"ad,&*2;"o1[*pB$*Q-JLXWuL`A>-?Gb[]nUjp=nNPlP]G,nO;li
%s869r?-p13K2V_Bj6dND!h\=]C);6kJ[B<XM6n]1kD.@RBj$M+A#/\ZTjnS,')s_nH'E=I"4ehqEb@%p&CSEQe9[bDgra4mSo82l
%cOZW(HDkapr!/RV_-Jhj^T>16g<OW=j]\qN&7<0IfD<X0E5(bj)^k!p*&%iTI.qp$LmI`fP/8^F?hYsa:Wg;7`CK?[ViWiEhlXVP
%G0;/6\_2Xos!?(6QTON:c]6_a_&k\`g:?iAEHuuo`L"c8k"br!jSZDcc)T,bFDej*fYlUEO?Dm`K"L+L(W!#q+h@b+Nfg5dmG-/d
%c":kXFDGsbhQ>P9La(`*h5K['ZMTL@j^0:Y0&No8[Akkke$EqU%X7OfGBVIYHVcf)`/`i#oAf!]\$p6;?Z4`teB4?4)X.9El]W;O
%^PCaoS#u&1A$^686Mgs*K+%FUW*W];hL$bdL4+?0Hh-BD5^J4SM!)59qHYlqGBI\0]6F_doE2VBRp<2k$&1ipZ"#"J@3Y=B_EH4_
%X<*S2o]/YW:Z!kJ)Lm.F^@nLS1O^`>m>1`k5):@[CG*;A*kej;1\UD2QXC^-J8)M00D3e[EAUK_rO'%3h(72YRX-uBDZIN>B&(;[
%/_YuhqjCXMCgkCAK`1)jYV?naWRB'nFr*l9X[dSQ,W`5:e?ARXfE$g+p0*B7o2.B?)3;75&nudF2@FFBG&I7mrG1&2W<Pf;&ScX_
%G.l,Ya&(l"I/*'aZP\9b%"6nZ]BcrYdSKsA#E]>eIN,BK?tK.MXV&AfpJpQD]r,_3bOs1EG(,Cu@\WdBo2Jr+)qXQ/OH07#.H^fO
%1i=MiULapM40@;dhUc585[CgnATu68T'"=1i@j@==ZSJ[>FXKcdp<LEldLJ,2Q'X&.X1<BFoTGFW(7#tJmIBnRq^_u9QPo^Z$O'n
%\9E.ZE;4/CWd^"Pkr_/E78n-$#>IqA7'du=YEcTb`>/%%d11pR5b-r>fb^.WB,31ZO.,P8%\j0m"B5mJ?J^#:$g,E\d`n%7V<`lL
%[SFsU*+G:1H/3mi^7"M_1g:6]05iF)>CN-n?WEPq_9/;U6%*]*54t\S'iluU6U*1+h5mrRnP8E50aY\_pYF$j;c3[4g?Mg&B_4(>
%gATfZfG@DDR4/AINj$$D8BU_df%0[X&c6#6W&U6)*O^nE'<i*mM2%$";Gu(h1P\WhZo@1BX'O1.NG]NcJ":,_jn)nV'qHBi,Pb:J
%2QY)2d<Y]Uj(lthS:-j>G[L@V-J2\kCG3q.\`_;jref^\]q7SdgWJF,>[RI)MDS6*je??<I4Z#ZIs4InpoL&I.,2dJ/33`B]m9(k
%?b,@G9VVNU)tcMP2,")(J*.lD[&\0#*T#"(bamM6?Y`=%%jgDdfDD%J-Je^5[C0(36lGNpLeWTi8b'0bZ8qXI/3[<_s2o=:!j1Nn
%eibS8etB%pDgbgWGXPVj`PU#[Oh\ZG;-qh7T"K@CVFl3ag?A>3Us"ZlVsUV4+57UQi4-tMdrKTqaPtI#Dn*f*MTUsL4]jnFh1)ho
%WLf\?,<j^:j<p_>;DFKHd5C?-dVD(T$&<G;'8q4jmej(5m5T1Zb!#$_cbE`bZ9uE/Nk=):_"?f"P$)q0RF0Sle74M<`n/5d[A2OU
%dY#EjdbEq()/j4.j4u-b)EtQkShplQi<Ca]Dj,:ENC%7Gq,>4;ceed;7b=)8r^F+:Ge]\3Y'kkXqdB$=mB'*t<ndKDk2I-GT&mE`
%qL<ZpmCiOoR*Eq-LS9?=h.s.D2@IenHXlg,]olUUI_!N(H`nCc-0YKC>Bbq(DnXn1Id<PC=NBQEN!)bFQHh9V\`S>'lgt&7LL`\(
%OS-#YG>B'8EZah@e^Kf,LUiJB[l7gX((J4E5KTS@YVF@gfo,O_Ec/LZ4ml/L1um\QRp-9H2a$HOrk#"1$jBoXF=6&[-.o0ik3:9j
%h-lLQ;nmr?n[-B/ma.Bmc=ckZ>LKBLm.Sc,D!!s3=is\chq6i_]^X=aU%j^rG2l9^/2/(AjO<DfhU;R>jisi)JgT,J\g%fWiZ$3#
%3/F:.h4kiO`;TVZb0?!(ZBf>,A8u[7dAPI&\3suoW4?&UoTY)VFf0]3J$o+OQ@F>l9:FH*'L)KfVp*OWTnQMGhkNrD?[$BnNbb-Y
%?FDr>Ig^GSj]8?e%Pg1KB>_*nhTWnHs1)L^=+f?T`ZYFrb2pM@H&k7m10Is&A*cAET!s\tj)nmC)?(M#@@=Hlj`PBF4f45=G5[YC
%GU\(t3b>(/kOd(b(:Z<'.IL.q]o^f'kTua#gUYg+8p[++Do&5m6JZ!k$D@n[=t;DA/i?K;YIfJT<?H=*":@onE&PHBroWZ6s(DMO
%9YL$;H!3-Xa2)!5\o6>X04:]+c1X8PrpY$ed6.)$H/c<aOZq%YaApTLs4WS?]Q`GWk`>5BZTnJ7p#dEGC>iLa%C-gHi^86@_N+Cq
%r=KJQlcoI0!_SV/8;kH#D#r0DCeM5S<6`i""fgljXp,$=Q;<J\8Aj'/:"N'SQC_8<Hn0(1^4dlP)P+6RBi`Au[Bs@U/t2^&kr:LB
%*?+oYJNe%s[,L5rcW]&>@Ue68RaaIt=f57qHa\uqd7Bk$G(&8+cPAFtgWk\NNh'a:U\-oSi8(p#<d4_Skc*>phK9&19omZfqO$%-
%d^DooAZY]AbOI^%g4Xb'U%tgtAK/3;=dj,&PE@a/8nl^JgD*Dl;+E-R>:)Y<V[\R9%eqn[:Jp#VB:5-;J>X0H5II'O;cabXdF#tK
%%6=N3aA(D^)nr:TFS-YKi6qF_<_^&;\\'-(PG)gM7hYo:gTG;^X:Y,s.;dZPYY<O?e7b<:1%9qC=MhG2l,^=DI:9(nR"e)'H?ra>
%SBGlcDpWJ%(m^`AYZVg\oe]SY@JI8app\_dVqKL5R6'h5!,8#N9r=!T;1dpjWX8856Ad^M253ImDUM]ncdNW;*Rj.L?t1n2:OAZP
%m@5=V7]hto1C:[jU&+Qho`LnCfHJ$m6:DZ^g;JRO/=6VRFRu;sU(5lag3)"A4-!nY.SKnq^ND[`ESZaKLkGT[dC%IDVT'bNi@3O%
%NUFP"`oIr%kmY'cm;FNfI:FL#+G"T1l`)]U11OKCP:CuofT$Kfj8"X/qT1Th3ZWl?*Gc$6i?(+C%gaCC>P#Q,\\2"UmJ:)41;H'n
%>Gbu-&EYR8B%B(Q6^m?,.8/9,&3dqKWskY`3*V2`!f_I3U!M-m9\lrf^jsMSBI*Y7Rlo<o\]K"G>B!t1VD$hAiO;&kE>T<5C"kHY
%QgdP=;j0T4;s]B*<3m2a8KLDQm5t!i[29)B/hIT!F==pPVT@Z[(<J)QOB*,HQL:RU*`If'X>$AB[1LS:R3u/BYs$-+$YC*Gak+DW
%G`)da36'Q$c)1YVHh(r#N<,,M_:7a`[%4uknP_<(#O2CD%*p[CAQihKZj!o".`e#0"-71)5d-7RQ=^caFnAe>/A="+J8+:*Bioq_
%&Ut8s;`?Q"]TMn-c'$m=FA%&I6M41I^h:O4c*Ut`l9K#(Xi]!GL]Scr?ohk5hfdM;ds]XS8G9*$VC=V@UsOmp_KGVl:'8>us,1]q
%+4eT\_"ur_M6lO5B>-s=_Iib2(lq%!(M&>?#a=1Ia46$KP3V8i]c#C#*T&cc8[0Mg)-o;@/.&8?pbuuOB%f"21Z=@c".[cSRUsZ]
%[c)g>pp<f6E2.?V#1?IV_&f%mMj]Gm_g.Oo9+f6:O(@m^DdADITiTEiQKo-L`"b+Dnq_ZMK:>Dgnt_UF6mplT\d2/!P?;PFJ<iZ!
%R`P[u$ab`t\4JDA?q'f(]X2Ys_a^t8";7qOH^ZQ]L-r25KHSuA8$M/jROI=Jl4]uAC-][)PJtI4;eS:/rsm-W*j1?5KQP_K:Ng9B
%\'k&1,sh^BXs*of/!i^E3ropHl8W5$2$'ZY2;<6WRtbP=U'hNE73<o5Pc7]*?9U6B_%LPXg#0(Tf8=E]<Yj_`N'!*-J'DItgEB9m
%q@T?==lK*kq37s-4g_:]@+[#2BVUAFOOE'K2Q]P@0+I`/(<80Ml/_Z/B\I8o.'bXN6gQ_-hpW9-L`YmV3^J]OZ;<*qN"gZWn:bsh
%ht%[egYnno*HdiG)(Qt-%gJ(Cl-RU)3h"L^><#QWWu.kQEXblPFL'Y3I+j!5qU.5AKholN6t\8,96SO'FZ20cB<NR$n71H->#NLo
%B&J#F/\,nXR8k3u\#3h\Fj4ReV%0Rs//X6FFg<mP1EbN8*('O!((X9&jk7MOIFD)U)Q%5*0&nZ.-&OC,euUFB%LImqKSnc6VWt'F
%+bGS\HbS37:E:d$;U+qM;:*le7oQjX#`$,iZ$,:\\hQPua:?l^p_C4DP8_RHV`iRpTJA?.QR5X4Y`cA&X\Lbigm7cM`l92[q:L-e
%+BH_]>MBq5+[RTQ':8>c&OMqiju'r5d7\P7kcBSJq-/c"1*G)n0o78FbDrhYmGHVp>_e7DgN8V,:0dO*iPrGlSU?QOMN06[[92FK
%6:\+>o0RjdW31"ogn&,g_JD;#T+jqfft?d3i_<<7mF\'`9Hls=O/!..1eA0I%L/Oj2o-\3N9uuZ9+Ab?-QUn&0aXZ\;gG`^('](u
%iR#6O_m[5plER\tk'/l!VWXs:dfOWrAW4uhJrJW5fp;4-(i\hQcpa,mJsEEVCXt%1Qj<Zu/MPVW3leLIDI@Sn+L(%%+RGC'6PGhE
%fmF,aEK^kWX%Qhd6oDb"D2AS.$A3($f;;SP/u_s+:L@t"8I*.a.DWu*djuB^p2r#Nk@1l^.3oOZ&$)E*>H(9oAC9Gj@%IF]/WWY?
%75Y-MDDat.$3Ptd_bH*V:+tOe0qFTC;ZL5erg&p>fOTp=!oYcDAC<d'Djb3RAIY&T1nf<Dd(8DoJoJopF(Qi6'2)cGN+nP2NqIIo
%@ouFRU3<9Mo[t.i8D/(nBaRRIDIq^d8NbBXD6-N/g[]:31HecBFLB)rcjOb50a-*JUfFL,:Cl[lo%K/%".b2W.<%d("BqK$i'>G*
%quERgZ[]$"@q=2A9X.2U7R!>OfJ0ULf<M,O0Lrc_<iegj0`o5_'GW@+b_d36'G@dq+nq57)>1oB$;t/jltrgM*0>@",mK8`Xrr;G
%c8mUtM><u>=j9da`50<m$o/i*3TFcc7j8sUdG_?pcrLBK-p#a5iAb4Fi[6HP,4Oi+M?*D6VNAe_(#eE*KLS)$&W?k!LKU=OArJht
%?ofHSfej+t0<8QZDCQ`(s3A]OZ&DS-l%mldXDA-m$Zcd.9l\C"92c(!$+#FPcm[["WuN.3.8B('m&_t;UW7g^[YbbrGljJpl!a^'
%>3;rQ-J##8A9pb0k4%ePMVU&Ei><>26IY5h:XM'MGlRsK*n(X*WS@X-e&1B+@7-\Mhm#:HMTa_?Xo,i!^_L8).#r!u3i;=b5?9-7
%.lms^Kup$f-9gf#OTp\lJ-0+!HWB,T4,R6(SV:1O6&M_L',r<\[hDrFkBMa@GV$X$s/&@%'4fm0`<3&4:LEqfBR.b$K,/8'Rb.Z)
%.hMJC.l<O=C?o3+Vo]I=`#/4`7b"p+cB9mf7l\hp(m*Tg@Y7B#R&2hrld2*(0E=6Viejifk0Qr0fI*VO_M+=]&H386FjdimpLVnh
%cJ]&X2G'H=a%fQfY9F=YmQgk7<*D1(*K^@T]YQ36<&h)9=Ya4)dd!fW)7>3nD<3<&UX^e8W:EK4*O4S;_<Pu1nV.</oF`5oY`+k:
%d;qWc'sed*=Bm.u=A<86)pr%`2O]b_CapSX>Nq&M:_XKW&Yb3VZ&?HD-;Ab.,f[u%T0D+3q&/$HQR]aOWj%sa-UJTHP-#ZM7u9AJ
%6c"JXiUF\djV]C-:]ukul((%Le*#_%/md]"AM.;<::puJ-[k,TAX^i>s-OgRek&BC7X>OgKY#*Ki*M`eCoiW)Qt*@>K%eBIi`SrZ
%QADoHV',cTNh8f;J]19j76"DNKr5=]9WF(s$+i9oTfb@Y[V!LU$sRu!BPC>Yf_X-+]hh0Je]<-EZ[<oUdI!,@$"qBo(MRJu=qOW5
%%dJiL&WWb]]Zh0lB[L8X!=Qqe#W,G0]]bt]]d/[G>H5Xf9%$!Ai;fDQX5gmSg'koqiH5J4;>CNhGrc6>SY_"1U;a-@qB-FCq8bSS
%AhsLqe)n_4I5oAoF:W<j)HhTg!(CQdegMP0knFua!1a<MR_7+Hb6k"1Ll!eod6(h>I2+=[D!NWQ%FYPZiE,)YfjM0p@?*dna^HQd
%9etLX5bK2^$TS['$b@\p3`=U$UX8f]9hko&&d^B2;UZf"KA`+gqLJbI#k:SV&PY[-+LYMXNAMAB,2f+$&uXb(&rS`1!Gqj^cn(nT
%O&uu.$8>]G>,MO-%X53m,f0kn_0k0qdnY_`ommj!/DAJI@8K3ZJ<GXC!83)ONg)("JQp&0?sgDN#6_@U-2^A9Y?PB:S2CMq#20(n
%Mnf`:90F8Yf)\lHq,PmoCDkMN(RYkLW6g3%%[`DUV,(>h)VD<ajlO#o'V)B:lOCUL9_sA[Hl'lC0HQ#'/Ae'>kUlWbQ:M]nJ-ic@
%%S7&FUM3%$_4K<i_aKm@HqeGs68d971Di!l^?NOB;B'S8ptp\u+3nmNNoJbh)N]GZZNc,>^<b09'&j)$1"FZ18=;i2Q4<f/dH$Z.
%]MQaJ@<^BZOK[oHOCcE?c6;81#!a1Go)o>sE7)7jG5E*ma4_c>,H/Z@6`YsT%q4J6^u[#9OA":-$H-@>NCB)Q#I?jJ';?DY0ZD=#
%%Hn`nTIk<m_<Y6]PC``VAcfF$>;Cg771!L\!&MJ=d'*icYNI^jd[7INPAqoMJSRNG5s?4-ef@]_)]uWU,9f?!$CZfM%"Lp(cdNU<
%'A;kY#djpmg/-dF:Fn5-=2tEM"ic;`!C=FO%(!_gCR\!i0\1ah>n'._KBQYa.Ztk33=\R<n:sf7*A6/i=iaX2OVf).-h_.<\VAMQ
%:+oBh)a`07i0tf3a[F\k/3KuN)d2i=-<8181iACg\8?=C6S6t8)gNtMngG3-[?XbYW,lO>d:kFc-/i]Hfn6*J>-O_lBLBIfg&N`1
%0'\?<BZi7)^Ut73M#jh3iAVOr7sJPM1hM%;`f."N1;o9N2%b\4$oSbl0CE;ISd)!/WNRU+MkJUP^2<-*[=rE58/SG#/7sf=8Sk!E
%d"K_KY+ce,3?\\1+6-e'lu]Ot@%]^m39F?C&*HDpZEur+4lMT,XU4PEcL/N8_XSU7p[jFf'ja%`6PC`$dUN$<+]Mk(6K>MOLsom'
%e^i5f=\'=&R<l-"*IQ^n6#tj&h*]Tgj+>ua6J#8#I?E#)@Vpj[:FnRL2*mYj&K8dZOHY>,&fh'4'!KL>!t%PMS0LO%%WQ?<[;Q]b
%MW-C#c.ijOj!3dqH$-2%=j1eQ';o\TO!5no`Cf=l's9uhRQAB<,q9&g>WbOO;96,W:k?*?>(s%C;6-?+d-BT80N]!pi^T,@8sX"5
%&lLj;&@3rC-i,M5f*=X#L"=O2/[C=6CRD2rWc/"P2pb+bCCkT>1['n&6mDsFSu(.7TA#BO,G_6\d-qDMB;Am^LFIi8'hn@jL`q"s
%Ko9pTX=qJ9MU*07OWpoa[6dO>?=##^/[^FkTeJ+8'hq34o#(9;,TVK"(p@QXD\e$#@Uk3dnFJ3*Dgdlm?/MaOf$EgmdZFeM1`hdn
%WH'[(7rXTtjJrOsC!.JbJmX.Y$'$OF[*ZU)ORV=]SXSOSijI5QZ94rT_L]N4i1nA"6>!;Gl*AfNq/GZb#TbsY%ql4;.T20RC(#+j
%\@eep%^Voo7/EDA8>CP<M]ZpEmKQcaK6)F]&e(VdHg$(Jo@5]cR$M6>5po;JqZCGd.r3"*KFQk&$Ra9bm.Q1j$A6MYA3QkW";#_3
%;]dJ8%n`aPX@"tW@;Fk_M?`.Xpb:g9mQHAQ+$B'-0DfdFN4-dS`2/F[@JV31MOi:2i)p@1AnPdbdK826@Nr)scps32ce++lZ>8b]
%'DQO4@@"$GSHh9m3]?dY[5BX/?0m/]L0*.Mf']>pVd]H^5onnBM?p?5[QDC4B.(mb/Gmh]M+KLA`bt@,4l6fre;FW!P&!Zt'e!_K
%eRMh!a@(WMmgK,?4YR`Vh*,j.=U7#gL^d^',Fid6Q+mAJE$2NA\e&EbUtU3%^lmC'`eMmVb=7Clo,bclVBR!^lM/_(M:/%jRl+(R
%POW;PfW^?S41o6lUeD/852r4$(Jpo=/#6;\$NmD3*R=4A&Sae,5(!uFZlDHoMUIr5EdcjW7Z8t\Nh&Xi#&W]NK/)f`#2-k<>Z8Kn
%fH@'W/.6q.b?*P#cL5m-_&=h1>oP[qB`)s#Gto.(:DWosKO,EoR=#eCmkO.o?M1Q8PX;S\Q_\=SfTd!7bdWfUP[p#<4&(M<A!O49
%(:`\pib)]++Y2+[)r0qrE'Vdgf/bj8R`!ELhm#oL\*>6?g&*$dp2Q<V=hn[>c,:7R0em)+_9t-l%2@Z?T]ND(Na'o@q*CoELN3R%
%MkQ8VeH_>#&nuuiDsCW4,53.)5R8jFmTHY"6,eNk(J'U<$AXc4\/eEAG,aSF5]pM3_#B1A$3BU*[mEo2:W]nOT[I)@"RB@/dK5,A
%6YKo%8X)P-gBX$0$gM`9E"@.?>n1K*edO(M\:T?k#t0Q_!F0r@)8lumVb>ge(%-kDD@SdS&hZWiG'pjQED+q-gi7:J\ZT2#_]>4[
%PAFD\Y1Ok"#oKqhp66f;DE(:0bLKionYh:X8I+iqe!M(JNu>(PcjmqAEY0D`,Qlg-Gpt)VDtD4_6R"\?nu)e#c2cM"mY-OuC#\iS
%LRV7b2GeIFdjAH50^$?i7LfWA,?HFX;"$EmV!Gr\:j)h(6*Ia\44T,Ylc*M<CW'e6+?H[cZ8F!__+3t;h4.RldcQA7kU:ts=)JSe
%6pc]I>:MESCa$lA)k=m+G6;LIc.GQaK:3=C7;]WsQ#t#S0/0N(1L8YMdtOi[\oh$p%b1fWm!sX;"k%9VJB&RF=g!=g('32*Lkl])
%O/N44JL2LiX%"+Rob]#5;Q%@p!$8PIq@B-:pc\tcUbc</;SY?2<HYlA.p#+2"8GMU]fMOGl\[CCOANt#K1h3^jKp-mg"3fpX<u"E
%'[s:BO6BD;4RapB=dZj)Cj^J5'T>s<rhG+X,Hun&(/Z\4LbGt>Rq/E8n%=Z"U(Z'4:m)$iTPG*:YcKCQ"Z's\lpl)<YYlL9EL@1W
%d*^B`&'oq0LFn9CHMnu+/2&%!a`\tnaMB6Y+0dh5U).X%lSd?sEHuT@LoF2bI](JLB0ZX<bt!?t%>4qT\K\3pOI@*Jc'I\#r#HqZ
%LN/3?,=i%"UL:\HZg\sg19AU)'Z,]fZ$M0pbL*Fe,;24Xd!%ACOJK00/OoN/KaXXgZ4sr;1H'KW"GCCF6R].^GYO%N'SKdt^=.rK
%Kd.\qCaHnTSL<bmC!o8pHo(c0c1k^KP(=<XK2jBrVsm#BX1Je+o%WK?G\>rBdUnW]"V(l."8dY"2ja\4pRpS$"<;]bDK,1Bn1`h`
%0hF9<n^N;4d2blb>#!6YhGaXL'kFi>/in5/lR(g_$ErHs\BrHp6.$l+0Q???YLU36<7MLhN+3+uk>=gGn1@\R!3WOnKWYp+VpEe[
%j3'Q<<X=>>)NZ7\-qV<oZ]JID"OZ4D^1b!alT+kd)9TBc5=8S+YW#Z2]Au46W8XO$">dPQM5#5h<gCZ#Tc<h@kp1tJd"K>4eVj5J
%Dl<%rU'*:0Jo&)9'j$\&RZP/(,9cd]Bl![W8UC$l=M6n!J+sH<DTJe.:QA%90b`]LLr5\>HVg.#$9MDk'1=PE9og5M,NP1tfF,5p
%U)Li!05c(Oh2qF`V(K[E67n<3">9&FC-X$>*,t&Q%oF)FEa*)TnUtH=)nLDfAt[EN6-_"YjXg"k;sPnA*D-GgoPd8p,6:&il,nc*
%>9F4\>HK%O&JYg][4p_Jcn`[KOmtT(0\DH8/hOt>A8>tdV\L*"E'Y#C-G_C?I7poCRpe&+[mL;VRR!hD+Kbo+$_uCf;fI5r$Gh`8
%4eCV*$Qg(j<?t.ADNsa'gBs9J.,&K#6jYttEmkj<;"R!+1dNfC.@ELS9XfQ"[hJlPF[[09(%",EVPC:)X*T^3:PlM4j9uMd?WDd&
%2YG"Td!n?gC;-<)Yb+.XEd4*+5YU).Pfhs<]Z?6l#o62>f&f5iAntk_Bb"VTYo?KlG*]EYOC!Mm5@fCc>`097imIm`)66V$`RAX3
%(;eZGNE@V3$Su5[5W3;Wp;#l'[c=tlMK'KWZe6ldI95g!m=E7Baso`ZRm`I=.[I+-#\4%F:gTs+NMVM6!&nZ[.YE>,$90NP=I.BW
%%G_<18+@AI]mWG2o.)*(42*!-0O[rq*,tr!W1KqmNi,o0)D<)KXK3XY$SkTs(JW]U'rM;rQtX:n/]_RJjOuq&G,Q6FAIS)s<h[c)
%>Lu0cQ7&'K3<dT+OP*7.UkK*kk7e%ng"ig*DalG!Z!kQGA0E_+M\NW^kJG)1%r@2@*a0]BqG8tM`>Mir`UcfuJU`ebo`87lEBsO+
%1iQ_2]?YR!fR"+*lH<<2T6D;W=dD=NK0hkm3'TE6U;O0L/*EfOR?0&Y@"h@5Hl6m<hbZo1/5rK5C)Ok;;r.p>>->$6Bf4LS5FKM-
%+M$KpkOEX(X.Po=/&d=K:;ceE8ES)j!/H1PNmDiKqnWX\D?uM_WQ>K`1hnXUCkc>QPup(TUZO/<BFJ_Pc'YLTY^JkG7R^]0qI4H5
%B+/VC4'.Z+_"KeU3!M77ANi2Z@o/qVMTr(r:kSU9BlbK&qnWrMFX2'J)@0U7-k(gcp:.o8c],Y+"7,GRBfHhu@<QdS>7;Hd7HmkJ
%k1P9__:c;WF90<Fd6c"iS(08g?!9(MhlQ,V6Ias%0l9LS[8;Sfh2)"KN$&YTT*KS-^hd.p3$Z:f5V/Y53c#-tQNlX[B])OJr0^0j
%6_aZ?`+B@0XA7=Q?P'#uOEmYnG9h:LH*4t-;sVpm+i_ER@`V7$b&rtZhM*0X'Zh(/e;7*R[qA7IZK(cR%!?3IIID"$p$RMX9g,:=
%7":/W1d.+H,E?:("l"b\f7qpcJ\ZD%?+ejD.79o8M#as,NMI*LgeBek/^@fnKA>sl"qKQ,KZ3M)75V;#">(TL6-V+=5"1*B1Nk=K
%>auO%=L0QN_h,I2l:d,)#0?TO\BJBlTGA`>XsaZ=?OK<9.BmIg>BOIHEV2T25L.4/'<qP:i9e*2V`58qPAZtmS4I29=?I9f:>,AV
%lOjeQ4P<o6=$&AsLc=?t"fnDSOs$?rEJ"pZ?tlN$[88.6g8;G0k4oe)moW?S>qn`=TsTuOA'#57&t+GZWU"s%b*E]o(<]1,CZI1$
%RBZ;.nH>WG*?U4neJkKMe2<f/8^U(i04ZOiR>lNGLJ6/(?&3mIQtZck#R79GM:C0lYQYlGVQI#/R8Nn"iHr4>W!OUR\YSg(*(`c?
%B/]e=<*CIn\S9IqFUZrkcM%XmahUcmEbnIE0:F%!-eTCr%>cVL:G^W-n6iD?i*.H9l9fP6fo^AV`VNjm&<?Y##Z@m(l`59DD1^+G
%O"_k/98b2-\XS`oKnE.d!U\!^S/*a\.M^Q_'NB2(J`+/43YRG]A"Ja;VodZg65M/^OO+9>30I?Nn24iaLquHW&nfnY3!3nK+MSXC
%Y3uYiCthgi54ESg69C-1E!Ej3":QL%X.NHu2kjsahM<4FK^'P^k0UNR!Ld,c$`6IrKQB'H9Q?5a!IKqBDSm54`+D_=O**gA*EuCg
%5b/ZJ++G+b6Cc`m((I+^NIofAWWaK!bDJ>L$P*L-K24B*ou/1Sn!OdCYsq6LMio269KW?3lW)"U]EiC[oTo?:;)b^u!@Sqddpbf4
%Lc+J'gs/a+P/K:.U)CiaI&N@]knG^3*2jC^?P:[PiBG^E6sjK]"`co?2Wq7g/r+7;Zrg.,&F;pO!X%sKeDKG)1o_[LJ\hl#LZ-g.
%C`D7tH',lb="$JeCX[p1Mp#O"J)FTkeR/Xf5fA76,\9>`Uo4HG;V#4q9lsGVFj@^@,TOUV9*V0qhtTOPVMuHZMln_58>lh5=:a:d
%K44sP$>\Q$Y1NiZBn2)OWl5]iO[6?RQ!1+>Q3g7[8f^2$?_h<+j"qeei(I[Z`1BN[;s+ep#@"@8>&[>J3KfgAa#-s=&0P[HiJ.aM
%K6(p-l!K4o?p!A-KjMg#7N^:ue-T1%#%083Cq0bhWECW5cLr);dO^*W.Wup*[7"4KhsaNTY>c`A,fbqp,tLs<3/nD8\PerM$dH<K
%>*ZrEUoG`DE\9=inG<]s>T0-o-R`'OR((RRC.(CS.l[13]LkCh#@#mU,DT0H7%nO:4ph0\liU`?ZicE<O19c9mG!BpXW"jIK/UH1
%3!Rc,5H4=>iun70g4hmte[M=$=[7],n-UcY^h:J\#^0&U(8HIEW'i(00P;BAhnRC6Q\q:;gEX;jQa$odWb$O?VoD_)d%\%9M8X74
%#ZD6oM^e=;q8j(57:$hGBMl89*8t^kh5PJ`9.i9Wf#OXt!#Pq=&1Xj]l6lM!>Y<J1RtdI%a-+^\(BsT6A"jkQ>W,hJ)>Dc(ci]'D
%>[<&MD4rmQ]\*Pa!jcQ"4AAVGRA>>+`E!\/N*0@WWc3Z1Se7HPr#HJ*OkiMND19Yo;jDaXLZlefAY%jsE]]bSm)XL;#VX2q;2eHr
%LbYnqKd(]lJd(`r#_697c"\__m\-()PYsCcER,H@'%^"BUZLJZLED'ZZ#A<2pgbD15c6tN7ib_B2DZN0iJ5-.iLFk;i]GM4-,WRn
%BXrR"T1Re(<FrF7=&n%`<EW67)q04>>pJMN7G(B*g=RU/$;-eMHdf\ChutTA-qIYH[:B&pF)=D!5<%%mh\,h&(^t77;Ygta"Maoi
%d(`Q_G-lbZ#8+uV1_%7_!/qH@Qk!\rlGj`+j8)io'LI928)t^H1t8a>XWl';fV,=4PuP30jV1)<B4cmQ)20`a(`F2:1A)JO1YHoE
%/giI;Gk])@ocZ[iUQbui)&a<f&jME9B`0Xa!fk9(Q!CjX,F6?1Hn[Xee`044"FSN.%89C&YHA&_VN?thM:b&:\,;W\j1Qf+hQkD0
%7Yrn>`JSNE_p4C*,EgjhPuU`h3851I2ai'?"pf6Xp!mN.7=Ws;45,ljDuBM9$H]'^<rPBM.,"hT\%9P!7Ob_0BcWk$dfGc*cJp=3
%0.n=7k]/lgqRD]2-lco(__cI2Ogq1WR(<&WPE_bAl=l.BCqm;S:2o=4mYIbE(4hI&pV8P&=oTglWP,Ht7ZJgn=kO[eTK)4.%"g(0
%3M%^[!A,9+f9k^*f+?D'nqq/lhLjfY5b&!>!A,j%q"67,fcGP4Tce(f#Mu6`N@AVGW'n'7WkE^,8hEorPhN0_)ct;s>uaW2^]ei]
%\Vfl=iK:3I+F[`+j&AZo6gI>XIBakSf8F<p0_BiRU-7D[+5"m]fD&1gO]/(O3eZaO.Z^*2"K#>\of^9t/4X[&g)Y6MKS2LB1lc7]
%&qUp+!Il"lbpY&o4!c:+VCk$dioB/3iRVSKWQJCb&UK(08gbV$;kh:?@l*sR^uNumA0@5jG>sHYPd/h,'cUjJ@@9H,r*5NgROGF;
%.7J8%J1X*V:rnuME95#9`AVjE=T_2E!k"\Tdkdh<"L"L8X)WlJEiCBUk&nLX7Ho30SSRhV07d.\$enWklFS(!jI9'?:>R>%]U26A
%/gEi\.]gZ$[tr5F(/V?C<MH&=r59(WN:t%f^6qa0*A/ijO_JK)bch[kob^k"1,-4k#DV5aOKe.4Up'YbW'#m1LGTKCS+og%!'%;r
%%DB9^<_OIC&"o2;o+eo%:b+a2l@4<mXrGpjn!`hIAYn:?P-5In`ZNiUe18mFR+93!/VE(s!!2ahl!GmP[3O'h>hAJpn_e`HkiSlm
%#LVO5au/:-#_=0,bV:#hSK/#p)c=]]//T&jpaWeuGldi6DFb[s#8]`eTurMl&WFW.5e<e4I!l[X_JogGO5S`TM@+3&q+Q/B&fY0P
%PRQ?aAFFPsS15r>]%!1aBMp82j&aRr+U"_i@:h^&GY?-;Elsb<;`5(o]=KV=UbkKad7q/Pe0UR_bm4X*;j;hgj-Zkk]C&i8#gp.a
%3B!G#Wpu>.S')NCl;FXb:lRqiNQP<u0M5nabu?thcVB>D<gQmU_Qsjnn^qkK2i[W.kd&'%RY4Wc1?'Mr`Tam8,c9kJF\t73B;l(F
%Hio->.q!Vb8;3'!D(*+[N6i[f/$Vl0f?js^q/Kuoi(uRa\V;-)P`eIj<PXE#qbF9BEF!,ZU4sBAe>DJ6U/<tOLaX/NrXR<^Y3DTH
%.f%k/i:Sa@dJPET-!)78Hn]c_%6,)ZhmER1I+".:J@iOegb:Fl8u<oln\aB^=Eb%gUEh19a"MT3Cd[M3Hfb-m-l_0NL28<Z+:@2f
%%s_"e#7/qM%Ef"nb2m>7Ob,aMl9.02BJiSPk`0FO`7D1M-a\oq"s,%ZKN^L7m;k=?`!\PZc4O_7>c">d(LQ11*9BJqjG#R"X_'.+
%S-H%4H`>0ZY$3R[5UR[SKCA82.NcNX<8bBoJq8_cge]NpPX!@L+rr;V3][('?KP-cDJ;$4.nHJo]Bs:]fR`;noGEG&a7?s--JR^_
%>C9<tfb3j0pn^))]HZaDrXr%lD:!8Q-7]-fe5fg<JAKLsfoQEh27S3GiSl#t6VK,e0A.+)C2c[#Z`t&3)%oZ2>%f!/p!T*@`c??H
%;Zr#k2MZZ0NIB'u]_UHRMKbacMM1TMN@86G5ne5<"81S/<Uti(!:F,/P^?J1Kk@+f27:MrCP8CDR*s=/XrE'RIW#oAAb+C!cp^a2
%F>^o;DTQ[Fnn8f*SE(Ks:iqR*VeR[%UP3_q/aA&jX's%<MAjulpag66W6e7a"'rq*X9YoT(JYdT'VoicX=EKNXZRN%%m\eK]TOYG
%T_hmqGc];Sj]]5/*b@te6?RL_2'01?jR!1Z!"Z]8d_0)07Z&+kBH9qh,U-:D)2I+i6UfpH]!)@q7B>]q$WeAYeHb"cM8PgQ@`UD`
%:np\kWT#'3Gpj0XRpSQP64U%\GU(bt(0`pL!d<b+1B_kEU&h9gH3HR>iR"4Sa7L@Nc]?+72>%uS&5Vg%a6$]s;Vf-aE.]2(jQ5J4
%0F:hN()K*PP_:]-`(LE:S'Un%peLD0O9ai.lBqpBj5cp>3ntTtHkVAN56e$\r]YB54BBP,Xlt"\c<$;&;*74rKRu:;MuSQN?_\i8
%6bRbj@0=#=/<+#mF]EaV#Jl@:-ECQ?R)K?sh2o.A+"om"&Hj15o6#>7L:NKuN?4i%B7lB\Og&T\2&SW+3027\Qtj+IHo(*uDL:Ac
%#+Lf_62*pB`&9,hb&t(fll`<s11Z>=m%3-u+.;f`r;h16S5ZA.GpU?a6`P_fN)1#FRKp6b00o$M]=e1o>nXL8)Z_@*jl0UBH3or\
%(;q8W530n^'7<F!";)+0#gUiWBn#[kN]c3Tc/pQR/C3Em1?`Ccr2d+TH%%k+X0rFlU#%?Jfka_#l,_$pBQ@?IV5Bh<5SFEc0s7Qi
%1=0\q^-)!8RE\Xe$g*To55;2M$d?c?69_\(cls,.LBM/+:T/<]0?7*hoQDHO0hB7#pml^*%!4cX^WnIq<egk.a"R%'+s#01IauIP
%E1sap1k9t$>Yg'39kVtndW$7lQ7#p)7r8]:RN+,2Rh;n*a&$h"OWGq$9j`=L,9`JIRGi?e\FQ*VWn1,g7A/j8(7Mlc,N&>WX^!>3
%r"RY9lUea)>(f(&c.WP,5mWfc1>9\[iRa+V#gQ2?_Zpl-R]BWe!L%bd/[%Vt-D_K?M:(jFO(&C'TV?p+#(*Z\6q[=_V"/R0nt.s7
%BC_9X(L*s<qeYY,kM*c:?*$%2R1;^Wj'a%]=)Z$hfI4:td!:]_Y#Bcib6^r\=o4qg3W*7s(Z\Ok@r]H,'$i)cSM=uXs1+GiEBJcf
%n)cn`'DE+;;`^U9474BPTlkWe8Yquq&.m]L%!Trs0983[aF^a#Hkqjlch70@gukn>rP6Ae/D$,APAnrY^G=`SEa(Y;b#SkqQ5<sR
%](;V>ls@uQZ_TF:0K18BZAQbJ;"tJUfUA6gG:b=m_CT5`E*2%Q.NWt=!R=M!Fi1-6O=Xt$.gV-OTu0?+Hha:If^^2&JL%8,Y!aT3
%_)6\,$f*B,=IDuG>TKo.,>/Qte9NF:8&XKM.6!JDY'Qh60+*P"hLj4l6LLkdTUpujlHuu1eb)9`&C<`<kf6gjCAW3_^b-)Mbl0co
%Vi-,ednaP'KK&t@K6Eo;Qhn.rEr^;nK>YAAC)2i-QoU\+L+NNW2^4@9_'0@a8#agHG>'=Xqq8rEkPO1=65D(e+%S\K;W3?SO/j@j
%G5)W@/P1GPmkZPq1T^)gcf$V!EttH\aR/J)4%egpX@(U+>6+W['n/?)#c>-<%c#kBF/k$jcc%X[^2IN)oC-S]nY6ZnGbqPo;neBt
%F<]UB&g+)[-L1Zj9:PDb)F0+^mN6F#4=dePBtlgM1KdiMH[39o\BP+SP+OXVeCC_IgLB-JC)l9L4*UrqlZ)h2c@.n4cj+$=B)"eL
%9jN^!/G1\5T#VQENA(_K?.gqBXmfh9RSq`K2LsOg!?k76i`[LD292n>"TUtO&K8K@,)AKO[]<);?%%N^-_,[86VoQB]B[?l9-$IA
%PuVD7e\ekL*.B_rha3N:LXY_^K5?S%&N<TPnMhHQbK.3/"X5(OLI%F50(aUg>at9V:!@.u\%H#I#".()N.-Eh^hZ12qmU7s:(H"I
%DMf9aTE/`m6Zi?G7"gACMSa-jbR:)E!0^ku=>-q"YJ\$J/QF6NfjS4&ONnY9(%YnYngh5-H!+r$H!S(@T9[>`f8+k6#sQ>0N"BEH
%Lr'Z!ZM90@H;0:M(I$nIW0gXNGe\cSZ%D%l[;ltH6"Ge3M7TXOHM1=&1bMYA%horiMd2l@DCh8^reiG0gVWY,gZ7<^/o(ZFS.c8*
%M)MDEdie+@`>7<F$?\q6FBgNH=9g[IQOnS0jp!OhEX0o;Y[3=E/2k7Z'ncS=Q\(4,R]4u&l]=[I7<[2H[.7V,XXd0nBT@M&>j4+F
%0muL!I.%XTK`T9mflGUMqJb.7@6G@76$K!#,)tqJ[CgJ#Y&Z[/M?WV#Y-*)DL=Hn_o7W9G/X*SVcJ*G_<LeTi#",BS=E/#_4/!8g
%fKpTW`[<%2*AEb_[$AMEMGRFQ&d8n9Tgf6a,@sH2aVEBW7%k6#$$BLO2WaH/(.Lu./7nSt.YHB3Rd;m^m$R9+S,[)Pc[7[T]:2$Y
%B=Z0mD`\Q6+V:JV/lJ?!IK2:u;q[V&)9;hdit47,m#HU*0,5rOBss1@Z:ho@<KV>(f<-.UrXYX%7I$-"MaG:)H'&cZ/:kM7^7ju1
%(eV5N<k&/9j0Q[HP_9')ZZtl?EnDP=d<-\U+DqH!)hiYCd#*O'iW0*uF@4JWPmr^"&Sa!cOCeQ&l>ce'DSX.!eW8-2E>gD>0brFQ
%T.(QOAk-TJkU5E5m\W+_X7jKs&uQ@#6(XIA<"Lc.ciQSU@UG):>n_g@qa7`::6/E0,XqrTa"sP\0b^@%)W?n+[W865A>!_s.5AdQ
%@Wd<?7*$4D4SV`3`1;P:1dtS<b>c<n?Gm9'm=s3CYoSH>p_VU_5G48`#'BPfi4;L9s&#Qe5H8V=Dm(q_E1'pS_]Z&APp9uJ)4_%l
%R(=_\&3d"_i%[alf-%+jj]EXLN,t(CUtB]1g/\t!Squt4'j28iiL8K1hPrcHeY_h11/+Y2VCK?;b4.SPf6]gVHVN<So>5el8>SQa
%NVEJ-H^>dHP3#AR561^ND7HYTIm96f`!?o.J@*[0+B"OG!D:Xf'I;o"/&$eX3EZsMm&\@4&T@E<JSNAa3:>qsk4\_3JTuf&<CUbm
%WuIGXfZtE5c<5:Va4]ZSHo48j_,\3NkZ:*#am=,E'nmH_.)@//Y?"`a)3JYJC`:IffW!@+n^K!apR7tN,%?X!+NWS]Qf@[jq)J3E
%c,XNHjFSf^i$Kc`^V(jmokS8,eO/=3O@C!,X$Fu4ZVLofJp*IKLc)e'_"jrW8j9K_:EnbX\]Ni0`'jbfp%aLnKr;ik4,N.YcVIj0
%W'rsXM!=/oq\-5J^]ZOEgm]VoW!gqbST?1(dQ8Z-<bSB0e.X.!,<:U2f]%G-:D'3)P<+3`UqF"8g[Num49p@bl8lu;ccF60<_e8-
%"*>79^!mOg%p0PaAYO!4P(aP>'o4hC^oU7I%_i'0X#]a(>F4l`\^cJ@-M7C#549!'2(LHrW7FZ0_ksES^;V5IR&6*$d2S+XJO#7r
%iDc%[2`31:<NBpmFo4jr@Ut(7K,jFYWM@MYAVSMX10dO-3/FD2e-?IX?5oYp'4?'cZ:F':1a'X9/)K')LQmfg*A9NmI5*Yc7's7;
%p$"n?[oMJAnPa*.q83-aPVROno:S7eE&s^b=>MooGZU*><<0`rS^V_&:%f%CA-Xg:qRLXIW3Q7.H]9LfQ:-s+SH)AdW8gWhkh+.O
%gSAAXGIQjL8N@F3)u@]s?'`+hU<,%V8Q(`J]%(B]ZBJCQ!R1$p;8f[rNo/Ode?R,a=ArudnLA99?K"TrIZ2)2f2]330\(RJ.q%n1
%d_aZk=8Sqr@qe@p!j9#F^"^p]?2NOJBoa`,)5*n_!k"tdh*DW<?q'eQi(e>dh\U/WG%N$tB*+jff@d6&*:n&\)H_nUXg)j$XKKm1
%J^lHE[;YQ6Tkb49?6dG`EH.`nN(mO%a5AaP.`M";mP4\X(i+dsHjU,tfM9*B0cfsHI<#.[Tefb2`5Q4Q>Q(6K9C[oX.**s3\E%Co
%o3dc#]Z:UC<XP:N4#q_q[GUs#>Pi>G5i&k7]C*AAn(rEk5/[HW?YZc7iWeOR?0<O8H3r-^A*Os6lE&d@I)YiRntH+*/QnS<:plW.
%eEXP-LZ5Z,4jK2XU)Fc^h_&bY@k=D7PjWN"JTX;_g`pX%7j8nV_dfV2/6Elom&Soeq#S%t6d;?`E<!H8k$_XoB1t$fk4T:m\0^lH
%jb>fJT`*5L`CXHMY%&R[:l$4Bkh*hfQP`>0s$"bg>5mN<UJ>^HETa,_.Ec0%/Z:$cT4JQK+h`*`K$DNTdQUN_%M=.b1?-q"\S?t5
%M>?Nc_#]TIH]g\fACi#oJp\0086)-nmC6)F8;s[-Js`ZmYTtj)*.:_lLd'"q7sD*s\q8$OgF-&EEes)jWC!QfL1\W,228]i"VN9r
%<`_L\(in5&);<34kd&pOPZk>(X<n%#k\6!;:5Ii9NrcE(-!S;!C%cAr6lHOg;58l<@XT6)J.C0\P53fJQ77o=kX.:)<Hl",e!2^u
%)i`P3_\n9j.tuO`9c<9t"RZac`lI3jdaqNlDlp[Zm\QCh](tLKYS*9iXCr4j03k2ISsqdc9Hm58O:g;fT"Khl$]_>+4c!cKNqReU
%ls8649$`_Q&66*/CE`.ED)@u=M*Yk@7/ZiT.sjg6NLFHR"(1MB,=<#[?i.n"aM!7u-be$,5[1dk3CB)f@8C-oiY/\cb6EClpU!59
%p<gQR#lYhdOV`2]'HT8Q8,hLE03MS]=H%6WouG#]#SLEsENr<+LcmBaFmeOmS"2FZUHIB!F9LlPn]d(+lh5h>fmuNUa+drSAg8=o
%e,$g#ad<#[8+O:b!N;i`!-!SK"I:cNbs^sA%\',F:<6$`(_ak'IT[,CUjUE`$AVIeTI+Ehd@%)-=$$cZI:!bSETn0;QTjQlhB/W!
%N#cf%P1nA@pr+:H/j-@7R19DifMju-7W*-)p+I?MQ4e@:U(Bd'.@AppG]Ai%d#Tg[2.8A'Sc5$YnqLX>mLN!i?:4Z=DHLC=qeoU5
%*:cI$2X^Rl+(]O`fD_df!R`gXjIR(2*_I`LCkUcV2NJeG:D&Y=R]TDi5p:<1Fn4JmI_BO#TlNeI(/j81g`_Jtnq_n"SeI%]N/W=X
%X;j:o%3Xc$^NUqIn<rGKA^";r]*Jt)h6oE!Nh\G"B6[k0s6l-br`m\YYNGR`0'@YAn.ed;h^C:_-b*@am!uNlph1tJYHrL_>j>DI
%QDFa^G9]G]]O$\1N-W\aRKIeCYq_l33t6,\6P<[,''O&F%G'&hVUQL^ip\/.0Th^7Wk\f?#I`&Amo3\f=Jd:,,nl`/bIHYqQQeXb
%k'ad9>9&Mpdn!p*CItCA7hhuU2c@"YXuq+F<R=l2ih6bS9c^M#B,Yr`+:@A0LY[mA$T.u*@[guo`Nb>]]6>@'ApJ'[&r(J[n=k0J
%S8-%LJ'5%s%![jHHgeIr=cor$9^KqMIEP(t;VK4Z)?(B['CI>>^P;MeQh@^#`]Uk9'rhVKG]haa*55\2o"j+7])'7/T.$Ng'7KcW
%M>iL<s$m_9/tO<mkeHdL?%#VcjLVpK\A%Wfh>5?Z<VYk=p(IAME5Y)tYu4r*'Ysh#:8_F+X/nO2=JQ&THH`Q&Xue#`NN_^6;S0Nr
%DObeJaGoqRCB):joo0,o@jV&)1%C7FEOADf_7mC_B/fWrgAt8P_AKpTlO)^MH>Ob:`aPmP!:2;L:/CPg;sN5R^G.aO<lp?kEbFE[
%CBr[`9*_YW8$toY5$V`.)(<o`4#T`^:m@',Lj9*?"Mg)bKum`rYUb)_koHob??=q+3*0sL#Q58/K[<S)&!H51bDS0TI=*2W3f=]g
%$WpC'pmSXZ.3ADFQ'I-3jUWOBi(=AL*aa`0/jCY@&/BG3e;rfV!*pTR5UDt5=O^Q@(u,^rmTY[%O<ReXm"H:!K+X,U$G=I5Z"G05
%K\`[C!%0`CB6^0Bi+j:b'`d`kXKY.8.YPW\/[RtQ;%Fq?TR0OeQM<qD>-Jb(Q,3D;fQ!_.#>eimMW!peLi/E]r#".c9KF_Z-qp7a
%T7G+92Cum"k`Qt6ns,d3ECcI$e[j07OJ.8D@qfcZ@$/n=&=ZA:_T)p8#s;L:XhnSt.FI"'al2THj@8l1TG;;`HL)GW8cf!GmfAiY
%o?,;R2TmGCYmLR=O!0dCD)$t+@o&W$`@M8*FE,,2AueF6K]'15Ll%83.0Im#Ga1mYE00:KQ@\o1E"H/:8CU=2oVIN\`A+&nOsCHV
%AWbsJ'hrHROZ#0sQKGJA%<-AB6h][DV/Q%=,31+,BgH8b;oFJ_!59F(;h>C`=X6c/.m3l<^UDm:]Ff-3e!/lWHt?6*@[(\motk8O
%+ttC^6f$;C9e4AVKO[f]Z9>n$**o(/>eXRqL?gg_5S%eN';hEHXE!rla438!<nJ!ahZpA.CoJ."Ligrr2!&ikM,C&biTck<M.<rT
%lW/a)NlV:W&7_+pd1!\jDN8!ZWet%@Uq\)#=Nc6:K9D!+AnDdKK:)9JrX;LK]0-qAE<:t7>oT`jK9AtgggEl7f+`Y_E$uSs@J_8(
%D&%a:k1r^'`gR$`3i@1<!#2\tD+[E;J%<^Zf+2J5V=2RdlDS2Y^&+K,U<lYA@;)ln(GslUgI/J$`&X_hXieV.:t8/L9jEhAd^A"%
%YoP[eb.Qh2d];,?mBW?+Ce\3uSj%@]cJR`q%r)b5iT#!I5Zt'KrU*7'<C8POnEId0jPk74q7aG&@`N=F-2`B-cd](Z,8Df"&_Zd1
%&NW$GYA0u&c%tsW5eLf[rnK;D4;dTVXWI<63VH\<r6F1_8[%EDkI>e6T;UYoh9>Wd1NL+#i:#L$fhW?7^8\S^Qd9+K]*%HJ$G,]R
%gkPD#^"<J9JYUd!As&bg'5ruHqo2ZTc0<'#q'33b&$^.W)RoIYZ#T[Y;Vc:rWP]_k(+<V\r+%9AdjckQWim>CTf*\F7G3T;YTG-C
%*D!KLRHTk1%aRUJee=IVm:4*<=cA/.\EJIP\e77d,pRc=UJp:79hkoc$[Ss)9,o4n+@;"'a>%2"O<>8u]D!O&_]&&V<`=MZlFWC\
%b@boL1n143a;5;qcQ1N$p#&rs52VZ"!e)@C/-pQ!?c$<4r>Xa)5rQ75g-hS6UQlP<eLe]*8*sqp?=:J$F;JrrX9lU]ptc\R.i#!A
%5L7#h1X=0SDWcDnRi;joZ22$Y2_4V1975P&2uD][@pM%OFd([%qK>;FfBp/bk93,K:Y%Pl@Lc0?dT)Pm2OGs)hXi[r-:OOJRn5Z%
%.B+lGG<fn#EfC&QMs7=VSNChYX+_!<@nh]4mL?dl=?BIsR]-\^B5Z1nZ+K0i!7Y(e)9W)sX?k@OZT5LSGrcIRB)DE24[,P4MHb&k
%'R*\sJ6%X`%-@uZS18M/QP2elQXh\2XPa0W0+q.g`=!R^9+_3Q[noX#^9"9!APBCOpPL!]UI<)=Fp3DpFp%f)J0'qX?`eD]=&A\;
%WhXmld?ahj9*hs#&_;YAkPDiZJA5%JOO-0jpT/8sc'Jc`aeOf]K3S=$QMNArVk^^Bk`BmT:_@:H*u?#Q$9jP@dptpfn(oo9(4:=s
%JjB*!S8?b7XI;&"LcVs5#\.[(dM`B#_Z3tNK3VeMBk%oa1g&X;V0.MH^`IV$A\_N@[e6ca)WMb`I9:7@r&D1@AX(fGr6gh5]X]fe
%(DqS,+ueh2]>3$XE3i^8piY]a%I<I`kcn4JAd]^;.JPfB29(j<>E:QOJe-nGDXo(Ji)-X#dNnV?Z+]mE_7-JV?G75'^s^AN4:=@<
%RZ_\7pu#*a>Fu)VG%&N\n.DY*pLh<dSa@d155CL)jcMCd2dIk9<#WR)8j*Sd>V$gC0iSU)/+n$Ob=IQHVXDY5],F!d0%G'KH5hm?
%/,iOSK85t'Lr]*e>c`C^Wo0HhJ]/Q&T%k%Ugt(u>_fg`+b-o.oX._;,9qDB0Y@+ku[Fe)X=7EH@<3Uo)+sN#3/a-hPSmtCKi4Eg-
%0K#0$+<(=+0&Y&QSo2174FX3g<Z_DJ/OIo>Ts,&oo.gsIh\s3pfV<7DP!NsJ<EHE.,VT=K;S\6'2E#,TYeRTa`NWN67\7XAKBDVD
%92Gpm6ObBQS+C'?6a!)'%U_;'oWH.G;D-U1)HVF?kE;qPKM"?@H1P@<X/9lWG@`52,I/"?iX;MF(0a;nhm#]F:Q/KU\[F`4[QgG3
%,s*H=`hTC\b`n[j<b(dch*ZmeM!X1p-OF*>`W4BOUZ\s^GV7aU4j!oC&%<SL7bAX&&;-2n/E>f\\@@f!a3ZntJS5+reAoeE?*eGJ
%Ub68,'p4:>n%fZol`D]"LB'EIY6.S23TA<u``LDANG]g'r`E%B2qW28.T$Cd[%`h@LtB%.*Rh?eBH2YoR[jT&9FgfO^X"Zp9[1lQ
%(g2iOWK)oY,>D+#h@e70Xc=.rR:iC\Vh<X\Y,:3KWO-8!p.:T+1Xd9*N&61I!g,*A:[YRN4Hpe,'$03Xg:`SiBM-Qef]\%[,%\EI
%F!ig:Pt)\1r.g[s2EAr!@NDqSmP\#M9Q`9`]N\Q_WX##[gi2OGTm3t-h>([j[HhqlIVcTFXGubtq#$cX4aHb![P'P3Anqh<$`'J:
%%$#1]<mb<:jhIWJk1UN?UdKAZ`rPs4(7D45^<j>cd'oLjGm1Wkl06&pGs7YID#,<de%;/Pm&=gMdokpo_X[qt*P;e]`NS!j"mp]r
%<FW??$0YO)*9iU*X&V/gRB77B8t7>?GUXuON-2)+1/53KXTt5$>FT-O2*kJtF*kKMHR$gpojb]FH,o&1Hl%kVe_YfP@p$XH1'j\Z
%!RTh<H"-Xt3t;d`,PV&(jN&s=e/!KIU^q9rjGX,=T:SF=dP0[2]"L9',+^<F#*;0t.AGRU`e-\RJUPGi^AK*O12r5rd_a<O8(B)&
%@It&%CEYj<%33@h@J8(oe%5lVdL>F"3e\#=L%/0;9SWpX#$kP<G\pfPJK^^@_WF4)ak1P(@-H,0m+I`ABJIiZb&R\X-\X(0o6Q\r
%9!:!h?55c#hjInapeu*sk7PeGnTb48U+1CmK`DYk%MOR^AN*BnP+3br2/MpH`*'Y:PdJE"UTN_G$7Df(a2</Vn@%Z&/ndgk1<V$o
%jN1@H9jo0.4id%L'^acd=BEm'=\Ab@3tCImDVIc@OPS8;[b]GNNRV*j1dN2p8>Rcm!\#IMPZir);P8<MfJ>7F7pNOipUu>2]bVJM
%$f6#7><j&#P2^3*:[gXqc;&f4rR#LPr5gL@",,q6#SStNrFQ^\BG$r5A%COcG`\$<`6?#jrQkhfY)-#A<BWl(,`m>4+)/N=+c/Y3
%+;$Bj<UZBImWiA9F4p]N/^RbbEk]L9>L#=Fc>4uHP'FVo.-3^eU#+%15C8//Z)AL0U\<pmk("e2_/,u@eM8RNBa\\\b$drf@V2O*
%f`$eL:]S^j"<f7W6`D;5R,fC/(5!]XHR4aa=hM^3PW[#=@e=%Y>.,GQ03XF!P\9U-L,_dhlGlVr#:l76#p*Y>W;"PQ5F\5@09]e4
%k?>W7?DGe:#XQIade#n/U?r$l?pZ[>Tr(Fc;7!TQ-Ls4rT\nj+'Ih""fd8IJc)H[3N23;Cf1M/-<@O`sk"mVsb/fHa/PpC2Ni<7V
%m)@2^hI<q[p#ihEm_PUhV'_t,(<H=05dlVfq;eH@f7J3T+j?LJ1Y&Ea+o"3jon.?W:s.c_R-#[X0Gt\C(0X$%N>.4/bVQt9T\%NG
%!K:b&_t4LplqR<kXa[,B+kK?-0iYGmd6Kpe2J>WJ@cNC7B\+>gf^\5MJ_1-eUdHH'`l/X!Og+4[Uqu>ti6X(V92W*/;Zg?Vn8V8^
%XN?gLm.QU(lD0l&4r'g1nQZOiS@\Sd3Acn?`81Lf1da,pCBk/g+CL$KX%;Ntn$;,i1K0=+cj#l<7E,krX)==&alaMN[E:5B(/'6U
%i[X(/.;q4HWPl2,V\t).fXAe"C4JKmOd=4V,.5i`8"7<08qb()m**h#OR/T-HOT3kT[FI(?'aArC^?KS^R@Z/!1s7]VnB^sj4#TC
%^UD=2.(3+urbV%!4Q)$BjLVb9Q+_/%Z^5,=ru_.!fN&WaTU$Lr#6GIT)PB<HrCfg2-2$Z#e)J)3NK9U79Y&t7&";h[QV+PkI2O;B
%/!]9dmRf+DZlAe!R:7j;.jWU`8Neo6->Wl0QrGS9)9AGM+"k:L;Qe!Y:N(4T-94Od9l][JkPV(gXe0Oao\"g*M7E'#-uCfm=9h,U
%.nOc<lZG*5)^G<EPT5%6%.lS[.N,l5)C>J3Xl`!fkc$g7:7Gn@)@OB7C?]PV.ClDu.:'2YS;hEGD5j:Y(:9]62I39IOVhd\?'71$
%_]3167P*M]2.n-DEu9t>cGehYl(obsp1Q&E>S_459&fr+ijb2k:V^)iYkXF.&j5&0KAeGP@:3Yiji&2VKqegrf%$:?Xg4,0Lm\a^
%.AtKtQ8!>VkE$uZ"l(RsWA;&$YWOC[?t)jl+[_ke8=^kY/;WGo6N81Z9^sq,?7"c^N_F=Z_i#G?@iSD!06@*IoC-NmZ&aA"2s8r`
%h\S*]/^RRscO<q!LG?[DM'qR(-oTfDVV8pML//W!K%8oU,U)Z.GjTnY+S$FtgWuL=,5HHQmLp?)TkjuST4?F^]S_d-4\;jB:9O[^
%*djDGI-s%&D3A(c<%U+"b_Tosd`?2nWc!$?#No.h&`$62`Jgb**U!;)+b2\iptQO^T*'D:(6/7^3C*WF1Ah"*PJl@<!BqQPRRV\m
%3oAQ88@_/bm^7rNNt"O-ge^Y:4EUTjV<;l9`D!0D<@mgu65D'#P?tUBLn)9AS!DA/*:C"Bn?7[LgNZ7,q39O\)ZoulP7qR>P;]b6
%FB5q-KM4Ns@$q3a;f,Bq0nf)>W<&De0d$%1VfuAEB#r,a\NWINMNhTISr\#MPGK0&HII(:_f33$jV:6J6X`8j.Z[Xk+$8.T37]gT
%,b0FhMP1N-bUU?RR1SZUR1q8)4iY:h"=mU;`RlVT-87>YqN4ad@Pid(:>M=:/YP*a-?6am;\::dK1*j[$4A$MPl[&m7RR@b5>*Xb
%MMDNZrFp#'kG,LJ)k1i4Bu/dh<gu+W\pq8rpu;ZkQQPB?h$ijd.ee"uA^1_mDg6]:.!J=.^W&4%iOWN:2qE*RhJCY&?Jd<UrOQ:c
%pMif_WdpAG$f5h'OrS_(M')nn0KGd0ITYV-=B%L!(ntC2<D6q40XF4L2h9T*a^S1jI7RJ&,)%%jVWO%qK9Q'jFI\jTk8n8"3/t&V
%$p)]&]XVX5"_LR]HBi=naI+p5Oo@Dlf2$'0EsQfdE")2Sol+p4-*T31F;kge=[EiO""CK8HSP:P_a[eS`^4lVEiSl=H3a$B_Q0@T
%fbGAHL"V8.WXt1&lf(P,]?nP'G)W^mm0FKe!`V<!`C?*D]p0LfMi5D<e`XdO<(dup"hC"/1#1"IBfk:s9S0(u5(6=FRpi:0C#RK1
%d(?.jlNh>E^eY]Z8mS@9;`DQI\A?U!aaNRX+Q-lYP9Pn51Z)cC+u^#Y#.[Uj?.dO9)O9"&1G1[]*=VM\AT$eWJeE8$9a8uWg8hbS
%W@GglXrAoJ/(cip?>-Or&mdhR>+nQrjq1r&QMCN!YH5=%Sq$>'a*IMs4Vt<:`rg]FYfl8!B6hOX)lDG2pLY:\(@-ELDjUL88T%[Q
%a3-Q)h_!)up0!@pi*(,c?rS[DI9\(`c0;!RMH:*$A;0L:.KPfKFQZX*NZT'+HX%kipg/@',o%0$cSnF,$\VQPDA"Dj!FgCjreLb/
%]caHjI#JBiO/q>RWh46q'VN]BT1-"@P`dt>@NH*gH+*-!Q'.mlLcKFqCtST6)C`=S=)8M62g;;E7*>FbPT&u6-S6@la2S+3/lR%R
%!$T.==^OKZjcX(`>oou7<k\t%,(jgN[6b=;L%a&:91*\0]WnZ!\`3nT-&upmSVO-Km*.?Z]C9;e9GLAqe.#RAfem5LVJP\XK.8a<
%Xgu":46$7d@BL#fV[Dh$44--l4=hk@J8sGj&J1:\Up6DrC3o!0koI?<59E8L$1+;;:+k*o6r3[b7:2mG/PQKSbm#Vn:_J1AHY>oG
%-DchJNX8is*L=5N)U"eJ>_7VYZ44d$a!H0g@OjO+k#<RL3X_Pb[E07k7K?nH\T6rrUY&t\f)@I&GQ(k"+'I7bf8PdF_KQl\D:C'N
%(JS0J&G7\m49gYSaZBo6&pL@/JYZ7U@9#94F[n^@!M9AWY($Kic8a1^/skId:9]D[*"pLhb?JX=YJmK^pm+1#`Ual1:X[D[q6^+K
%j0hYY'Sk_m,fXCGBZ<6D;rBJ&h00,qMD+2L2OK$T@XTUgXG)>I1iRO'^F09m&^2\/3;h$DCmtGGVJu(r3ZdST8?11P*]>HF06%eY
%%jAp*_o[ZPjrR`1fRR,I'>pDp!<\L-"Gg@=$bVQCpIDJ3JQ?e,fh%Mq9eHi"WFF&bBHhHPD,J.$imYnPEGR/A@"8otqPeDao:uk%
%+&q7.81eG#@FVt7reiaF/K`QlcV.ZZRI8gj:%o1+00Yi:r25b>:[Oa`+A=Ee,/abOG[_J*_!>&hNDs:g(Sq#1801pG#]?!jYSfU]
%h,Vmr-M?U'n3:r"q-^4G"u9Zr,^(R6Wa&EUn3j-XcBDT@FQ5[[lW(kdlZ:1=P_N)[j*.g:GG'Fep^MQMgjuNics?uGf^)oTLb2HV
%;N4`9(jHd<:op]`RV:9mHIcoUM5O>*Zn6<_$X?S?h@b]I;\jO",[,B<Lilh4^JRVh%hc&Q'OJ-,k^^IY/<<jA].5IGihhhY#sbk\
%i,G1:7\dr\K!UGQO1r"AqN2rVYu`OQbWS.G,bRK&DZR$"2n"*W2'lmLcXu:$l$Xn!+&FYsq4"\#pRn$VQW8L:fX1rDjmA9=iYc0g
%lW&VJVR;L$*QG\F1#ku?1,<EkM,05dC37Ys[99=cq-uDmn*O+ZSf&J@m7q>>8Z+?f%$>&U&R6q^QsYs`&DMQ'mik+#q07T!k0&T\
%UG5Ac=e8u])oE85XSd!+(V\4DL,@,V4'?!c4H@%j=f%o,?kCd%dMu]8$K^E9V"bj1DD0^?9]'H@4Qe/Yg@/!B4C$-1]Sf<b/L"P4
%N3#.3kJUOnN25h%cS>%RB#q`YXT4GHF920=SAJ<co]i:6gG`&.c(P9#k3K]AhaD=sRE%e@1]#%S7Y>!TbK7=%K`q2WbIN[-Xf'O,
%S.Xi;]L_-rUIY7aE_>OqErs3>2Vsdi_1":$6LHVFlVsNcr@)6nQNMu.+/EKYNLW`.-)O]'0dj@;oU,eq"A3#&:,>I)4.U)o#Y>gW
%`S`F)AQ,Bik)tc<InNO/FA=%IQUi?u@MdEq]ES[k1XjZ^AQCAkG<L6EVI2ilaU!)Yl@tk\fEda6g@PE>r.ok4b]e]>`ZWA_!>Zif
%(aMC-8G+%W1r=J'/SMU^0?R0*%8^-u\[LbOD".cn:-Wj5d6^nDEAmKR+<B4OqLG=Xq.?Y!b=g'YNqlde?"YS+OujP4U#U>WYLI4+
%>5/qJ0+4D@i?NOe-?TL"10=]XO3b5*^O5VeQKH^)I*-(VLHXC'7ZJr%(8!>p,VI4tcZ^U*%<172#%AZTjL^R3P^(ejTf>FuPX1Si
%D\3C[kCWmW!iL'qI*^VK\6-0hm$.!@\4aCr!LNs$*^R*'%48[h0-=H8^-ulb'!4R<I<Jng?baoN^&bf+:HLpl$_;11OmR7f-u/pX
%PfP4<FMm,q;+4Z83mTE'BDY,a][&gAUI[1&'ClY1(:qjn23>We=-I]>a&)m*"Z&$o1S2>)1)`l>'^'FITrF6!*]q=t8_T<I#\Let
%W'fjhG]P.4Z[js_5mBVDl4lCT\[RNh;M$O2Qhp3ZOV.gf2i9@6-BV;X_rK',`Fk)m-GYpq0&d-:>GcLp'_n#[.EJ0@@9kBDBcUtP
%S_W&cErniGpLPZnQC=j]H6i7Hd&kc""TrM=>lCT.^t5kn,+ZIuKI@BVc`fsjiH$&2&g/WqlH:Q,*LC*lB7#*e!/E,c!j\kH>q^U%
%jFoi4lPuC8\K6N*9;8BihB8e;1NtlRO+K>OX^<)&Z)#G7OAZF>&9c$S*+HoGB"FN-l!pKGM@pA-V:&lmE7qZFP<1/Z60)Ahn,?4t
%!Uq=LH6-'Zd:%7o?3=.@AsHOFV]Uf+hONbg"^gmC?f%"9N>jd(Z;b=SC@X^?NTG;MQI\WmG9XTckclng`-*;W(LksoMHL,:"aIDd
%[5*@+OI9afA[\3)66'0jF.dB;)et#gOJn3c=U1pHZb>Y[\Xe5lbHrs3/Ln;e1JLbIqB+/Sm+pXqVQIqqk2I;ZJrX5QRjW4&6R>W+
%Z\D1]=raFMf2c=8j5bD%(VJ_t-Qa^:2FQ#1`ZK%um1IiI@DB_ZG&-BBJulfn"t(kM):=AHUUPgp8?g71$>7/Gd*f4ZdKFu9Z`8\E
%:f)IsiE;QO$,ooK5A>7t1m_ROZ9.h#Cr\um*``rQWo)%oF&0cY7FFBrXl#Z?]RJb.kMq0#0<Cj$_jQq=eF*%.-o!":6qba/5EsNW
%ljl3M:aCUdM,(ZY%jF!W'W9"7Sk/id^AFQ)KE:JBcHk%>=*a`38]&+&!1t<[9Hu`FSZaqC6]R$':ejJB;d2(CGB)b2)Ob#Cf"DnT
%:.AWogPe*6F<1;.kFP6+*70=ATj;0hO3^hUY[`-Ch`XPUpDi,O_/gNUcX#]QnLAFN%g<aU5I!&m5'1S(aKd9l=crrO;FsGHhD.V1
%Nel1)Wahe,5K=7-TX5EfO2*E6kSVjG-:%G8+6U0K/A%m'$H)cHdi5;_.^2t-q5]%6^osIe"iDtfi(@fV;NtM4,t'rR+WLFoP:GGZ
%J/LgW+h'D,;FO]VJVFpXIhbP]F=uM;]rP^D72n1H"NXlha?a9#Q1)$P&0r0,*:=H`#)MHp:lnj`A-[gRF,.n7M/D#G&7%/@Zaab0
%6\4m4luaGb/JPqh2[a%.5RD6r%ZUkggjB[B+>H[$jeRbM:6dD1>(4W57fjti`C;@i2a0bg73lD2,-d[T9Oln95SLq.\O/YoMlOo6
%gpT$NJi<+6F*PWnm#+oBBY[*<_@e3a=88sQ@d",O\_q#SILiJ4[sgt3HIh$FC7]p/oi@b$d,0_)!>E@P#t$WK)u*K?@41B.5RJ]-
%ToCiGkMtF&g@G.]YJ<b'Uf@B2`/hb^U)UYJcsES/W9j4J.Y71A%Bo$(?nVSE3k#bZjfE8A;??2[.SP#5m?"/='RJ+k&f_'GN77[6
%Wp:h[)no74Ln2>D/9F)8;/[M]?CU+,>cMKBM9[;cKP2i:iUZ<DqM-ShSl.&Bc]l=uV.\`J9m^3^ADD9_P#]@H_sXS,>)$tuh@W(M
%'gCn+IkWK3RJ>EC)-BfPEEVc<qr[[U_7MC"_6$6:"C_c-_Vs[dYn--(#D[oE_O@IfRb%;8=KJ?r&/]BK6,7)A-^)VoRT]8%]E)pt
%qjapA;IguL<cm7N_FCQ(7SZ+)b+XD4nI!\KPQXOYc`Mld&iaH6$=',?PXZc4bp(U+jtTURI>P4u^_)$^eM&2QC(`Qm`=&+Y:k:)=
%$C@?1qH5)O_*\!UHQXIg"VNDpYIk+U1bbE?p0VeGeDdJS@#=4'6n/^hArK+YEH2bB)U-&cR8]FT<dkS_.%@6WPj:mB=U,RW?@?Xg
%n=cQpBTht3:of?Y#`]bl*ZPDVJ"-o7/F4Shb0GMX"I1Vk_U_\gr5,"IZaTU"(,lQ2^T];qg[Tg9%H(qC.A.*[f21a8B7L(n,e^/)
%*h+I!-6f,uqdS;;;JA!u('s&\SHQ.]242&?h5\XW";XPZ%7hLjBTS#m`1_!UZuR>1Y0T0Ii$H$qYc!:=EO-ZmrnNOKs)recZ"u?I
%[uJN2pp]5:Te^!.]'!iTjLt5+!<>HFCF(--kLA!0Y[;K2$?iYJj;IB\9(s0j`I?q$[TIjX%h\Z76bo<#mSZAmd2JbmBh==tm!U@5
%e7J.a)bX=t-[$(\>!jlKb>Wjf*NR_eaaZ,"-TR2?%n<7l=?'.ZMJB&[bq2$s=]'EPK4=Er`sq*C1Znk97#e0la6abG5\:!=dW#/3
%?_Y'WEF_nh$8KAI1J#`3!%#P=!X:3M\R:0IDq7[r2j&ZB;p'HL.1D_*MutOR\uFAFZ%SPX45D">,jO#cA[38=odN:cerZ(5HpUYi
%HU!dTY0"UlNT5Q>iP+mNW4J=&[0MW19;E4N;>_3t8SGOkC\(cln>@o)M[[nkT3:(3)8sQ0ZDp;J6O-%L8gULg4(EEY=XCif!cP:l
%2`@SP2*-lI"P6e/iWJlR7GDMemH=1F6q)tS6N,`3i"!*%qa@8q^Uoab[[*o[DEGQ0dC.L7aO(pSAgRg,m]mR;#-ni">HG;Fd*VFe
%*$3p&5f@F51_bb[a7&OZX\9auhOK:)5oX,h-Oe,ID(UEp$;M2HMA?@-M(;hf\>QSGMOm\YeQn6<VkVJZ`&71K:8_cZeVNUID7o$K
%,*g[F`L1_N_$n-(,o`'VKNes7#`S>.%3p7(I(+0AE*FA!1e9?abU_\-`UBUH4uZ]2GP+]%kqMp(75+tqNp@^n\]D3)&lQ2qiZW=5
%8emf>Dn:'".5V$M!+h4A[-NOs7eBD1;0M#GPljSi+^LY>(iOPu?;XpD"j;MhXMmArjX?Z1C1:1H.ICTt)q.Xa3cX^'L$$AaPO?ER
%0BN\<5Aho7ZU=S3[VnAegHWuLph7D20,q4J9\BcNbNbb@JJY*Z;\3P_d$tHqX/ukk$Zi)WK;Qp,:;h@QJphRZhUiZ(QH1^]//QLl
%`r<M-PcbePNSX78#261*G@U*tg6>Z]j39uoFtfgKaI^UB8puff4lM:NW'K^O9;?CI/tgX?C7r9[mdL*]f+/op`/V3FUR#/LQ[:=I
%<ZSbKRdRSa)`?tO=h@PrO=:ZM=SaOnpug/p?fBZ?(#9AY!ZJ2'K>nE(aep'i5X`6O'32M@?KS$Y_7K#eb!;<s.A*W]E[)B6;(HHi
%E=`[-"Qh!HO<;AA'1[XXqXngHW\flgB6)UE15JKRb-]HkNei<1HoJU%*djg!'<7NU^1jrsm-,6*=36Zn3aVGqUXtBD(PdW9R"m*6
%$KV:t)G=X8fghU<n`gr$Ham#-AB_Y@oEsXQ\j0>n%>S-#U$KdOc$kjA?p.a`d3g_7qZs<YD/kZbN)C-0=5i[JK_=Q:!.i'/<-pMs
%=XA/<,h):dE+qRHaMKP<#MN!^arG+<X:red,WfhT9OAs=])+&;47!8?4Y\,?O)H_;%A]PPA/MWRWF0ni!(PHBi*Z,S:f#9K1!k'5
%c<(hid,,G!Sa@Choc!DT&OT3Mj20i#ma.d+%mFU?n;'7MN%.Rphdr%7atAna;ug;m$7)iE]"P^DU__#/Y=Wb_%d*4Zp@*bo$ar]8
%*`cPADA;?W%8@qmFN>J$U`!$4@oPVW]U/R^a`TX?'6dS*kD_ScaDrT^ED4&+O:pb-)LU.j&SuQfn\V5k%p#Lo1.V2cEV.SUhr7)G
%bA>8oj0`/`K+sG.c=ke57ZG)c[C4k@?q@S_K0Q58DrqdS4f])%2(L65A$&s?n:;k#FbKo>#:kemF35FAlT2?fa+g>?<VSX\f3+pi
%.$Kf5#50L28>^ZP@J;l#<gD=-#?!2?$/C0t-scM_VK6<u>:.8cSMM.VdQ24eh!7RJI\I;eMK%$*F^tfPQY/-F*b'66iT[E7rIapi
%m#01QOo2gtbFiHImQ<\"=Vfc8e*im(:q64DpYaLWicE`I>2^smXC%nR,G(l?,B%k"3Aa\+CFmjPj,*DC2aEr&+&$<ZiVC"hWLa3<
%VC%<#n[UFjlLDJ6M=8Fa*tLP0,<g=Bn%0P2HdUU;?%T_hR3j&$aN#"V<,gL*M4C%H*E3f0P_[9,*p/L-H"%^XD/7hDLFO3-)Pp'[
%JZT8Q?Rh.Y)ojSRXdK]_G@Y3Wg]c!^G,B)]['-/+GppcS(P?i0j*$JuZ>Jri@p4K%AX+)?T5S?=m"YT?86>8Aj5uk7m`(3UC?:7O
%'n*)>%FdY-ST++a/_8T0l9uX9mI%+b`9'CB=S]fZXWS58PTMD3]E(WNk&W?%CfE/OVT]q^C<%mYi-Yu++VgNKhQCC+/;-p!>h/#\
%NE&)8ZpE-dP*m\X;h>Mp_:dnl5VXA;2`CD"_iX+o6Rd`cs"7c)W-8jQB4l(P]V:<q?pDKXkDDN&1";.cZ?VI5"^$qbSo5H4'o4uO
%g!:]5TUo*X:3P4Xc!lFg3%GW7W35-a$1n<WD],/GZ1kmBbbW(l,>#<N3:2:sa35O2/d-;2Gr2OjGn0?I>ZYK#l6qjXHU+.&](jgj
%dGe9M$MgFoT^=5PA(=ACPLRU)5oeNg)1[S/f5r&VP_%rmc+>9me05rajSVgur9X"9L/T2CF$<bdG7t#PF0U19Z+_;SK8DlUT`-JP
%@4S?^(PI6;b1GG'7F_O?U>:qo1J0>O)DuHb7l,i,-=*5E<sZf5UBi<elBZB:<VLJk3XIUQC;@1hC54fbY)t$52mkg`?!AFP8PU2p
%C9!3W>r_<(@pP5eDhSeC[89A[E=HJtlR&r',Y9T8+VA!4^8gb5[!ap=-W2ni^m2[\[M\O4[P'ItS=8:q09PPc'rbP-rKWgk44)rb
%X)PO2:r7mtn#MAK$D7a(ZP?;'H9R_P;mkCChka'idj0jEf#asYUb>cfdk$B*;T&!@:uP<C+i='1N$Z9?PH/^4Y5.X>jS.[0K])+s
%!%\!a3M6N\PM.X:HF6["2C`LpbK3!1j'uX_kjE1iG08;/MA#bV1.2k#[94"ae/2B^3QJ2L\I)!#6'3-G$lhPt62+9`oS%/d$_:gI
%'fW"cl9m2M<u[t#_8a]PW>/JaVD.#7Q-u#&C6pr%G]\hc13'Ue^mEB9q9H&<b+P@Yh>^`Smp)S/P3LOCLF%dgqJ(Uo*^U(4K^MYe
%>jM9G+_kFT,8Ysn'!Q31%,&ku8CJS2,pgt:<e>BpNMDR%OI0$BH+.bHki=6Aih9JG6EVOdYLW1L0grLnj!r.BD'bnZJ0][TJ`LC`
%VnT@ujUdP<?2<+SY?0pB5VuVpWCS&i<L_Ig:%8R](D64tS%ZN(=o?Ra[c4HHZ+VT7f3DiZ9oF/;2*As[mlAZ4'GW+j9H/FS>;lr\
%X_"dHpOpAQ@o9[`_5l`PNk"--`f\Uo^3W\M7[)tfS1q@&4i8+`A>5k\U-a,U#rr4L$SsDHnI3]3*TqhlTbQ@6$`?2RAXfIgnXFT1
%5K1h>kN`')l@+4$8"oW42&`FQG%B7$KJ820$-,_uch\8*=?@$Q2k>'qWhiRfrr@okQtTILR!)#3,>!b5EsSnSPI`"SoWn[>P67Z6
%\4'0-TlSr5R\iC]__lC@@GFs%cS4Yql[]ML,Ub6AOZ<)C2"@MX.\)uhgBsH+;\2mK!m:U%,lZ?ufLcs=5"U;']JB<9J!*I[QO$o6
%WN;W9DZ29)-t!LhS$7>kB2ocD_q=.o>[/FE0cfKCoT$:n<\QI>Kh&D5!il\m'.X?^Pr=q9-BEiYF-oTID0J,<(GJ$>k)?GN!Z%]A
%"6PYr'03]HJ/b'4Dm$U9L(OOHkbtod-[:L*0^=;$*"/4Zr0b)8fBL$JfQ@-iqr4CH*,!NRXEjP3"Z=*iNN^1b=c.Hk8;ZmHko+^G
%Q5'5%#DOgN):1d.hDW8S-$<GnaaLXL`3h-5J-'Hb"+"(7W<D#u:6#qS%)ZmZYuUC&N*%MH<.,^laO4Du"Re[SS%67^.NB,nN77kK
%E++/#DgOrKSkN="Hk_q*P'=%,IRJUpf]fgSS'kU+*^[@a=:$UteE7L#E>/0a"V=fs_t5;V?A6hPSB)tV)7#^Y)d).>D!T?6"k5Pr
%EUMIt'FO9n_^h$n<`JCSfmY\<=kPPNc_5CMVTd!Z<eL:)3<Yhb_&1.!eMnt270Vt=fUO\T4tQ@'(Zd)^2,'iVJpjdfb#F%Uj(mO.
%e*Al@J3-^GYO)l2bBR^u!C9EmZ_39KB59?B?5(;36sPN`#>Pgrm%AUtZ\%(K&#HZ&?srYpgJR<lBt\)lg3#BCVIkg*\IfD=]PDP6
%.(bNrn:`tf-Boe]J63]e)Yq%nUkpEL;hc.^GF-8Hj^rf)&:r!S#W`'L=<(\;gMGG3.e>Q#3_0NLO@mVe-#q7<4>dT,3Q$?e02e:X
%0lWW1m&F*0-WqeXa><s#[Q9c7HH8]==m@euT&.S));m4d>SPJX>;](BR666E1%8Tb!s'$IF]H^*A->-T,8<C0,dL&lP7$QYjf<eX
%66`QFARiq)mbbU2Yr@InaP]Z@nLei+(kP?.5O0A=N,3caJ::N?mb+#@k+s>Hf$rnfWLn)YLKd#(8IsC8C4LZ@^07[&i`aS_(hD9V
%X\<(32flZOK;PO)5!kr#43nPO0LDILgo?%OD,_');J]u1!P[l[[*6oYU&UL9aV:HubUU(-C!e6Z5[:EZ_BdT%e9_g1fdn2tr"6#Q
%l<7sHJF_OX\n34E\ZZuFAXW4WU['k7a]=]!EgOYfPV=3#g7t42^o2LD]f2A8N:"3r2PS?7c40BeL65PP_bk%>f837U`#5CjN>U>h
%d3Ne9eC&cU6PmF!h4.tT2^h<ILJpiYc]L.1@);&23r?uo`S0Q)<R4E&dp1K[GP#oEm5L2sE.j^Us6N8#UV:6G7N"?/+)=*<MNf$h
%nZ/pdC8j,VhFj6^]m>nn!OF-CmQ?Mh;^Do6gSj!N(@j33L`He$J_C`1kI66f3hU_6XK'o]>A*<,%gNW_$/T:%,..>i`Y+XE:Kqko
%IEn?6"bVRt\nS+FUr't&5btBaB'%n[#Ob/FGh?k_gnN4l.pHd>*^#[$g"SRJ_1GE^4Eq_2F^`g(!+S&24GEsT1#(LTIKY<GNI=F4
%"GEi9_:b(5!'E]'RpH$+ih34'ft"Jd'c-69M0'%31[ReCiGs[,X2DgCQhKN_qTFt-`g2+43!(7q)+X2\0JG%oU>[fC0XrY#n(2?b
%A_r)EUa&o-Z*m.<0#K9_rV!2d.bq>UE!o8+__(0dD-:MY`K"T=s)tcG3SG*cPuYjLg/<N[$Vo*8+O)njg@EIbQ]It'NSc\>WE!S,
%&4I[K<,YRN)E9)r\W\Y^5j?HQY#*[SQiN-hZM7+o8.K/3nqi\GPk4)-hLjH\P(.oect<DiLu19Ch#5XX2i(8YnY`N'Pb80QXm,GI
%p_2&b-Hhf\?NF2`3N^)\$c;EogdLt+`m(S&q)_B:Gn/kkfJM=R97T[qN6^<B.JU^reOb-,\Nb5-?oX63%*6is"2QXal_o\6l4-uD
%k\Fa&$ke_2]det>C2D:?=DR<Ei[1cmbJO208fO\1$-HM42gUfm57S2=<]FP#TglL!FkNWnmMKk4aI&B(D#^2^C\EnLMhj7LI.q<&
%7!(edrQFiO-pVhZf9-jSP&Rq$fkpn^VrU8u<qfMqSOVt!hA5$rdJgpZ)aKVITJ9(%$+3h9OrXrU(kPmX]TX/G7k<jT+c(\U4<mQ@
%PQ?JT7LKcNb,MDfB&@^)S5G4dQS(DPN=`+o[%TV+G!8jDqr:*Li0"tIi96kg%dT+IchK\Jh=*(\q8X0uUhPl4mZ*eng4t%fe[WXj
%Y:T?T/@I,<n]gq(@2t-!gXNq+[1m8C]qu*-:8#;f,'BE8JWe,,,+VHL$m:]P8s=4n_-62Y8joZKPS,'lO<bIF%%!eE-35?Cf(7&r
%WZ5Xi6N17UTO[WtbSDH+0[!m%mWAQOZ`uI\\<Hdl@S]sYb^fB"O'D;c3sQ=1"#/QP`YuncRS;AY&)_O$=t34MAIjrV>s/M&N\;"S
%ZumTAitlo;olr:XqU\@#_[Rt;I-MF=j4G]WA[#e?Pt:#Y:p9r=%J`eXWK*o5UhiQW7MCZj(3'TdZFZ-O6u$`W%Qtlg'C*62"bl`!
%Au-SRD.Tn7P@_?F_6`@&i:l"W*d+lQemG1X3i!h(Y?JeH_7C7Q-7bK],=!MOJuQ&?LBC!"MOKKn"<gMkAk9;*?ef:@7*)Q;I:oco
%bOLKX."QW%<>h(@R3W?M#b6bH&<O8QCBi;&m+"rn03VX8kFS4Q>eso_03=cO"?OgI1Wd!"HOM.4IUsI.D`9N:-'C-A/.=kUWLt)K
%<LGALc'P+U=U``3_!>Bn#nbf"#2lSAlESee)*JJN4s$\5MU;,6NKh+fh!IWn!ejBC>Z3s6"oAdpNhQYo"BO!f.>&:b$bf^6'Wej&
%N7[f,\sF+el6BEpF>5Nk19,$GU>c^iBm!(8UJ)rI&IqOs/6K0XWAPLn";VDTX6uoO$5:phX2t(8+matB"O=$fJ031'b/sMj2b?7(
%=kTH?1[@W3V\J;F;T"W`"j\M4a2J8(X6-JB]K!AZ$]1h!BiAD:?\PNd9+"1W<\qQ.e_Ii<rAKM>*a0=sY:'fP](_^CaZ3m.L0K-O
%<e>8d;tQtQ=_Jknl2pFVeJ7Mb`DF>UMAPGXF-Jsrf2.C^V@%L\!X!M];^*gE:oZTKUT^Vnl./_q@"d`PA^L7IA-c&g^B0Bn\7[*m
%6hI3@L(rZfiV#I$:YBF&@&/08Aca2%5UN6B":9cUN:'T`8-pOLC^Qp9Jqd%AD-Pk_84;geTTcea9Wf1L$D2n0%T9=e(4$[MhG>,2
%A^,W'bi]2\^5NV"D5c_4J92J@-F%2*^5<3m,RcMOLq4up$8M7YYNHH:*P=:a>[l\&jG"R[EV#qdPDVZV-Dm!tKf?9je8QcT)jEDQ
%[^ncN*BMb(kqXlm_0rnKD'L6BmQ!W-j$hlN,'?:+83@@W$XKb,#$:\[K3KaXf%r^4.#uQ;0rL=N)+R3nU0)ta4(=s^DR7"Y=iadc
%6ZrOnY-Nrc1mT;o&`O;YVK=5Bn6*WcaH04.L!p9c2;Bii,'L?OrZDP!4$shMQW3D:*TLF!cs#83E4+0Z:*OHJYYT:U2-c!-?D"):
%*-RW5JJ3,_8e#a]!=5dsreGD62Tq@E^Uj/'Sr(fek``pWV?c^>2UX-[fC+SBh@ZbGR]o(I2F+'<5L]#15K$\Fe>'YQa$9]+8hSUk
%$+'IF"C9gc0P].OIN3c%W^7ji4*E;,;p.]N=78jtNY41<$TTd%le*'W<IBXg!E_,i3$dVsi"Z"]BIL5'`Xlq(%dD>00EL9u<ZC0]
%b)TjI)JSm>2&\Y[IQf,"^b;Z_6IY8#]S99X=8HUIE,P:F7[(.]A"cpr$=^NKZ730_+:ak.CG10o+Hl+K=HLllD*W!VrZ\0A`YJ+o
%=[2G'd.i?EYFf!ESSi3U)DuDFp=J?%^klcd<@cc;P-NcC`C8\ZfFgY8/$P$YG3-rk#P4k5TaB5@ff/NK`Veq/I^bDj?!LSR<uBFB
%DH#FVBiNZFLq5Q(o]8N?%EN1HbRd9EIL54$1.qBYbCHlqBg)-cF,^QPLX`&Gd*;-KW3$$Xi_=BXVB8$obj4bkd&$'+B^-\+\m"o]
%6C,Hh[ijq5`eolI$jjk\7u5ajA?!XR6YQ-l4CS$%!1"S_:jVmN[c=&EY_SQ/58DAQZLg^`Xj]:]4B^1"][9.aUJWu^f`Bs_n9l9P
%Z&4S,")=EC#oB/D+r7&l*rh\XFo@tP@nBB2Ja+HIiuZJo<(d<R'fRsRGbC]F(C/Apc0['*]PsCGRTj$$md,`'Lg^fn%h%q\D<QZp
%6$mHf9[H`>TH67n6em;EA+$P\?d+3b<27rlVNeYep$E!]qR=0D5+MI+,,?9Z7;jqMGd7mNK`@jaKuF0$W5?o]iDM>`[O?K+]ML%c
%;]cXQl9u2J8+u.G+.nG]p(Ff0!-&%c5jE/!F@Jnm/7s)o@VIRE,"l!L+h94r6XJKt8Z50q;aOd$1-T]Kii0>h&oQob!6lI>LQpnN
%Z,N@C_oe;L3f0>ZKI]'DO]G`(@B(q,lkkh`lOUR:BI`NOKj@1&XXWRN%O_']g@R0ppJ9aqjJRChfL'E7.n?QY/p:]WBLW2o%J/SX
%`FX@a2E#3INY:hn32TCi&&t*JS"?koI#3@^C^t:"HA5d]JdJrQBKH<X'YCUpkD7.[1!jDrHF05TJ"\J_K>&=P`<;PMb\^,T)!kio
%eN3kq[`E.MlM&_%jt"_1!).$A7(W(W8[P,ZSlq'PbU[sC+H"N9bRYkIj+d"fRnu5D$1:@E9KUu\aV>^k+q9SX$rX#UB=OomWTVX!
%=uMQ\JtTVniNFU&R%SD(Lq(5a&9bfLI,=i6%\LL]VqjScFo'rJo(MOo0Ck;I7N[JbpYRp$NpbD^o46JtnOu+YYq!d(7'CC$klAC5
%=p_dq1[!gb3]NNHiVUg1#Mmr'l#TWGs"*&U:u*2RnMtdKKeRoPmRb:-k5ZS75%YC6]1c7'X<[mhYt(RWn3gM&24GF`k8@rN\8^Rl
%&dEuc^LfepaSaW#T0N'<)@n/W;6,J#IL]dWc0bGbPJl@<!M7f==nldaaaSH(*IZ_tZH#!5OUncVLrTBWDFUEb(YrF+nO5":@/A"Y
%?6b18EUDqP_E]"/5,FE.on6g0[qHRSGa<I`Z2T_K+%4nP1S">#3Zps]1s<,<M*XE6=3WYegoWThN@]7cWqI'=X2`66Ffo0mdXQRf
%mJ/#PJ97SJ]jbeHY&s&CAV59!R9AI<a_GGuCM&s(C,i9ra=<?RK\@5/e9j2XE)MY.kg_hoW<l[!I'-LCE41l2ab,M'>.b5]CG&@u
%?u]%UA$BYbLs$!ZcLI"f8mer:"n)[c,<)+-4[RA$Z0(Qigib-%,W*4T+D]I/UBGOfRXn3%(:M2lo%:TF9dh14P&`859\UaPmlaT6
%>c&XR^obF@=hM;9J"9G4g9s5$S-Mk!5XlmE6YM'.MnX,6:TsiTQ[3WWSXI\MqZr=@eB;?oWl?X08@#J51G3P`#)l;D$-YXPSV5Q\
%UEl(=TR^.#<;6Ju#$>iQmidt`@Td1qocP5\a'pc5SS>0A[>eu:Xr=%6_#k#G@4cSBJ;-VWnOsFrZfg;JhMq&JfmuQ\BuI9o!)\<a
%NqM`Ta3PJ.a49Ob<_I%rNTulf8H)le.:E$^K0cLYH95\rXk>ui:1^0eQ-ZTj2&Xi(Dk^tC2AHi.'Lg'qq\LD`U1gcQNitKjJ^*<>
%ns.5]F.S>^9Oci[5?DJ+\1!]1-^UDob`(2-`:Oo&PN@FIa"T+i1XTb5A@<(2'/d"";';e[%-N["1.qWObD'?JV.jF)#iab>&T5Jp
%OM2`nbB/'sg9,4kb(-iUXEf/@N^kkDVP;a$J?JLb.V7#c[^u3b3b(&"5T?o4H);C6#K)*\7E_`H/jq"U,s'a'XVG4/GrjN:'T,Rt
%_Vkp:80d7G9d=[?Y\RAZ?N$oYmWmf)1,GE[MNm]r"'+juO9BsI<n\s1]82m,:[\U>RfS%ddpaEG0S[*RrPt^A-(MgAMCWlel20nm
%II(G(N-:><JQP3DMUMbEUg860:':#Q9l^XQU`uWm"8=RUoE!HqkLajnatD[pi)H8tVU"$[R(OAZ/RWA`FCT`"ZPLhs16>ZM;j]#D
%r6Z7U%rAXNENLHK.Z?0X"(Gradb?rn*q65;=SESdNBhb!HR;D5h`d'V1GqD8l5491;lClN.Q#Pj^:!LJ'P$DcFbd4Lcrgp66c+0[
%nOo$G9S/Zs2bP)kg0o6q\mFfWrha8]g%IXOJhcOqP!bKJ:-._L<kLP$IFW:m>!VN[iJjL/*=CVgK!Ab=i2OAXrD(ROk>^C,;k-'&
%B*A^F._B+1_/*#.;KYBn5,)-IQ4^sf]QpfKMk9\rDLJ,3dN,>nc+;[rbli)unfc-rn?+ju_i"XVa-BT<*irX973^/uP.ZR_H!7VH
%f+CqlJKp\Wgt%,s-cQAVZ<.<u[*\/$^idp05SJc@Sg'[W8=`Js@>>g'H2/f"0u]'s&i!FiabPZtgHhC&38,QMiJB704,;K^+!QJU
%.si`*'"??<-=?VjMrpX)[X3'^#mNt]++Q*9CgEJ$cuSkcdYA.\$Kf15mG%'7?-0'p\hqeVNp7qo$oN,$c\`oc/GbT?^YJ'1a,X%1
%$0pGiloY#XHEjL(V"-"1!4#i5ID\6Afa5S-e@UdG')9&mn0Z?b)7-\(P\]81ZDX`#j`FJ[8(mK8=f(c55mor-a_#`Eb)*9+qW.PT
%S2JDZ>[3)c]ufoOMVjDn9X@mq$_W?-dQlhb()O.AWoSn>R9/X_*qb=oQgSh4*%BF!=*lP0-j1#8--P;e6+BrH(D7OkI@q)q3B/7d
%8S9XE'=po.Sup<`,1gqsPSjc.1';h5j+or6<ZX>K?T8*WgCGcbI'Esl_0-bXI^,kRj/Wk-)^J6W&ESK@YamYg+M4lP.85Mh5&MRB
%;KRWW5ZHoS'#>L/-$BPD`.t3Mfu*Lc(R!bYppG@N.8Q(-Q:s)&SLO?>l\Q>o;W\3;XX-FQ"X.pPn/<sBaOHM#0kM,R(LD3kaTjtF
%R:.'No.ZCsg0o.LdY(>.\Qk;MjLEtgQ$8)3(>OaJ-@I_W?lcguqO'(M5M,Q5f(HX$)%;#VA+T>`2p)K8W%Zo3bcMm$A\KRSkaq]i
%[$D9-<u-o-JS:4ggB6"Y;%Bq_e&_$SLK3RB>HG/AI6:A1+D3)R=mf?9[>D;^Y>PEQHP+q$Bf$%L94SjC4H4<e]9pL6gPP<J]=5RD
%Y?>*cFiUYX%Ko6]W.rNS,Xm6Na53FW3tETTJ1Rd\)]h5e1WEsLr-I(:V7U2EfHnN%ZQ+V\K.7uOTcVr0H$Em\`lkYjU,I8Q?(hE&
%DH7j\:efllS7\lUn("#d,fgfn.n2ul]LX2d;)sk1\DFP1=a;5'`j;HTY@^Mo7I6)AQ?<8.Kp>2L6%atDP<P4_J6G!555[fgG+IsR
%O3I8-ZlqW%NWA<^pZPZFpm^ZBQ>GkA,r2g(/&H%!g3\ZKUH,+T^ITqS"#Ed<b+VdAB:KIN3ZpFa"SS-$d3)I;?rsbqJ`a@>+jM,J
%E1cd^rch8YUUMA#lmrD$<]=?-dgC71.*6V;@2LiOmE<R?r:*MDJu[njlpCR_8Aul0Nk(i_R'8#;;NY4g"JCA&`LbTMpd;Q$4)@oc
%_(*Pq,eA)32l<g>\f_=#KOYl)2eJLUjMa*VE*9!XG?lW#)R3:D[d"")NiC]7^bSDL@P4uE)eOrB+$_`SLJI=kDJ_A;iFa?tRWeCJ
%$O"9O,o9',6plZNKqZ39Iu($pPLgLB)ecY]&lMcM;F[A;<M_]+qDKAI$Vbf7?-NL@^8j@'/5ifTO5F4p2CjanU*mrm4m\XjP,%aB
%_1-Vhl)lC1fF.ApRP.)4Q@/mb,e-1u&)WrGc,JrrXrY%(*$3;q&]%D[[L5p"3>-d=_5=H4%t4[ML6U_MI7NOF?(p^X@CYi*^&??k
%<.?;$j?G,oqMc0OmGFNLkJ)qQlQ_5rmIs=sTWMae0F;Rep7;Q>(\iGe+t5nbFm.K"LM#Y=I$1.RU\:AJkNA<"Z_'GT7+..UbpQtq
%g2qe%jmf92I/N+uibs-ZO6<)]i,;o`.5?SZaUj:Rk5S+[)DZ(TP@H&3(W1lsIlcc=J%,AEA2UIOjc;Qg`]=&H@ca!'DrIkZ]H4h5
%P5(LfgZ,iB$2@_kH+n_s2\aglX8Ig2#Y!jB$-eU2ESr`<hWC'CBI9-%`ScG4B1N#T6]igPgY*^\9];$(eHj\8jfGQ]S(m1klo%<K
%#23aIrmD42AUuXJ[pVnc^$>)k%*=Zhqhu0sq.!8s9+2"dlN(a>SaVd0a=f'+&?3B:jVWra<G!B5pE389#/X=RHGN(Q&^#mhpEKtV
%K6G6]CBG)MaBGqh_#\`K@Q$ZCQ?KWrq/12M3@<DCh8#g4;ucuL89s"9e6552A2'!V3YZFG#DRbPP,=_EM4u3M)C%;@0*Alg`D#U<
%*/ik_$*q\t1DH25E9]e+,Z5T9Toa[JR&Jhh/L\>.j%W0lRI>h[GKd\\n]a\]0A5aH??X-_<k7RrS"4cLpq%:;Klt$ZG\hh0FO.1c
%328El.a3dDU/h\0J=fMQ3UU3Mg.DjI0d"7/GPB0Vj;B<\`!hob4f4XtX!f*R'4FYNBJ=$D*^n5a4sCa:>UGD(2O4o>Q0]iF82ft!
%PJAHbaK8iEZNKJR>t`ZhM.BFBC8Z0O>k1'"+Zt*OmKibq!m&9MLe&mFHQ']U`\['Qr7+(EC.8Bh1a-Psli]XE6'e2=!.!CcBMfU3
%OfV48/DbfF$9!\CBe'>.Acf8B%e[`A3`Q*2AOgpPFDFuC^oF0iTlTNiHQ3*q+PcFuIB<&H^E15),"=n+`Ft-M(:L'_G&p1hR-0Pm
%m=HuM4FZ/,j4plp?/*$o6@br=_2UCJB*eIWfX,a1\e6JAjcG+Pc;X@$lbVQb/bHF>:lcT*K9;V^2->F:0WN>2%U."'$GMUp"%C<f
%68f3@LGPSl.@)47d!t*YDnR>cm\q3_P-UBV`&2/n,Mppdj4M9_iW@tUl(\iMHuQ.TTBQFTF(Ki3A\Z!6"rfZ.Q`(AaJup2%]#?Bl
%H'!>CpC`(epX?rJm8'!Ha$clhWO,-+Q:'L?]!c_,+E0+N@;!<0CiX.$*X6@&lu'.K_<"b^o:>#!4#:*SCl:>2$Wa/>!6O#YFX*3-
%%1&-EN2VID#`tWiFO<P:S*l>7i]9,$XY%RM)D"KrpZ_raU/`koLBN<fYUpiW2b\[E2n)_7-?XBXdsSgX2"I+m(%k#RN^htEok*Yb
%Fr73VVBVfQAq"2B&M&rX3_5_C@=@`A2iNGK*ts]&_ZI+-U02ZQ``'.69+1co&]\>I/DYkOV<.nC:q/&a,dDS^QbZWt;WcX=+^r<+
%"sb?6S1V5"%AQ+cQd3LecM;+]d'ujFmDl+$LY<Od%<)0Dk3>4iM*q<=j4G3.Dk^jS7ZTQ+7WGS7D>4+(WTaYe$3C;>lUAo84]D`:
%Lu\W7h8r:+$H!rg*n:;GaME*;Y%'a6+::<+pHdphgJ+1p88/5,$1Q/?Vf5Y#j9Gi#Tbp",W,)5R>_/=YBCi1J3O^/d22:!fC&0oo
%Qhg"8+tesiCG9G5`P<mT4r@Q1()DCC"o]sQ].B<m<mTL+56O?l]2$=R7+$^?HsNDs?VAcEW(G5VMN`_@r2.L1X"bB\;ETe,G@0+7
%@gf:rF5'_SNa>IJH9]m7fnPrT-sP)O8L3=An1_+e.7d2#GIT'/QjC_l*QE1eJ\pCP]"X)1o@A3#_FW!GDS.DkJ[Q#/$YV+:F9C9P
%acss6L3c.>C:fKC<#2B``%t(b*h=!K8kMkI$<#6HU?&/HY2"3R@*hRIa8',qTGE13Kh2O,nmM,6KH*B68A[;$llF@gqJqS[V]N1(
%apmbnPT=gm/U8R]"3PC\UK5/a2q1+Gfn"/Fi`:'_j[=+RDMgf*-]//'RrU]m$UG,)%DmK(@NjbYZuV#&7H_ip=J\DeFf1Xor'e^T
%_mLIPU'<(??"N#bQY1'")5W?`E<qsE78e!de0Plb&9C^Vqk=G%0e;$OP,]X\b0Q!Iq66&>"b]GsX&2/'1]c7L\H`$XU($mPD,M?L
%;H<:<G1_f;V[G@ek^L%L=*40]FPr?^TIS$T-$1Xn969eMTVT/jg<UK@_a+t?o2+uU-9K=OY\p[1I"gf]*g%b:n"ls'-"H]ONiD0>
%.;/$q)&bH/fsIe^g86Dj.ec8Bk"o<aL4WiO\U9^)2^''U>1gQQI9k8\)a:S2_33P`C*0DJ%8gGnfMb8+c4[Jl<L))37C_%W$6a$f
%>g(cLSGuoH&hmokFp;7n>g_?WP3P`;*BL;PZ,,#uZ4k:4.I#EE$4C6N@[(;oGZ"WH$edKpLDQO!@]2kNSLCrUnpJF9bIW/f^A6%4
%Yki^%_icK(^K)&.QLGIhok_O]SDm"1V==hP=(bJU.,52uW611!g+jNAj%Ccar(0Aq*n4"<ia_385SNk]RjZ=L"V0qigs`@aA(QPu
%+9l!55HL%N%k>2@%-"8s3T(1)?Q(NMA.Fif""8F/#=P>aC_$55&(:9;p1FW<HdM:;p9)3T*kuu`?L;_D#L;KRZgu.S-5mZkLF[hA
%'@,/X=B7nKhL'GXjf&k>[HNVuWX<Cb9M<5^;o"#"+;q7H`RUY8_Z"2Z9o?VOk:]bV=t+ca$15A3TS'-:,"$%B8K`[V@r^1dCBa!e
%^30]'L=)Wu?7]#%\uoCWEhGaY?(;#FB70"g'Z.lHlmt>i65N&=60A;]f?p8?\+2MP@t]&sq5X$8#]@\C3pb56,Z%$/QE$W__D'h"
%;pt>V3dk1':u:R%199i/DjKQfV:TqAWa-iBKL962.lOD0/ta<QpP,(^,nP(%bTpZ4ZsG#0eTZ`G0n;;o#9M'Y^TnXq<sL"Fd]fto
%&B/o\Z;h=ED6V.%MnP`^&%FfkN9X.@`oj:"h[K>B=#gH?(>2!g=[=1+bg\');117*M446Q\e0am_e*OC8F2-5QEX*HMZT\I#E"L/
%C8RCn4\ct<oIMmZ`F5YR>eKbKYjeZlBi.f"RKad']P"DMrbR=2(Y.G#&aJ8V\_^2n6RiNe^`>O.3adO,^m!D[=t\5LQ2/ZM0f]jl
%K$](uON@)0/P4MUj,_EQ_-o\#NsK$(TA`%]F'?Y5>1dHK&E?Te$pd910dZ+LJpfH*:Z`s$E4t]h(>n1Rb,h:6+4DB?YnSASi!XCl
%RQS1_mej9jk^UI]b\NI=WP_`#D((X#ir-m8h\V^$Rq<D6UJk>lit$d<'jP0pJOI+!EZcnEF8YHLe;hcs;:BZUm:S5]#m/?Z/[mmF
%Ok"hF0Z6Iu;AVn:S/IM/I:X8QgC?EDc&k&[bO`Of,b2[E%u!afaFgA7g;FnmfR]K<Q!tf1Tb5Ta^491>P%3,6VBors7V#OGlgd/B
%Vi8@R-<4Y3W([_!<+5[?*KHW-4E!.8<##\P)*TE(4CR)s?Q3tp&8508P2a$'FGj3nY\sUlNdH^]nF&p*XO"(WC*2=5'b+HScGX`5
%1K0o[6a?4obUsYDZBZ%nC_=d2BVGrd`2.h.7;i2l.\1&WrL!L8o1o\@2WAc]iKY5Tg>\n.BIM1[_I_K9d[2IXO5,!r=&V%<;U9tc
%O:=>i#B)Aqkl"FoSO:s<i,c-YfWVgoP86)e;(jUfV,]'1(2.JRO#[X".M_4?5$W@1fr$f5?ugl;Ld_;\g;Kp;j=)^m/%ArC83e.U
%RkJ!-#PPQ&S<6G<=':i9,%7ln3AQ15;CS<i>$E-bFu>eq-272)QD$Hjoj%IJs&5%:3F=Y(VP[9;V%cED$%t]23r9Qu#U;la0cLS=
%4+5#F:L8n2h+83*KMBJC9\m9hZ>sA>)IrToRD;Unl]M`<T!5`gJ[j6_8i/iBG*+2i4[un)4Ha\[:dMO*9XUp#CJ\;&;U]@&Zj]L1
%,)I/"@kDA\>.3T[(Ba:'cGS/*eoP.o:j)^G9/c@V6uEN4HsGk4El4_LQ>62GOtBq:9+o<eqY.7_#]1rPp>L7tbfh6mpPMCI_1M*-
%Xu0%n3*mn]K``\mWkM!ed./BZ:G<M@.)7#APL>WWffBE21oS*kG&>rHm(Q-?;Q5ER@V>Z)_,HhJG$3/4rk\50riIaA@Y9LXSra>n
%K1F<+Lq.;:KRM06"'i>WY;22b_r"6R8#(dX:C*IO_Q'>eq,Ikb(G2CuT'+0R>2$t?6&'FuenIN23<JCFl_+QY(?XR`VXBncpkM]]
%[QC#G18%TB_)8&:IT0C&n=_\OpfY[br!g4BR2WlL!GWnd^%=A=cTMcQQD='1DuE4]#Z\RAm*plrc'ndhWc(dZBABg!GRu'S0b=Se
%9mMu;cnu1!E^d&D#XQ+9)/[8E8Fdmpa``[1:$g.7eG/7iKqh21<+L(^DB'p2Ke[j?J3-<J<)!L-Tbo&E/0hZWOO@0J-j7P5QeUkr
%\\:7?&2ti,USB:@l->Pk6NQghm5/L=VoKqqV9gsEI8!KT`d1M=LTU_U$,oJL<;JrV?nk6E'p>YO0LJiM#8Mf2JZ:E9*Pm576D0L#
%^lb/ZFrh\3L!B&Il[#,I0X.%,MKLZi*q([C;7b@VXX#AbnTOf&YAAKCQnLt]`7_;t=c?K,6r4I5VqF`t-eA"EnO<3&8MR,r@p'+*
%9fLZXNu;lX8h,pfH]i&!0=eWbT!OJ_Ua"-]@mZhV?Wt&7i]/oOB)%77!KrNta`B_PE6eGO4%4K9#mXu10im=s_E=Q^h%WUjG@0IG
%UkdIS/3"0YNhMC3c`JsY^dKM&A!K93/=>T2<K.p:^A%!"mi+dIMc3Vaj7ESUPG0fIrkob6#FTD&^tlVH;ljLlLEr$&^Npm9c!=pN
%2.:CUY`m;O.HH=Pj%uK7U7\XK^ap[;&.iDA!pSY=d7DX'PkQ_M,`!p./MdYnVD-cb<<bicgu4UflIj="Cuo;ZZSF0U9!%rN%`+Kb
%peTZb0<QWu/<p\'RJcc=Us:I9,c7mC?*b;I=.p]i>0`nrXF*ob/CA7X?Hagq4;2M?hr]q(Zhq4^h6_$:G1OhYCM/(bWkL%5gLZ5F
%lZoZ0rV#a?@9h@3N]XQDqR@959O_CBF58Y=lk@'&5Z1>]7?R%M1=7/d.Qg+4$O?ki,3#^Y@^B@CR9)J@>E$nf0&(7EaZl8ccbimN
%J+:/9<JKa]`D[g^YW9&J(ZaDsp:]/?pSZtjCi0a7r@.YX3A>A&?iOC^q%bp?L`8u%FE45B`^4HlDf2ZEG[:i<7d<3/(4!(`p&;&p
%Uld0kN'BT3BSQXg6JHc65b[G8C&O%je!p$&*9tkWqP4%X<.>tc-`?!A=YAFS$LK4<>'K;1p9TB!1fihQDq8XTCKDFuWRK?/ie-V@
%[41'qUBWMpW%_e@DkkSV6unO#c-UoQ#S[)5GqhjiaOW`8YNj:AU>7L;`\TU0U#8Y2OYp+FYG1ORV^]Ck?<&j5bj"(bB+?)sC@^-k
%Rif\Tm?"_@hguXJUo@%biAq^.&kaWL8>"3XEOEeAVIb3`-g:YSTKH7)L,27B=G[cj:M)'bBn7u*=c3t1\fN?d`HG>*R"-M+p(s73
%":Y!&7QknbL8#7s%5/Z&]inbC$7Lhn_WBDDoe)gn3ms9IVh_Zle2F(6J6u0K;rj(6\3QuURST6-qt9D_'L>0=]oe_4:kF@/1:%SY
%B[V31JgG&a7aHnn9M,NBY`=Zr@cY,+C<5rc0T)$oKQ!tBg+^;q)^1>c4uJQ%o6/(!kp"t:KiMVKMc]o#W/kY)eFhGgRCV:+0(+cQ
%mLT(LRQs.eZ68>4-P:C]+=7I"KVmjc5X>p5rs1XJ&5Q95,E=&X'j`9Anl1=OKi+:A\&t3R*Ec"qX)=1H,ln=9<B>npb#q%[Xf$us
%Oj[[mSlo]Fc3#%Nna[Y(8QRukDNph_ZWBl.ZEj`>9APAi\.iWQaJ^>,TdasKH^qW.hE*$"iaEo>OcRC*I`L5VM2#H&""8$gNl7E*
%7sSq/mZT#oSi=`6KPm.G>7>/q^K:0,8h<9u>TfBpLe>rpiT;'ka7VSO>qEgWcmg(^*p+[)$a*53bp.C';oo6ms-&1E-,U&6Ce=*M
%`7hSH3B072qd'%0:\fKOdHejB]+2q^o?W(7]UA0A&'ag/Z6;D:hZ?_!Fls+;A_<KNluY]H43]PWR])Q>![s=N(eb+)dPEZf=C+@/
%E(qd*"D(I%F4`.]j5IVFfXEiqqa0dY/IXb=>9FKiWm,E^LQIb+%@NLJQUC_pC:8a7+<5qQNrV&\6ioaaYDsVPp;_S`8sk$a8iN)9
%;Yfd="u4b)T(K8UAp85!PQ&q+7lek:EG``_)+9aJ$WU=aioMjPW=0Ltktf;L;Y-!-J$VJV*YSNg02ch>H\<\*$`ZYuV`/2@dEn%Z
%3K'/2Q!J?YW"tY`$`%m2\tB[:q"L-u96%ssf+;MVC2.f"1[Q!R)mS1A1cq*099OfKA]qcliAPc^.PH_Ih0,UNZ4F8-Hes%]3&$-4
%`2Zqhdt^k4W@&eFm0\&Qf<Gqp5AIt"FL#"M]MGEi=<lt.X:3giV*!:5q[ft%CD9LbYm5"nYL:T"[P-6$VFk@*1!QF/($P5,k]?No
%hjpYqc5Gd<(!I\Q^h$f$FlWC;8_iG%DVi<<,F/m'h/Db]dg]i<2jgOm/pBDXACi;75EfE)m<-L&[bj:dGc$PJ4d#ZSYJq84[0U[.
%q/a9cSq#@f=5ebM!9:nnBuK2;o6k``-[=L7]fEobBBmjb$2j#E=e=NBDPMH>?A/Wog4'&Eb%B4NqV3m+4rEfXboZ]@F)[+ZIZN@q
%'"7OEJ3eUTL-Kl<hq.<lksf<TU;Md4YgJ&H8moYL<A;bCCW](h^20:PHIPPP^(WFX6#"mfMP:+Q;EK:l_BMJ9W&09LQl>NFYdMC8
%0m.WuOoelp6>@q=!8<NV!_A(-?7WN2[dU?@r[,.03s@&3[>64A"eUo*UhpmB5Jh?lVsgo#g_%!Gfh-k;";G*X33bMP&HpO\A;WbF
%UMQ=";G&4F-\+PdV64%!Qn$=,eL=3Ql5g(oq!cIC]2eq93+mF]!*^b^$78p^Dj]fN$r`jOc8a+b56i%;C5TR)93usAgQZ=cqBK>f
%JoDul-5sUag"268YO:YjIbW=[9_p3kN3,cH![3!#nVBQ@;`6H[$.:1n/EV\X)p:ii:e6\I.S/^JRo@,7<c9;XBHCni1$jg78:Mm%
%I1Q?;F%uFANNs/3@m[065Qohr@m/IRc8kd5N0)$L@R*rLA_X8;[:$hW1_aI3!SUPQ-n)2?;!Y/I+pF?jD*co>'5V-J\b]uE"P4LE
%<[nV1Fs?g=Z6"N*K4ZIUX]giCj+H!73ujKDRn/kjr*\'Xn;=4V=0\r2*_*rqXgi&4+pdQ<71d/(EGQmY1!uh%/iGb7WH`>G25?$M
%=ZB!uf<$rrKh\e/hc35G.V<!?NX))GA+@?W^iXDXA!rFte7ONGhMn[0n.Cc7r0&P@K:2ggW$.#uK"Ga:'9sS/L$55P1@9tY2aM!&
%>JXZk[%Tl4"M[UC%`k0jI4e(MO0E>,jm3;+O\UkZj+K'_R7b7..dnoD.AiQ5m+k0n*`q=\B<.I;*V,NHQhVCZU&jY7XZ&3NQYEdM
%&IZct3+Xn*VYH.W-.@2f5PZ"L&>(g#m,D%Ii0=%8Uf+Io<)[9SBNp]>KO`H'*!!=<CQl=nW'CaX"SX^])gf-23"fYY&M#dG)Zq9a
%=%Y=/<J!&K[D\I&.a=t0$*)F\ShkWI@U@\AaV^[cQjZ);>/h%Nk>pMS0g0f'P0tXpGk<]q.3\Zdlp%o$_4U&ih<Xo)>n0nD-kJT$
%VB@YDQRimSlUNuGOGc!YVOo3ZHIKLn$0)r,`uaj6nt9^YmM:OEI1C":0lY&?a'Rb"2FAXlp2IGl84'(XBNi)$0:L,X9L#Z@%t.#9
%[Z/88/f:WbPa(5j$.nAJ5;::(;%4sq&uD#7Th%'%gB5\>(IhIN2PR1Xc"j/UpcTDVL;V?c9F3V^fqom%0HJ>BG4P'bdp?P\6'QP'
%!burJ5R*Itrn*JK`'gtna!gq@BMUcOSpE+NH1PMM[.dh:"0.dfOc+DWhT]5@$L^o;"%F]M8bjdE#FQ6`,2:D)6U*(WW/$<,h%^pF
%_RBm(Qh!(RGk<.$.F,c7@=B]Afk%U15;q7\b)Z79MZZ!LZX$R1rSBq:Z^])O"":L<h^J9gK>@Jn2%Up;KnmFkFCH4?.eoN4,K#aS
%YYHI]24j9b2%3RNo".oT1P^7qPQ6`=D9%K'bO2Tl:`!&q(oF&o#=_[>`<Cc%r6qa:%iH^#?c9Ktq+X4fTXeYr?)d2QK83'p/f^0a
%McU2e,g-7.`ai?r<f@46%Bjco[^:lj_KTFZ7<3'6>n7Pd>dbDp)-keVht3"rj(SAQUcI/$Z5+9M/G8?h2B6?P5R24MGs7#"e+&N<
%>VnTGd;cK02lTR(!F!*XXIqt"0&L$@Z7kL(EEk\1%rOZ"cm5aKjT$ie99^4Kk#i7.9:1=O*TBJo]\Q-4Xp-'pd5JecQCDJMg1n*j
%[Vkj_:Eb2\&7*RhS$^TD/NSe]a(?0d1/EQlllNRJkYC,<kJ]VpCVl_#g`LBf%sGN[#?qTbMM'7LU+T0?>/Aelb`nZeEcTNrNZ0Z3
%X7r^uQT*+aD`C:K"*2JRhn3e3aNu.EQ)^;]dG$cOD1HG3+7nG>WuNt[\l!U%f89A*s&i65$V,&1"eh^<nKb\D+L;UMB5604p>e[2
%WjsfO#lN`09'kC7Sh\C6+YM:sYS$u[.4Yt(<ET;m2];1<3Nt9(e-4!g'ZHpUhnt1c24U/^W(88hg%8GY\.URo=>5+2afo9`aMXa=
%!\4W^S\5dhDn"DeMoLZEBk@Y1eEF'Zg-0F&[STJ?<U9Wa2q*?X1AbSE?DYtZRo'H3n6/e'fU1B.2_4cD8Xt+*D0:6;Da"-7^3-s<
%HB],';Ws!_,2u-66o_fYWrM!(4[a9G[-!!m@/i-^c:P*)NHH;7HD:0NnR<&d?@pAZr0/1g\NbQ5U`;%Z"+*-GK0MSCSYOaK9"X?P
%SGNu)C;BI#:"NEd;K.$XGEh-?B;*F=V#+7Mor"B0ko@f:,]3nmr)C!X1o^'_:Wi4e3O$P61&1?=f/^Qd7t#<JJBf?7Ba/DPGAn$u
%X/.UTj@h]PLIK%TYS7n6-+8f-p_iX9<s4R1"u[XUCA6[nG/Rg9Y\0<.8.BgRr7!X]/oJTKFZmZb_qdG"$R6Bo$R#gYZn&f3]QL19
%G.VDq8s(duHa:)![AW-I<J#DXaG_,?E,%`Laa_iTWFAAJ3h7q<Eq4Q64*_"oNZM9I-g$dH;I`^^KM2hfj?RXE/"B2)a7O#M80!C/
%n:eE:QFX#QBhOFr9L6.YG_97<dGUolc0Fgsc_i8Q>Imn6f)f%d%V")SI6'9SXcDCq:/M;65JqA?,\1Z5?WhYmPPkjDs7N:p'e][%
%bi*`FG7=;%@Gc+t>GbcZjaR"XMgX1_\(g"V='^"+/Q]-g^K[;q.`SWHLUf:_gA(d9qKXChCc+(f5hO.j&F6i;^`bf!gY%>j$L$-F
%DdW`/>:W-_#N\'imH!nmW,kE@JE4a+CcD5Ep#,8S;Y8TnMYnGd:K*i0]M6@g$SsQL@A%JDi'P%LnFails3Wlq+VGQ-+I7R/VRljc
%'85>47T,+#7bE%cp`%skFfSN(M9"[Sr93)(Ot<6Mh<(qr]E++$4<j+mFrZ]rNE%7nWjX1IWD6jcl5iL+N,4<Pl109m'=UUB#r9J-
%VKWUs;V)4=m2<M/S,l"\Rq)#@;$jLe4TOj"*#k9+Z."r'E9ioncMfed%]s_70GI#t+C::T?9p2ma,<$>kZ!O!_TT(7d,A5lZViA.
%pj4[,c_pIpouVj-*c!Wn5Al2RM#1i@33UmUL4dI`iS?@T7Hif#G/*4aLZRCcVm3Q\,J;=]G-2XA>aT]\g?T)N=6XTWYA8Tn05c#V
%jl?l[mhY$?P&NU]oj3Rh]m2c!Yt5>(4Gbe)fVjPp+iYi0(&!h.6X=_(_'Xsmj><^'hoda#b3"m)6PW1L8g(2G(=%kdLp9CH_m:?#
%n=1r::9F,W)1I/W6YJkc2XG<1Hr@bQq&sA-;[Bhq7f^:-jTR[_Ch7?&=-uE0iYK%9:/)39e(47+d4CAr>_Q_mV,0g:%O@-=Fi6t/
%HcJF9gr1!$L;`O(M^"Yk"Lu8RfNDB\lE*<MoaX5]a\r+(")9I?P'Em[(<ma4$:Nse_7P;bAm2Z@jbD-!,;fKF87WFO/\AU3#jb!&
%Aa$IT$2br2c!abOdB4Pd]_VIUDPG[&HuleT(<-F5ic9^<5(M[fZ^T)ZC,23/h;t>EZoGOi./MhAluk(>%>gC5YeeEE/^^:G*s44d
%:8#3L0nD#]m?A8<R[!l<DHjKVd4]YF^r#UlW+ge=:VQRp1EVTIU(><MMJ7RqM>uaBIW-mR?e=S:e=b&_<h_AONeA%bi!qBB;m/N^
%"QXCnFbgn&<!L]1jTG)H&8[hP/B>eo&C0Ej%n4?$pS!ucFdnH.@3"X.1a[VL=AS;30*VrrP]114d00M89K8IW9c<P`4To)j@9Jmc
%f-CQLVR^XsAV'kj$iM'ek&._]Hu;r[fV&eQSOHN,Q#c!Lo0(ep&jh%i>mNhPUCmkYAQV<YfuE[;NrlQ3k2aliPWE1cW=Ni%f\PCK
%DOSd5!F;egIJC\VfChA%oZ1Yibc3kaPi2.(eio*79tqJSTABecWMVqQ=?4rh.[rTA74s/O/U1]-F5WQ[9h>0ON0d"VA]tCsN&C:b
%b"n6uf;ZL_^f:?bpV9:/Mgnj@q2_Rj1L7HC03adK@7IW1#E^m$K)lHo2Za9Oi!$8m(P;:0E((e3[L09hoMf\F:/*&gO%At4RV__F
%orKWF6KT5"SU@do^jETp?GMlScSA5jKq&DUSY8L#HA:;X("t-0`/@@W[*\NH7l"pJV%fD%Z-\R1[uQB/$?8!@+pA2&M[gpr+e[Mp
%Y,aSQZ_h5V%=*]M.t_@4%4sY,5hgmm3iWi\OZ@AdLt@QB1#j5b9m"LHMp<>7psR\TkVb5b!f[S/A4o/^qro*:3SP(70j+q>N^ohc
%_*?AY>I.c6goZ['*.k56K))A=:BE43mCL(I#tSH@Z^M$[,"Z>(4ZSPfq,GoVXttI:a%+c*K[,8_I,c!h#p^!(1/X`N$N/4n&'O\F
%.kGMb,_Re+qG*u89Zik8M.$-eJ-@"J(,kTb;h33P33qBn4,--6-P@2@'hi!,8=i\*5aXtcYRe1'1+XVs\(@V8ho*#5GE_Oa)0"@;
%Xl!$nc'aUb*efc+PmU*T"!GM]J<9e@Eq)'l0RmU)nj!/pKCD,':]5e?:]L@-s6"n,J,f?u?b[Y8^].[?iLg,G^])D@r#bt%?iT6V
%rkgu!lTb=)J,SpKs8:3iK`:i*N^%sfVgnO.^]%U?oj@^pj^8&2J,Oj^_+Wr!J,f9Cl$r[Ss6`,LIh0(OjT~>
%AI9_PrivateDataEnd
